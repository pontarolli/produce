[
    {
        "id": "13170589.bf6fd2",
        "type": "tab",
        "label": "Produce (NATS)",
        "disabled": false,
        "info": ""
    },
    {
        "id": "3186fe8a8438c19e",
        "type": "tab",
        "label": "Produce (OPCUA)",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "c8c940f0f7546447",
        "type": "tab",
        "label": "Tempo de Resposta serviço",
        "disabled": true,
        "info": "",
        "env": []
    },
    {
        "id": "3fc007a97f3fcca5",
        "type": "tab",
        "label": "backup",
        "disabled": true,
        "info": "",
        "env": []
    },
    {
        "id": "70dd01bf0abcf11f",
        "type": "tab",
        "label": "API Gateway",
        "disabled": true,
        "info": "",
        "env": []
    },
    {
        "id": "4a50bac9b08cc625",
        "type": "tab",
        "label": "OPC UA (Playground)",
        "disabled": true,
        "info": "",
        "env": []
    },
    {
        "id": "de723d7ccb525411",
        "type": "group",
        "z": "3fc007a97f3fcca5",
        "name": "Moleculer Framework Simple Example",
        "style": {
            "fill": "#777777",
            "label": true,
            "color": "#000000"
        },
        "nodes": [
            "6b11f1b1853e2e50",
            "4faf1c149c06ecec",
            "be0bca10a2032aab"
        ],
        "x": 288,
        "y": 53,
        "w": 764,
        "h": 694
    },
    {
        "id": "f67e7e89a114723f",
        "type": "group",
        "z": "13170589.bf6fd2",
        "name": "🟠 6 Communicate",
        "style": {
            "label": true,
            "stroke": "#92d04f",
            "fill": "#e3f3d3",
            "color": "#92d04f"
        },
        "nodes": [
            "0467ed2a0f2d46fa",
            "e33f45061eadd986",
            "2cc876c05e2eac32",
            "cd9a6b8c18b1e94e",
            "ccbf81a13c5f6bf3",
            "414b9fe8b6dfb983",
            "8cd3192167609f4d",
            "7d19df1a73516aaf",
            "1335a984946eeda7",
            "ee520e86be8fa9e4",
            "481fda9a7d808b62"
        ],
        "x": 1434,
        "y": 139,
        "w": 832,
        "h": 202
    },
    {
        "id": "9334aa3adb839a1f",
        "type": "group",
        "z": "13170589.bf6fd2",
        "name": "🟡 7 Select",
        "style": {
            "label": true,
            "stroke": "#92d04f",
            "fill": "#e3f3d3",
            "color": "#92d04f"
        },
        "nodes": [
            "26c69fe7cdb3f048",
            "7a56353afcae4d8d",
            "67d58169ec97f73b"
        ],
        "x": 2288,
        "y": 139,
        "w": 904,
        "h": 628
    },
    {
        "id": "e76b2f922b1b4495",
        "type": "group",
        "z": "13170589.bf6fd2",
        "name": "Produce",
        "style": {
            "label": true,
            "fill": "#e3f3d3",
            "stroke": "#92d04f",
            "color": "#92d04f"
        },
        "nodes": [
            "ca54d2444135848d",
            "79219bfd94fcba84"
        ],
        "x": 774,
        "y": 19,
        "w": 4512,
        "h": 82
    },
    {
        "id": "2a516f0293649552",
        "type": "group",
        "z": "3fc007a97f3fcca5",
        "name": "Assets Sensors",
        "style": {
            "fill": "#92d04f",
            "label": true,
            "color": "#000000"
        },
        "nodes": [
            "86b433e968f1e72f",
            "c5188b705be51128",
            "123adc3b4fd1f435",
            "a1a0dd3fa15bb567",
            "a246b85c05ca84e8"
        ],
        "x": 1108,
        "y": 133,
        "w": 864,
        "h": 694
    },
    {
        "id": "5f28ab2e8045f710",
        "type": "group",
        "z": "3fc007a97f3fcca5",
        "name": "Assets Controllers",
        "style": {
            "fill": "#92d04f",
            "label": true,
            "color": "#000000"
        },
        "nodes": [
            "b355f8f0cdc6368e",
            "e627e9b93a667142",
            "7ced3cc227448344",
            "01e8d789c86f0e85",
            "e9f305c45419e4aa"
        ],
        "x": 1118,
        "y": 853,
        "w": 854,
        "h": 1094
    },
    {
        "id": "92873329bc006b1f",
        "type": "group",
        "z": "3fc007a97f3fcca5",
        "name": "Desenvolvendo",
        "style": {
            "fill": "#ff0000",
            "label": true,
            "color": "#000000"
        },
        "nodes": [
            "eff39aabd40ed5ca"
        ],
        "x": 1114,
        "y": 39,
        "w": 172,
        "h": 82
    },
    {
        "id": "24e10c133b467af2",
        "type": "group",
        "z": "3fc007a97f3fcca5",
        "name": "Testando",
        "style": {
            "fill": "#ffC000",
            "label": true,
            "color": "#000000"
        },
        "nodes": [
            "e11d97bb28623586"
        ],
        "x": 1294,
        "y": 39,
        "w": 172,
        "h": 82
    },
    {
        "id": "66db1ca4c7b21fca",
        "type": "group",
        "z": "3fc007a97f3fcca5",
        "name": "Produção",
        "style": {
            "fill": "#92d04f",
            "label": true,
            "color": "#000000"
        },
        "nodes": [
            "4efe4dac33e0d43e"
        ],
        "x": 1474,
        "y": 39,
        "w": 172,
        "h": 82
    },
    {
        "id": "feb679f94e8f4bad",
        "type": "group",
        "z": "3fc007a97f3fcca5",
        "name": "Assets Actuators",
        "style": {
            "fill": "#92d04f",
            "label": true,
            "color": "#000000"
        },
        "nodes": [
            "201e1c1595fbf5df",
            "676a1694ceb3ecfc",
            "ec4ee5ab3682f7b0",
            "846b42adf77c2e58"
        ],
        "x": 1128,
        "y": 1973,
        "w": 844,
        "h": 754
    },
    {
        "id": "39a13906941267e9",
        "type": "group",
        "z": "3fc007a97f3fcca5",
        "name": "Browse Hierarchical Address Space Structure & Display on Dashboard",
        "style": {
            "label": true,
            "color": "#000000"
        },
        "nodes": [
            "83358c6d1cc7a629",
            "701758bf4bdb57f6",
            "ef3c651bc795ec61",
            "a1fc0d8271554baa",
            "c51686df6e9d2bbb",
            "d89dbcb7ac4dfc8d",
            "b73b900787aa7d03",
            "9ff77efb17cb09fa",
            "d2d45ea61f045df2",
            "a445d9d12b75d2d9",
            "5f9473d98b321781",
            "7617eaf963557234",
            "ba0f730dd9f32afc",
            "e322d36fcd014a79",
            "048e4cb3c247b532",
            "afc84cf99adbe5dd",
            "4418af6365ee4e77",
            "8e34acd857ce0c47",
            "24af649531d10c99",
            "668b6b24a5564f10",
            "36124c0ea8745873",
            "734d301c2ef4605b"
        ],
        "x": 2034,
        "y": 99,
        "w": 1172,
        "h": 422
    },
    {
        "id": "820910c38020760a",
        "type": "group",
        "z": "3fc007a97f3fcca5",
        "name": "IGSS OPC UA Tests",
        "style": {
            "label": true
        },
        "nodes": [
            "c5eee587.009a88",
            "470a5816.70d2f8",
            "486b9c7f.892244",
            "f0864f8a.10649",
            "6618ad86.b92174",
            "b54547b8.f84df8",
            "13359d18.d43f23",
            "7baea106.60165",
            "f90e6b13.52bad8",
            "fd381405.f82898",
            "807f2a5b.9740c8",
            "777f4a48.793394",
            "a4fe7e50.10f4b",
            "51b76b2e.a38d14",
            "633b6abc.947534",
            "38a57fd8.732b3",
            "32ebb557.602eea",
            "ee44e61a.9ef058",
            "f4dc2e15.d4872",
            "17f810e6.2ef63f",
            "2dd2de5a.91ff52",
            "8a361383.b5992",
            "5f721d20.c74eb4"
        ],
        "x": 2004,
        "y": 659,
        "w": 1052,
        "h": 422
    },
    {
        "id": "f8cde87e24e9a89e",
        "type": "group",
        "z": "3fc007a97f3fcca5",
        "name": "OPC UA AAS",
        "style": {
            "label": true
        },
        "nodes": [
            "c15223dc9c7396b9",
            "2db26d8437955a50",
            "0eeab11882791938",
            "963163cddb981524",
            "ab8bb6f55607d091",
            "e761456f07090d1f",
            "f60bdffc19498bec",
            "94ee81d8bcb81645",
            "415de57a32e1dc42",
            "8783561b4d362182",
            "a8eac940989331e7",
            "d165983abb272a8b",
            "208ec3c775e286b4",
            "680b91065d0e3efd",
            "f17642017f6486ca",
            "8c6b208861b087c8",
            "482a974c99d4bf0d",
            "6b897c609b1cdb50",
            "4cf57608b6e5cce5",
            "4abdbd26520559fa",
            "95e6116b06be6fea",
            "51f3b11902fd7e6c",
            "14761e64248e9aaa",
            "704b8f64090d0146",
            "8f667e6c28468e1e",
            "ed3ac167c8f26f6b",
            "2627495adef67cc0",
            "c7542b90f412141e",
            "42ee143dbb157c83",
            "b0ee9faa44ca995b",
            "8f73321eaaf18fb5",
            "25ee714a01f0ac66",
            "e3e74a5a8ff27dcd",
            "1aecb5504ca62dbc"
        ],
        "x": 3154,
        "y": 919,
        "w": 1392,
        "h": 582
    },
    {
        "id": "10a4928a39108988",
        "type": "group",
        "z": "13170589.bf6fd2",
        "name": "🔵 8 Analyze",
        "style": {
            "label": true,
            "stroke": "#92d04f",
            "fill": "#e3f3d3",
            "color": "#92d04f"
        },
        "nodes": [
            "21d143549c9300b2",
            "6d311eefaabc1477",
            "f886b3d702b7fd02",
            "6d8524ceaaaca1e5",
            "bb55775566b42bd3",
            "990281877b706b0b"
        ],
        "x": 3202,
        "y": 139,
        "w": 1056,
        "h": 1948
    },
    {
        "id": "8e30bfbd13c6747d",
        "type": "group",
        "z": "13170589.bf6fd2",
        "name": "🟢 9 Compose",
        "style": {
            "label": true,
            "fill": "#e3f3d3",
            "stroke": "#92d04f",
            "color": "#92d04f"
        },
        "nodes": [
            "53094b7afbb6be12",
            "8ebf985bfdd08116",
            "2e9f93364ef00f8c",
            "1d0dd5306b34b3f1"
        ],
        "x": 4308,
        "y": 139,
        "w": 1204,
        "h": 728
    },
    {
        "id": "5438809457a42244",
        "type": "group",
        "z": "13170589.bf6fd2",
        "name": "🔴 10 Manage",
        "style": {
            "label": true,
            "fill": "#e3f3d3",
            "stroke": "#92d04f",
            "color": "#92d04f"
        },
        "nodes": [
            "9de5c19daff6b4db",
            "b737cc241e46fcfc",
            "a17ee32f364871c0",
            "63f2a9cb575789f8"
        ],
        "x": 5582,
        "y": 139,
        "w": 1156,
        "h": 1174
    },
    {
        "id": "c188b764dd205f99",
        "type": "group",
        "z": "3fc007a97f3fcca5",
        "name": "Line pressure control",
        "style": {
            "label": true
        },
        "nodes": [
            "5ed5ddf8a3920add",
            "e12dad24f2e30dd7",
            "4480fb045a7f8d92",
            "f73bca4c7b3fa24a",
            "42c4050def517ecb",
            "ded0df8381430a9c"
        ],
        "x": 2208,
        "y": 1607,
        "w": 1764,
        "h": 800
    },
    {
        "id": "9fe79b56637c4fe9",
        "type": "group",
        "z": "13170589.bf6fd2",
        "name": "Registration of application data (Registry)",
        "style": {
            "label": true,
            "fill": "#e3f3d3",
            "color": "#92d04f",
            "stroke": "#92d04f"
        },
        "nodes": [
            "a43e323f0ea6dc8a",
            "ea910940a17a8fd1",
            "ca22090c271b051d",
            "7d360d7b62b37adf",
            "3e1e8ce1afd713f1",
            "f995a42aca9603fe",
            "0da67af09a78ddfe",
            "32d8feca72322ce6",
            "17541dd7b10088a8",
            "241d1b568606efa0",
            "09d5eee6cc184270",
            "5a589f426886db55",
            "90be5b87aeb958da",
            "1aa2cc1884919f34",
            "c79192e9739460f9",
            "8da7086213b18514",
            "f2c1886b251e1263",
            "14129b0c09b5a346"
        ],
        "x": 774,
        "y": 139,
        "w": 632,
        "h": 362
    },
    {
        "id": "097f3bfdd982dd15",
        "type": "group",
        "z": "3186fe8a8438c19e",
        "name": "R01 Tank pressure test opcua",
        "style": {
            "label": true
        },
        "nodes": [
            "f26f375586c46d29",
            "74ab13a5dfa0e043",
            "85bd4de45377406c",
            "5ed3a0713dfffc8a",
            "c82377d569bfc0e6",
            "20ea7f9d62b59c56",
            "42194546ce20401d",
            "9307bc4b6a9e086b",
            "09d1acf6f48a5eab",
            "8b97d6c8dbe27925",
            "eed744cdf6fff310"
        ],
        "x": 288,
        "y": 153,
        "w": 2098,
        "h": 1814
    },
    {
        "id": "641b999905bd3f11",
        "type": "group",
        "z": "3fc007a97f3fcca5",
        "name": "Setpoint generation",
        "style": {
            "label": true,
            "color": "#0070c0",
            "stroke": "#0070c0",
            "fill": "#7fb7df",
            "fill-opacity": "0.32"
        },
        "nodes": [
            "e7866a468bee9cd9",
            "abac716e2eec0ea3",
            "888c0480901a108a",
            "03c89edb1248a1db",
            "39c34e01d4b6b32e",
            "9e190a4bd14a6f8c",
            "041d3a3623195d0a"
        ],
        "x": 3274,
        "y": 99,
        "w": 992,
        "h": 242
    },
    {
        "id": "f7416b84df4d8841",
        "type": "group",
        "z": "3fc007a97f3fcca5",
        "name": "Input Pid params",
        "style": {
            "stroke": "#ffff00",
            "label": true,
            "color": "#000000",
            "fill": "#ffffbf"
        },
        "nodes": [
            "06ceee9237853c7e",
            "3119413db649f296",
            "5e7eee9c0a5f2ee2"
        ],
        "x": 4114,
        "y": 419,
        "w": 152,
        "h": 242
    },
    {
        "id": "43dfc30da9bd76e6",
        "type": "group",
        "z": "13170589.bf6fd2",
        "name": "Portainer",
        "style": {
            "label": true,
            "stroke": "#92d04f",
            "fill": "#e3f3d3",
            "color": "#92d04f"
        },
        "nodes": [
            "be293e654825f56a",
            "29795accd9989929"
        ],
        "x": 54,
        "y": 139,
        "w": 332,
        "h": 82
    },
    {
        "id": "6f2273ab3ae9c659",
        "type": "group",
        "z": "13170589.bf6fd2",
        "name": "AASX Server",
        "style": {
            "label": true,
            "stroke": "#92d04f",
            "fill": "#e3f3d3",
            "color": "#92d04f"
        },
        "nodes": [
            "0153d6773624f820",
            "3f0d27c43cc9e930"
        ],
        "x": 414,
        "y": 139,
        "w": 332,
        "h": 82
    },
    {
        "id": "03d487ff23807778",
        "type": "group",
        "z": "3fc007a97f3fcca5",
        "name": "Template size. 19x35 (quadrados 20px) 80% zoom print full screen. Font 8pt result inkscape 16cmx9cm",
        "style": {
            "label": true
        },
        "nodes": [
            "0f71b559c4bbe167",
            "02dc4e54f6993c76",
            "e87312a503fcdbb0",
            "2329ea38719165a2",
            "79acf0b0975f5aa5",
            "96d767c0497113b3",
            "62d5a95316920c1c",
            "8b1f5c01f463f42e",
            "75a4444f45026543",
            "bf0bd81e5e91d215",
            "474ce7092e2a0dfa",
            "54b25f0ba97eb452"
        ],
        "x": 674,
        "y": 2959,
        "w": 712,
        "h": 382
    },
    {
        "id": "59c3f6879f482090",
        "type": "group",
        "z": "3fc007a97f3fcca5",
        "name": "Template size. 19x45 (quadrados 20px) 80% zoom print full screen. Font 8pt result inkscape 16cmx20cm",
        "style": {
            "label": true
        },
        "nodes": [
            "6f7a414b750ee12d",
            "e868ced2c90d5fab",
            "f10b3479d306fd44",
            "375d3070fdc2edd1",
            "79108cf15e156ff2",
            "682d1f5939b6860d",
            "575d81aa570bee6f"
        ],
        "x": 674,
        "y": 3379,
        "w": 712,
        "h": 902
    },
    {
        "id": "c4582519c05ee1ee",
        "type": "group",
        "z": "13170589.bf6fd2",
        "name": "Routes",
        "style": {
            "label": true,
            "stroke": "#92d04f",
            "fill": "#e3f3d3",
            "color": "#92d04f"
        },
        "nodes": [
            "5c41090ed73a45f8",
            "8ef7144b89148441"
        ],
        "x": 54,
        "y": 259,
        "w": 332,
        "h": 82
    },
    {
        "id": "c82377d569bfc0e6",
        "type": "group",
        "z": "3186fe8a8438c19e",
        "g": "097f3bfdd982dd15",
        "name": "Setpoint generation",
        "style": {
            "label": true,
            "color": "#0070c0",
            "stroke": "#0070c0",
            "fill": "#7fb7df",
            "fill-opacity": "0.32"
        },
        "nodes": [
            "1e2b4ae0d8426bb5",
            "1bcc5e660497a843",
            "13ccc657cadc4389",
            "1f6db106c4b87039",
            "95087b386eb41403",
            "b73d6381be838f3b",
            "d0e032f351143311",
            "144e27bb5b329efe",
            "fa144c2b379de645"
        ],
        "x": 354,
        "y": 399,
        "w": 1312,
        "h": 242
    },
    {
        "id": "20ea7f9d62b59c56",
        "type": "group",
        "z": "3186fe8a8438c19e",
        "g": "097f3bfdd982dd15",
        "name": "loop control TQ01",
        "style": {
            "stroke": "#ff0000",
            "fill": "#ffbfbf",
            "label": true,
            "color": "#ff0000"
        },
        "nodes": [
            "96324f6dc3cb5d91",
            "733ef7492979a67e",
            "422c241a231dac9b",
            "3318a204d4e5be79",
            "2a3a8a847d63dafe",
            "41a67ea982fa9d44",
            "b84c1b35efec8802",
            "08600164236156fc",
            "e40331861ff0ed42",
            "d6b216d5f8234093",
            "a3988e125d704e63",
            "8908e21813fa4b7c",
            "49b252de8afea4b1",
            "eba390ebef7c8eab",
            "2aae9482af04eca3",
            "8204b71c514190b4",
            "4031435cd43ed9d9",
            "a06a912bc2441a0f",
            "7b545a69e2b6427b",
            "8a821c77a01b68f6",
            "7d9c7181e456205c",
            "c8260d5b46d871b5",
            "a04618cddd8846f7",
            "98f42ddfa0d30ca2",
            "2b12218d72e4befd",
            "95caecea4774b867",
            "30266b36e8b3a225"
        ],
        "x": 334,
        "y": 679,
        "w": 1332,
        "h": 322
    },
    {
        "id": "42194546ce20401d",
        "type": "group",
        "z": "3186fe8a8438c19e",
        "g": "097f3bfdd982dd15",
        "name": "Reading PID4 params",
        "style": {
            "stroke": "#001f60",
            "fill": "#bfc7d7",
            "label": true,
            "color": "#001f60"
        },
        "nodes": [
            "e1392b2d49e5c648",
            "96446b636567bda1",
            "2ac7c6c5b77322ce",
            "9617969c835c7a2d",
            "4adb4b3c22ec980f",
            "4923490849b3e9b1",
            "be090862dd2e6eba",
            "fdacd01fbf159102",
            "481a89ce9c9e7f18",
            "1262ed0cbb07c26f",
            "0c65255027a95eca"
        ],
        "x": 354,
        "y": 1239,
        "w": 1312,
        "h": 322
    },
    {
        "id": "9307bc4b6a9e086b",
        "type": "group",
        "z": "3186fe8a8438c19e",
        "g": "097f3bfdd982dd15",
        "name": "Input Pid params",
        "style": {
            "stroke": "#ffff00",
            "label": true,
            "color": "#000000",
            "fill": "#ffffbf"
        },
        "nodes": [
            "d2dad8bdb1f9588a",
            "c2c772182d161172",
            "7c04a5f494860b6d",
            "6242602c82eb43fd",
            "9d9e8a6c7947961a",
            "bbdf86baa115940b",
            "c9db8691e018507f",
            "5522f67198f538f7",
            "3967de6a0b3ac9c9",
            "9d9d754eb55e2883"
        ],
        "x": 354,
        "y": 1599,
        "w": 1312,
        "h": 342
    },
    {
        "id": "09d1acf6f48a5eab",
        "type": "group",
        "z": "3186fe8a8438c19e",
        "g": "097f3bfdd982dd15",
        "name": "Enable",
        "style": {
            "stroke": "#6f2fa0",
            "label": true,
            "color": "#6f2fa0",
            "fill": "#dbcbe7"
        },
        "nodes": [
            "c2e575ee3a561480",
            "322a23f36baaf504",
            "c05cb219b409d73c",
            "757785e74aec083b",
            "c89eb081a9f1cc69",
            "6a723b6fa7561cfe",
            "db8d090def42652f",
            "1741fe6dd7c0b8b0",
            "35362db110e5bcce",
            "6aaf346c7fd9a251",
            "7a7f871a0d629403"
        ],
        "x": 314,
        "y": 179,
        "w": 1312,
        "h": 182
    },
    {
        "id": "6b11f1b1853e2e50",
        "type": "group",
        "z": "3fc007a97f3fcca5",
        "g": "de723d7ccb525411",
        "name": "Actions",
        "style": {
            "fill": "#d1d1d1",
            "label": true
        },
        "nodes": [
            "47540566cb5c3c11",
            "7f12e643ee9d1a7f",
            "8a2a8be6994dadef",
            "99f47b8a43ef7bb3",
            "484cdfe1b4c20b15",
            "6665d0fb4870e7bf",
            "fab5901c699f22fc",
            "04ad6fa779221d04",
            "ed3253ebdeeaa87b",
            "c67d9c6f9a6c507f",
            "5f04824559ad1f86"
        ],
        "x": 314,
        "y": 79,
        "w": 712,
        "h": 282
    },
    {
        "id": "4faf1c149c06ecec",
        "type": "group",
        "z": "3fc007a97f3fcca5",
        "g": "de723d7ccb525411",
        "name": "Events",
        "style": {
            "fill": "#d1d1d1",
            "label": true
        },
        "nodes": [
            "d4c502ae254526bd",
            "e25ea02a601577a9",
            "9c34c19b0486caf0",
            "d70c45e646e78d5d"
        ],
        "x": 314,
        "y": 379,
        "w": 712,
        "h": 122
    },
    {
        "id": "be0bca10a2032aab",
        "type": "group",
        "z": "3fc007a97f3fcca5",
        "g": "de723d7ccb525411",
        "name": "Calling Action (Services inside Node-RED)",
        "style": {
            "fill": "#d1d1d1",
            "label": true
        },
        "nodes": [
            "851fc21af8ec6155",
            "c2db5d2bd7d0babc",
            "30bc2d47b63b9bb8",
            "04990d379a0718d2",
            "3234db09f574863a",
            "0e20bd94f879cf82",
            "fcdef2416bd9839a",
            "beaa76e71c7c78fe",
            "167db923cc2c8f0c",
            "5734ee36fa12ff2b"
        ],
        "x": 314,
        "y": 519,
        "w": 712,
        "h": 202
    },
    {
        "id": "86b433e968f1e72f",
        "type": "group",
        "z": "3fc007a97f3fcca5",
        "g": "2a516f0293649552",
        "name": "fit116_daq",
        "style": {
            "fill": "#d1d1d1",
            "label": true,
            "color": "#000000"
        },
        "nodes": [
            "a3ab5cebb324e655",
            "1a3fe053bc2fe382",
            "e262cbc7852730e8",
            "f7fd3ef0ba124f09",
            "bbfd9fda02784d23",
            "b80282ed7af97883",
            "15edd7bb75949605",
            "bcbfa1f541a4dc2d"
        ],
        "x": 1134,
        "y": 259,
        "w": 812,
        "h": 122
    },
    {
        "id": "c5188b705be51128",
        "type": "group",
        "z": "3fc007a97f3fcca5",
        "g": "2a516f0293649552",
        "name": "pit118_daq",
        "style": {
            "fill": "#d1d1d1",
            "label": true,
            "color": "#000000"
        },
        "nodes": [
            "7bcd84a2f207bd76",
            "7a4d63f5ea371ea2",
            "4d741ce692889a96",
            "85bdb033e765f167",
            "bb514569f9f9411b",
            "65cfec9f3eef380f",
            "c69679dc43232103",
            "6cc5beb8670a26b0"
        ],
        "x": 1134,
        "y": 539,
        "w": 812,
        "h": 122
    },
    {
        "id": "123adc3b4fd1f435",
        "type": "group",
        "z": "3fc007a97f3fcca5",
        "g": "2a516f0293649552",
        "name": "pit129_daq",
        "style": {
            "fill": "#d1d1d1",
            "label": true,
            "color": "#000000"
        },
        "nodes": [
            "a52f2dce3e55d46a",
            "7acb6ce4e368fcb9",
            "9c4b8e8022f6359e",
            "ebdf8558b43954e6",
            "09a0e8be12ba43ef",
            "67f16077b427e378",
            "97c8e6236d117388",
            "6226cc4a8994eddb"
        ],
        "x": 1134,
        "y": 679,
        "w": 812,
        "h": 122
    },
    {
        "id": "a1a0dd3fa15bb567",
        "type": "group",
        "z": "3fc007a97f3fcca5",
        "g": "2a516f0293649552",
        "name": "lit125_daq",
        "style": {
            "fill": "#d1d1d1",
            "label": true,
            "color": "#000000"
        },
        "nodes": [
            "6d0069400c6233c5",
            "98b053f7732b95b7",
            "7ffff11fdc84c547",
            "a540bf68ca3c9f74",
            "00b22c6d6516a1af",
            "d50137e3560249bc",
            "d404084ff019414f",
            "8c98b68e14c07813"
        ],
        "x": 1134,
        "y": 399,
        "w": 812,
        "h": 122
    },
    {
        "id": "a246b85c05ca84e8",
        "type": "group",
        "z": "3fc007a97f3fcca5",
        "g": "2a516f0293649552",
        "name": "",
        "style": {
            "fill": "#d1d1d1",
            "label": true
        },
        "nodes": [
            "e6ddca00b67b6a8c",
            "a4871c336b52cd1b"
        ],
        "x": 1134,
        "y": 159,
        "w": 812,
        "h": 82
    },
    {
        "id": "b355f8f0cdc6368e",
        "type": "group",
        "z": "3fc007a97f3fcca5",
        "g": "5f28ab2e8045f710",
        "name": "pic118_pid4",
        "style": {
            "fill": "#d1d1d1",
            "label": true,
            "color": "#000000"
        },
        "nodes": [
            "45d628aaf8e37523",
            "8d737a82ea9f855a",
            "9a217f97216cc0d8",
            "c4e2d8ca292c8345",
            "d0694abdc8b665cd",
            "7b9a8ff45f6e6717",
            "edd41cc39dd5bd80",
            "8b705dd33a868f5a",
            "f1e69d5e3913b2c6",
            "2d8811a128a5e961",
            "f5e21fe5f5c0a6b5",
            "aa8afa287a7f9282",
            "26e66892d1e9d6b9"
        ],
        "x": 1144,
        "y": 1499,
        "w": 802,
        "h": 202
    },
    {
        "id": "e627e9b93a667142",
        "type": "group",
        "z": "3fc007a97f3fcca5",
        "g": "5f28ab2e8045f710",
        "name": "pic129_pid4",
        "style": {
            "fill": "#d1d1d1",
            "label": true,
            "color": "#000000"
        },
        "nodes": [
            "999ae822f753f2dc",
            "7e39ed17a289c713",
            "9ffe2ae34de97f42",
            "bd24c98d18261f60",
            "e456020e2c467112",
            "318f3b8d2a785b06",
            "61876e95e7207fb5",
            "a9485ba2e0d40364",
            "d7161f014d99babd",
            "7559ca650bc4bbf0",
            "49ba2e8fbbba90e0",
            "0795d6dd46cc9edb",
            "56d84aee8531e620"
        ],
        "x": 1144,
        "y": 1719,
        "w": 802,
        "h": 202
    },
    {
        "id": "7ced3cc227448344",
        "type": "group",
        "z": "3fc007a97f3fcca5",
        "g": "5f28ab2e8045f710",
        "name": "lic125_pid4",
        "style": {
            "fill": "#d1d1d1",
            "label": true,
            "color": "#000000"
        },
        "nodes": [
            "36cf0199d85f8dfe",
            "b65d9d6acbcb4808",
            "40f354b28fe90aca",
            "765950b493331159",
            "4cc0b9203fcc87fd",
            "a7c779508cc1ca2a",
            "d926efdcf342b0c7",
            "a8cccf8e5ead5dc8",
            "a35e5f49b202c3e2",
            "bb2c83232b8f14da",
            "0f42495d00134d6c",
            "a9e56338f5f52957",
            "09a49ed1b83e9afd"
        ],
        "x": 1144,
        "y": 1279,
        "w": 802,
        "h": 202
    },
    {
        "id": "01e8d789c86f0e85",
        "type": "group",
        "z": "3fc007a97f3fcca5",
        "g": "5f28ab2e8045f710",
        "name": "fic116_pid4",
        "style": {
            "fill": "#d1d1d1",
            "label": true,
            "color": "#000000"
        },
        "nodes": [
            "3a8faa3646db71a0",
            "3efb4e9af642e438",
            "af07c0c409b22a48",
            "eb3772419ee7581d",
            "f4606b31ee737304",
            "f68a3257444e477e",
            "79d478e4049d6ea0",
            "043b3ea8d6499e7c",
            "736e87da93e6d529",
            "0e64508046a4b84c",
            "0e65f1727461eca3",
            "d69163abdb5bfd15",
            "4eef495e27ef6364"
        ],
        "x": 1144,
        "y": 1059,
        "w": 802,
        "h": 202
    },
    {
        "id": "e9f305c45419e4aa",
        "type": "group",
        "z": "3fc007a97f3fcca5",
        "g": "5f28ab2e8045f710",
        "name": "",
        "style": {
            "fill": "#d1d1d1",
            "label": true
        },
        "nodes": [
            "9eb47faf11225e6f",
            "da3a1b01843c2a45",
            "e60c2ff9ebb13357",
            "ed8edd484b31cf79",
            "ceac3ca0c30c7a28",
            "5abaf0460158fb41",
            "1af2705a8efdc663",
            "3e4499d3f96e6c0a"
        ],
        "x": 1154,
        "y": 879,
        "w": 792,
        "h": 162
    },
    {
        "id": "201e1c1595fbf5df",
        "type": "group",
        "z": "3fc007a97f3fcca5",
        "g": "feb679f94e8f4bad",
        "name": "p2_daq",
        "style": {
            "fill": "#d1d1d1",
            "label": true,
            "color": "#000000"
        },
        "nodes": [
            "32a021e7d248f409",
            "1e276f522f2d0b73",
            "93fb0e00bce1217e",
            "272f4f2463a218cf",
            "e52f55999be4eaf1",
            "1e7e9c58e5b5b99b",
            "d5992a6562ed78dc",
            "a75ad76936649a0b",
            "4444dcd93c141c79",
            "e2f37d4809fafdf0",
            "7bae1b4be882b965",
            "3b9adde6c6d8f536"
        ],
        "x": 1154,
        "y": 2539,
        "w": 792,
        "h": 162
    },
    {
        "id": "676a1694ceb3ecfc",
        "type": "group",
        "z": "3fc007a97f3fcca5",
        "g": "feb679f94e8f4bad",
        "name": "p1_daq",
        "style": {
            "fill": "#d1d1d1",
            "label": true,
            "color": "#000000"
        },
        "nodes": [
            "50e11ba2db8986a0",
            "df6c6ed78f215052",
            "783e4e4437c57c5a",
            "7518c8ddb6b35be3",
            "f8dec8c1931819d6",
            "6be8f2695d1aea8e",
            "97c97b6abfbc6d6d",
            "1e700bf269933de6",
            "090542ad6c1e1e40",
            "85331b9146cb28fd",
            "6cea46db468a3459",
            "7062190cbb433128"
        ],
        "x": 1154,
        "y": 2359,
        "w": 792,
        "h": 162
    },
    {
        "id": "ec4ee5ab3682f7b0",
        "type": "group",
        "z": "3fc007a97f3fcca5",
        "g": "feb679f94e8f4bad",
        "name": "lv122_daq",
        "style": {
            "fill": "#d1d1d1",
            "label": true,
            "color": "#000000"
        },
        "nodes": [
            "213c47e0168c51ab",
            "46cee5b9921e506c",
            "e467f6a824d90178",
            "490c64b724de2a02",
            "5875606f3ff33119",
            "a1058cf037b1d84c",
            "9f20969052c68b47",
            "e971c5ef48384a0a",
            "bbc36c753c8107c5",
            "ad79275b74ba6dd2",
            "9fa81050df739df1",
            "574e6acbe22728e6"
        ],
        "x": 1154,
        "y": 2179,
        "w": 792,
        "h": 163
    },
    {
        "id": "846b42adf77c2e58",
        "type": "group",
        "z": "3fc007a97f3fcca5",
        "g": "feb679f94e8f4bad",
        "name": "",
        "style": {
            "fill": "#d1d1d1",
            "label": true
        },
        "nodes": [
            "f13cccee1d2b8d99",
            "87f8ad70f05eb4dc",
            "63fc3e34398fb7f5",
            "6b11b2d32fa1e0f5",
            "613f19ad104062dc",
            "fa5d76120f1921bb"
        ],
        "x": 1154,
        "y": 1999,
        "w": 792,
        "h": 162
    },
    {
        "id": "9de5c19daff6b4db",
        "type": "group",
        "z": "13170589.bf6fd2",
        "g": "5438809457a42244",
        "name": "Reading PID4 params",
        "style": {
            "stroke": "#92d04f",
            "fill": "#e3f3d3",
            "label": true,
            "color": "#92d04f"
        },
        "nodes": [
            "bda792243fc2043e",
            "6fbe26b937051670",
            "1a16a5b3e93b5de3",
            "4fd7663e631829dd",
            "859693f0609fc886",
            "b84b24dd73976a24",
            "ece6b096c976cf96",
            "190d96e2ff37b1bd",
            "1dbd744cd5a77763"
        ],
        "x": 5654,
        "y": 439,
        "w": 852,
        "h": 202
    },
    {
        "id": "e12dad24f2e30dd7",
        "type": "group",
        "z": "3fc007a97f3fcca5",
        "g": "c188b764dd205f99",
        "name": "Enable",
        "style": {
            "stroke": "#6f2fa0",
            "label": true,
            "color": "#6f2fa0",
            "fill": "#dbcbe7"
        },
        "nodes": [
            "e84c9b1630519ebb",
            "26637ac156a4f327",
            "e27cbfd3b3c0698e",
            "efefe14ecf28779d",
            "2c42739bbd909737",
            "8c0ae7a7c66042b1",
            "7c298a3ca28f4a0e",
            "13c790cf4c272916",
            "4abcbc41b2ea018b",
            "6674b447332b4bc5",
            "81f3fdeef54d3b26"
        ],
        "x": 2234,
        "y": 1633,
        "w": 712,
        "h": 208
    },
    {
        "id": "4480fb045a7f8d92",
        "type": "group",
        "z": "3fc007a97f3fcca5",
        "g": "c188b764dd205f99",
        "name": "Control Loops",
        "style": {
            "stroke": "#ff0000",
            "fill": "#ff7f7f",
            "fill-opacity": "0.36",
            "label": true,
            "color": "#ff0000"
        },
        "nodes": [
            "0ecb355e2ba80579",
            "50d54d254aa0b5c3",
            "8a3f461ddf5ee468",
            "2a57b6c569510a01"
        ],
        "x": 2234,
        "y": 1859,
        "w": 712,
        "h": 142
    },
    {
        "id": "f73bca4c7b3fa24a",
        "type": "group",
        "z": "3fc007a97f3fcca5",
        "g": "c188b764dd205f99",
        "name": "Reading PID4 params",
        "style": {
            "stroke": "#001f60",
            "fill": "#bfc7d7",
            "label": true,
            "color": "#001f60"
        },
        "nodes": [
            "42b8d27ec63bada8",
            "a45b2a2a102a24d9",
            "d15ef6302fb52c0d",
            "f532c38f90447c20",
            "a37bde095c692967",
            "1c60aaf00905a1e1",
            "1afe93092dc51211",
            "f1842a02f07c4d5a",
            "1e2cff52dbaaa463",
            "c5d7b4c6b586a7bb",
            "476c193aa2e5e17f",
            "334e612c8ba020f5",
            "df40d05c0b650acd",
            "d3f793525ba89886",
            "157fd467e3db1248"
        ],
        "x": 2234,
        "y": 2019,
        "w": 952,
        "h": 362
    },
    {
        "id": "42c4050def517ecb",
        "type": "group",
        "z": "3fc007a97f3fcca5",
        "g": "c188b764dd205f99",
        "name": "Setpoint generation",
        "style": {
            "label": true,
            "color": "#0070c0",
            "stroke": "#0070c0",
            "fill": "#7fb7df",
            "fill-opacity": "0.32"
        },
        "nodes": [
            "e62ca43880eabaa0",
            "b4529c39009f4eb5",
            "526f554d6149b968",
            "e0d55baa09ca0693",
            "c2a96bb464145167",
            "85ba078991fbf6f3",
            "6ccbd5672da27bd3",
            "3faba50ff9e35a5c",
            "2bd03a3ff56b5fa9"
        ],
        "x": 2954,
        "y": 1699,
        "w": 992,
        "h": 302
    },
    {
        "id": "ded0df8381430a9c",
        "type": "group",
        "z": "3fc007a97f3fcca5",
        "g": "c188b764dd205f99",
        "name": "Input Pid params",
        "style": {
            "stroke": "#ffff00",
            "label": true,
            "color": "#000000",
            "fill": "#ffffbf"
        },
        "nodes": [
            "39bb74f5a3aee95d",
            "f6402395b4bac4ec",
            "dc302697ae327bef",
            "9732a4893a357d43",
            "68a76c40bff8c2a7",
            "ae6699b0a058bb3e",
            "42af03e22a571061",
            "27de17b79b18d520",
            "316fa82cfc1b3509",
            "010b398f6eff0b4d"
        ],
        "x": 3194,
        "y": 2119,
        "w": 492,
        "h": 242
    },
    {
        "id": "a17ee32f364871c0",
        "type": "group",
        "z": "13170589.bf6fd2",
        "g": "5438809457a42244",
        "name": "Export Dada",
        "style": {
            "label": true,
            "stroke": "#92d04f",
            "color": "#92d04f",
            "fill": "#e3f3d3"
        },
        "nodes": [
            "881cf02ebcef961a",
            "e5bbc6a661c17ac9",
            "1c0d55350b380884"
        ],
        "x": 5608,
        "y": 653,
        "w": 1104,
        "h": 634
    },
    {
        "id": "63f2a9cb575789f8",
        "type": "group",
        "z": "13170589.bf6fd2",
        "g": "5438809457a42244",
        "name": "Flow status",
        "style": {
            "stroke": "#92d04f",
            "label": true,
            "color": "#92d04f",
            "fill": "#e3f3d3"
        },
        "nodes": [
            "e4ce3d3f478adbfc",
            "260f9faa6028f7fb",
            "c13cf6ad06a4b0f2",
            "fa992894d136ff1d",
            "39ed40412daedcda",
            "68f063302692ecb2",
            "32628e63c595fc1d",
            "d12db9e945c761d6",
            "efb647f0b099275b",
            "cd370a5b5ea229e2"
        ],
        "x": 5654,
        "y": 219,
        "w": 652,
        "h": 202
    },
    {
        "id": "8ebf985bfdd08116",
        "type": "group",
        "z": "13170589.bf6fd2",
        "g": "8e30bfbd13c6747d",
        "name": "Loop control",
        "style": {
            "label": true,
            "stroke": "#92d04f",
            "fill": "#e3f3d3",
            "color": "#92d04f"
        },
        "nodes": [
            "142618608284cbf6",
            "68a9a63f75d140a8",
            "197a9e0655224a3d",
            "c6e2fc0e1cc44ec9",
            "cd97ec714a90a853",
            "ec4ce54f72947fd8",
            "bba541518ea0022c",
            "3a3b866220fa915d",
            "4d2f5ed1f3da9d6f",
            "d1153840c27505f8",
            "b59cdbcba8dee990",
            "e4e22826b0d5a36c",
            "f6ad54ba6dfa2c4b",
            "fbc5e17923fd20d7",
            "d1be0363a648178c"
        ],
        "x": 4334,
        "y": 619,
        "w": 1152,
        "h": 222
    },
    {
        "id": "6d311eefaabc1477",
        "type": "group",
        "z": "13170589.bf6fd2",
        "g": "10a4928a39108988",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "a14bd96d2e3ca77d",
            "74a16fe658f80bd5",
            "4a303ecd592807a3",
            "1188989aeccf0d20",
            "8ebdca6daa974bde",
            "08b21281262cc826",
            "85e5c18a582916f1",
            "67e1c9b4fc583ced",
            "4ca1766c4fb7952a"
        ],
        "x": 3244,
        "y": 219,
        "w": 582,
        "h": 242
    },
    {
        "id": "f886b3d702b7fd02",
        "type": "group",
        "z": "13170589.bf6fd2",
        "g": "10a4928a39108988",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "b27dac02aeae8a1f",
            "6f63c6eab8ea0150",
            "d748bf3bb9dd10b5",
            "7b397e80da6902fe",
            "480e8131b93ac93d",
            "a89512bf099d270f",
            "261906bc063a0493",
            "ee6b122147975bb7",
            "3382e35985931e44",
            "3e528c19e3a6212f",
            "f2579f3c76716d12",
            "98b670b82f40108f",
            "5097fe75849e09d6",
            "9c4c972ad50cc52c",
            "b74e25cf75692c1d"
        ],
        "x": 3254,
        "y": 479,
        "w": 592,
        "h": 382
    },
    {
        "id": "6d8524ceaaaca1e5",
        "type": "group",
        "z": "13170589.bf6fd2",
        "g": "10a4928a39108988",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "354ae0c45ed9bbc1",
            "630ec0b163d69b33",
            "24ef48d53088e4e6",
            "a5251b0d66c17a11",
            "bb263c221e0b07a1",
            "9e530b0a1fd8ef97",
            "7a9d8e9733acc5b1",
            "7762fee7c2f8c565",
            "683e08bf20eeb8e8"
        ],
        "x": 3254,
        "y": 1519,
        "w": 592,
        "h": 242
    },
    {
        "id": "bb55775566b42bd3",
        "type": "group",
        "z": "13170589.bf6fd2",
        "g": "10a4928a39108988",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "d64cc8c2ec354d58",
            "4118a977de196312",
            "79b5123eb596c231",
            "c2adb4745895712b",
            "694894269f0f9b45",
            "6f29f36c87f70618",
            "1ef7e2c062efdc65",
            "f4a716ad4d7458ad",
            "a90ecafa6951c028"
        ],
        "x": 3254,
        "y": 1799,
        "w": 572,
        "h": 262
    },
    {
        "id": "990281877b706b0b",
        "type": "group",
        "z": "13170589.bf6fd2",
        "g": "10a4928a39108988",
        "name": "Function generator",
        "style": {
            "label": true,
            "color": "#92d04f",
            "stroke": "#92d04f",
            "fill": "#e3f3d3",
            "fill-opacity": "0.32"
        },
        "nodes": [
            "5ed9b33ae8b164d1",
            "cc7d4f3d94349fc4"
        ],
        "x": 3228,
        "y": 913,
        "w": 1004,
        "h": 554
    },
    {
        "id": "2e9f93364ef00f8c",
        "type": "group",
        "z": "13170589.bf6fd2",
        "g": "8e30bfbd13c6747d",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "3b037be1ad258ca7",
            "7cc943e5f69b5aa2",
            "eb1b40e8d69d8951",
            "4cb975919734d2c2",
            "06672febd3cab359",
            "53863c712e61fe47",
            "3af48236db2042f4",
            "373b01054c442936",
            "650cc2be253d9125",
            "4d78c555ea251c40",
            "126d236157168818",
            "fdfaab2921229013",
            "567a0b50c196564b"
        ],
        "x": 4374,
        "y": 219,
        "w": 492,
        "h": 382
    },
    {
        "id": "7a56353afcae4d8d",
        "type": "group",
        "z": "13170589.bf6fd2",
        "g": "9334aa3adb839a1f",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "5f27993959f21033",
            "0e5de5c522088d6f",
            "9c91f98636748402",
            "c67a71bb5a4e2a72",
            "c6a8d69f2b824280",
            "3c894e41d7879532",
            "49e9750ee45101cd",
            "cd11c5de3c865ee0"
        ],
        "x": 2314,
        "y": 499,
        "w": 632,
        "h": 242
    },
    {
        "id": "67d58169ec97f73b",
        "type": "group",
        "z": "13170589.bf6fd2",
        "g": "9334aa3adb839a1f",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "c98c8a46c1d44eb2",
            "7bd54dc877b885bc",
            "6f2a72842e744d7f",
            "026d8368be66e657",
            "a43f797f2cfeea15",
            "91b4e261f1e41af1",
            "c233e17467666072",
            "e34a5d1e38497f1d",
            "151013cdaadfd467"
        ],
        "x": 2314,
        "y": 219,
        "w": 852,
        "h": 242
    },
    {
        "id": "81f3fdeef54d3b26",
        "type": "group",
        "z": "3fc007a97f3fcca5",
        "g": "e12dad24f2e30dd7",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "a452b82778014e86"
        ],
        "x": 2274,
        "y": 1659,
        "w": 152,
        "h": 82
    },
    {
        "id": "881cf02ebcef961a",
        "type": "group",
        "z": "13170589.bf6fd2",
        "g": "a17ee32f364871c0",
        "name": "SetPoint x PV",
        "style": {
            "label": true,
            "color": "#92d04f",
            "stroke": "#92d04f",
            "fill": "#e3f3d3"
        },
        "nodes": [
            "4bef1fa09334a4bf",
            "328f73b46992a07e",
            "112dd9f83c4ea002",
            "4241ff57486cddd8",
            "a7c01be8231f2c0a",
            "169c957289390c7f",
            "5e38acde4af5c3f8",
            "07ab0eb0b648f817",
            "74d1ead1cab47ab7",
            "621c974fc40532fc"
        ],
        "x": 6134,
        "y": 679,
        "w": 552,
        "h": 282
    },
    {
        "id": "e5bbc6a661c17ac9",
        "type": "group",
        "z": "13170589.bf6fd2",
        "g": "a17ee32f364871c0",
        "name": "Error x MV",
        "style": {
            "label": true,
            "color": "#92d04f",
            "stroke": "#92d04f",
            "fill": "#e3f3d3"
        },
        "nodes": [
            "e75092bd2395f205",
            "ed82cca06bd18c6e",
            "cf050fd721b2d40f",
            "ebc74dc5772444a1",
            "5935568508bb9b72",
            "335e4bf44542083a",
            "756ce7cd2bb19185",
            "34dc3c0c85566eb1",
            "09bfc96d7f077198"
        ],
        "x": 6134,
        "y": 979,
        "w": 532,
        "h": 282
    },
    {
        "id": "5ed9b33ae8b164d1",
        "type": "group",
        "z": "13170589.bf6fd2",
        "g": "990281877b706b0b",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "22227849759470ef",
            "1ab4168162c05c30",
            "f828006e2789cf17",
            "847284872bf02321",
            "7860ea2f4a451a30",
            "848089d0c330e2a7",
            "b645f6eac5d36cc2",
            "13068d0c509d561d",
            "eef072ae51c5546a"
        ],
        "x": 3254,
        "y": 939,
        "w": 952,
        "h": 202
    },
    {
        "id": "cc7d4f3d94349fc4",
        "type": "group",
        "z": "13170589.bf6fd2",
        "g": "990281877b706b0b",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "2a4d588af3072b95",
            "3ea3414ca0b938fd",
            "f399366716e51821",
            "a640201cf15e3dbf",
            "101b53ef0a89eb9d",
            "b06e8883a9c8d890",
            "c13698e9459e34da",
            "30134f7ad1dd7797",
            "4cbe968ea709ff1b",
            "5d71b5ec6d7a31be"
        ],
        "x": 3254,
        "y": 1199,
        "w": 872,
        "h": 242
    },
    {
        "id": "1c0d55350b380884",
        "type": "group",
        "z": "13170589.bf6fd2",
        "g": "a17ee32f364871c0",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "3628fd21648b00dc",
            "3c66d6f1ffd80879",
            "dea34522d5a80aeb",
            "8728007f365baeb1",
            "10846b23e33e3c13",
            "12ccf96f3149f89c"
        ],
        "x": 5634,
        "y": 779,
        "w": 472,
        "h": 282
    },
    {
        "id": "9",
        "type": "ui_group",
        "name": "Gráfico",
        "tab": "",
        "order": 1,
        "disp": true,
        "width": "6",
        "collapse": false
    },
    {
        "id": "15fdc347.1238cd",
        "type": "moleculer-config",
        "name": "NATS",
        "options": "{\"nodeID\":\"clientID\", \"transporter\":\"nats://192.168.1.201:4222\"}"
    },
    {
        "id": "ede1a536b4fdbcff",
        "type": "OpcUa-Endpoint",
        "endpoint": "opc.tcp://192.168.1.114:26118",
        "secpol": "None",
        "secmode": "None",
        "none": true,
        "login": false,
        "usercert": false,
        "usercertificate": "",
        "userprivatekey": ""
    },
    {
        "id": "5a1ac14b.4d0f38",
        "type": "OpcUa-Endpoint",
        "endpoint": "opc.tcp://TREL16087112.vstage.co:53530/OPCUA/SimulationServer",
        "secpol": "None",
        "secmode": "None",
        "login": false
    },
    {
        "id": "83439742.083188",
        "type": "OpcUa-Endpoint",
        "endpoint": "opc.tcp://0.0.0.0:4840/",
        "secpol": "None",
        "secmode": "None",
        "login": false
    },
    {
        "id": "8c2ad77a986bc998",
        "type": "OpcUa-Endpoint",
        "endpoint": "opc.tcp://192.168.1.111:26118/UA/MyLittleServer",
        "secpol": "None",
        "secmode": "None",
        "none": false,
        "login": false,
        "usercert": false,
        "usercertificate": "",
        "userprivatekey": ""
    },
    {
        "id": "69ae20a702e2e3d7",
        "type": "OpcUa-Endpoint",
        "endpoint": "opc.tcp://192.168.1.101:24129/UA/lic129_pid4",
        "secpol": "None",
        "secmode": "None",
        "none": true,
        "login": false,
        "usercert": false,
        "usercertificate": "",
        "userprivatekey": ""
    },
    {
        "id": "a8686de49781f383",
        "type": "OpcUa-Endpoint",
        "endpoint": "opc.tcp://192.168.1.114:26002/UA/MyLittleServer",
        "secpol": "None",
        "secmode": "None",
        "none": true,
        "login": false,
        "usercert": false,
        "usercertificate": "",
        "userprivatekey": ""
    },
    {
        "id": "f0f78b51406b5649",
        "type": "OpcUa-Endpoint",
        "endpoint": "opc.tcp://192.168.1.111:26125/UA/MyLittleServer",
        "secpol": "None",
        "secmode": "None",
        "none": true,
        "login": false,
        "usercert": false,
        "usercertificate": "",
        "userprivatekey": ""
    },
    {
        "id": "b95983c7eb59384c",
        "type": "OpcUa-Endpoint",
        "endpoint": "opc.tcp://192.168.1.111:26116/UA/MyLittleServer",
        "secpol": "None",
        "secmode": "None",
        "none": true,
        "login": false,
        "usercert": false,
        "usercertificate": "",
        "userprivatekey": ""
    },
    {
        "id": "9883401a98aa8537",
        "type": "OpcUa-Endpoint",
        "endpoint": "opc.tcp://192.168.1.111:26129/UA/MyLittleServer",
        "secpol": "None",
        "secmode": "None",
        "none": true,
        "login": false,
        "usercert": false,
        "usercertificate": "",
        "userprivatekey": ""
    },
    {
        "id": "c9722999d7a6ef78",
        "type": "OpcUa-Endpoint",
        "endpoint": "opc.tcp://192.168.1.114:26001/UA/p1_daq",
        "secpol": "None",
        "secmode": "None",
        "none": true,
        "login": false,
        "usercert": false,
        "usercertificate": "",
        "userprivatekey": ""
    },
    {
        "id": "1ec1c3d4b52fa3ed",
        "type": "OpcUa-Endpoint",
        "endpoint": "opc.tcp://192.168.1.114:26122/UA/MyLittleServer",
        "secpol": "None",
        "secmode": "None",
        "none": true,
        "login": false,
        "usercert": false,
        "usercertificate": "",
        "userprivatekey": ""
    },
    {
        "id": "bdc48601.ebf958",
        "type": "OpcUa-Endpoint",
        "endpoint": "opc.tcp://localhost:53881/UA/SimpleNodeRedServer",
        "secpol": "None",
        "secmode": "None",
        "none": true,
        "login": false,
        "usercert": false,
        "usercertificate": "",
        "userprivatekey": ""
    },
    {
        "id": "7290d8b0.f713d8",
        "type": "OpcUa-Endpoint",
        "endpoint": "opc.tcp://localhost:62544/Quickstarts/AlarmConditionServer",
        "login": false
    },
    {
        "id": "3bfe3760a65a6fe2",
        "type": "OpcUa-Endpoint",
        "endpoint": "opc.tcp://192.168.1.101:24116/UA/fic116_pid4",
        "secpol": "None",
        "secmode": "None",
        "none": true,
        "login": false,
        "usercert": false,
        "usercertificate": "",
        "userprivatekey": ""
    },
    {
        "id": "55ef72f70b1594bd",
        "type": "OpcUa-Endpoint",
        "endpoint": "opc.tcp://192.168.1.101:24125/UA/lic125_pid4",
        "secpol": "None",
        "secmode": "None",
        "none": true,
        "login": false,
        "usercert": false,
        "usercertificate": "",
        "userprivatekey": ""
    },
    {
        "id": "a2f2fee6b8c0270f",
        "type": "OpcUa-Endpoint",
        "endpoint": "opc.tcp://192.168.1.101:24118/UA/MyLittleServer",
        "secpol": "None",
        "secmode": "None",
        "none": true,
        "login": false,
        "usercert": false,
        "usercertificate": "",
        "userprivatekey": ""
    },
    {
        "id": "f23add3fd8d371dd",
        "type": "OpcUa-Endpoint",
        "endpoint": "opc.tcp://192.168.1.101:24129/UA/pic129_pid4",
        "secpol": "None",
        "secmode": "None",
        "none": true,
        "login": false,
        "usercert": false,
        "usercertificate": "",
        "userprivatekey": ""
    },
    {
        "id": "0dd7e1bf0b208734",
        "type": "ui_group",
        "name": "Input data",
        "tab": "",
        "order": 1,
        "disp": false,
        "width": 11,
        "collapse": false,
        "className": ""
    },
    {
        "id": "63ebd62b2640f3f7",
        "type": "moleculer-config",
        "name": "NATS_ext",
        "options": "{\"transporter\":\"nats://192.168.1.201:4222\"}"
    },
    {
        "id": "718989759ca7cebb",
        "type": "ui_group",
        "name": "Graphics",
        "tab": "",
        "order": 2,
        "disp": false,
        "width": 20,
        "collapse": false,
        "className": ""
    },
    {
        "id": "7b393050acc74505",
        "type": "ui_base",
        "theme": {
            "name": "theme-light",
            "lightTheme": {
                "default": "#0094CE",
                "baseColor": "#0094CE",
                "baseFont": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif",
                "edited": true,
                "reset": false
            },
            "darkTheme": {
                "default": "#097479",
                "baseColor": "#097479",
                "baseFont": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif",
                "edited": false
            },
            "customTheme": {
                "name": "Untitled Theme 1",
                "default": "#4B7930",
                "baseColor": "#4B7930",
                "baseFont": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif"
            },
            "themeState": {
                "base-color": {
                    "default": "#0094CE",
                    "value": "#0094CE",
                    "edited": false
                },
                "page-titlebar-backgroundColor": {
                    "value": "#0094CE",
                    "edited": false
                },
                "page-backgroundColor": {
                    "value": "#fafafa",
                    "edited": false
                },
                "page-sidebar-backgroundColor": {
                    "value": "#ffffff",
                    "edited": false
                },
                "group-textColor": {
                    "value": "#1bbfff",
                    "edited": false
                },
                "group-borderColor": {
                    "value": "#ffffff",
                    "edited": false
                },
                "group-backgroundColor": {
                    "value": "#ffffff",
                    "edited": false
                },
                "widget-textColor": {
                    "value": "#111111",
                    "edited": false
                },
                "widget-backgroundColor": {
                    "value": "#0094ce",
                    "edited": false
                },
                "widget-borderColor": {
                    "value": "#ffffff",
                    "edited": false
                },
                "base-font": {
                    "value": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif"
                }
            },
            "angularTheme": {
                "primary": "indigo",
                "accents": "blue",
                "warn": "red",
                "background": "grey",
                "palette": "light"
            }
        },
        "site": {
            "name": "Node-RED Dashboard",
            "hideToolbar": "false",
            "allowSwipe": "false",
            "lockMenu": "false",
            "allowTempTheme": "true",
            "dateFormat": "DD/MM/YYYY",
            "sizes": {
                "sx": 48,
                "sy": 48,
                "gx": 6,
                "gy": 6,
                "cx": 6,
                "cy": 6,
                "px": 0,
                "py": 0
            }
        }
    },
    {
        "id": "644b753dce512329",
        "type": "ui_group",
        "name": "Tank level T01",
        "tab": "",
        "order": 4,
        "disp": true,
        "width": 7,
        "collapse": false,
        "className": ""
    },
    {
        "id": "c419237249c0888f",
        "type": "ui_group",
        "name": "Flow rate",
        "tab": "",
        "order": 3,
        "disp": true,
        "width": 7,
        "collapse": false,
        "className": ""
    },
    {
        "id": "1c0d3737d26bed9d",
        "type": "ui_group",
        "name": "Line pressure",
        "tab": "",
        "order": 2,
        "disp": true,
        "width": "7",
        "collapse": false,
        "className": ""
    },
    {
        "id": "ddf4de6a869f7741",
        "type": "ui_group",
        "name": "actions",
        "tab": "",
        "order": 5,
        "disp": true,
        "width": 10,
        "collapse": false,
        "className": ""
    },
    {
        "id": "f36570e8cebef9b3",
        "type": "moleculer-service-config",
        "name": "math",
        "version": "",
        "settings": "{}"
    },
    {
        "id": "07ce3e66312bce5d",
        "type": "ui_group",
        "name": "Node Display",
        "tab": "",
        "order": 1,
        "disp": true,
        "width": "6",
        "collapse": false
    },
    {
        "id": "2bdcba10a3cc643c",
        "type": "ui_group",
        "name": "Node Display",
        "tab": "",
        "order": 1,
        "disp": true,
        "width": 6,
        "collapse": false
    },
    {
        "id": "47987123ef818ed4",
        "type": "ui_tab",
        "name": "6-Communicate",
        "icon": "dashboard",
        "order": 2,
        "disabled": false,
        "hidden": false
    },
    {
        "id": "d2faeddcefff0679",
        "type": "ui_tab",
        "name": "Produce (OPC UA)",
        "icon": "dashboard",
        "order": 23,
        "disabled": false,
        "hidden": false
    },
    {
        "id": "a1b80531659f1a39",
        "type": "ui_group",
        "name": "Sensor_pic129",
        "tab": "d2faeddcefff0679",
        "order": 1,
        "disp": true,
        "width": 9,
        "collapse": false,
        "className": ""
    },
    {
        "id": "babde70eca34e3fd",
        "type": "ui_group",
        "name": "Controlo data",
        "tab": "d2faeddcefff0679",
        "order": 2,
        "disp": true,
        "width": 12,
        "collapse": false,
        "className": ""
    },
    {
        "id": "717dbc9750824202",
        "type": "OpcUa-Endpoint",
        "endpoint": "",
        "secpol": "None",
        "secmode": "None",
        "none": true,
        "login": false,
        "usercert": false,
        "usercertificate": "",
        "userprivatekey": ""
    },
    {
        "id": "53f4394dbf12c6b7",
        "type": "OpcUa-Endpoint",
        "endpoint": "opc.tcp://GASI_LENOVO:53530/OPCUA/SimulationServer",
        "secpol": "None",
        "secmode": "None",
        "none": true,
        "login": false,
        "usercert": false,
        "usercertificate": "",
        "userprivatekey": ""
    },
    {
        "id": "93d9a210d21cf002",
        "type": "OpcUa-Endpoint",
        "endpoint": "opc.tcp://192.168.1.113:53530/OPCUA/SimulationServer",
        "secpol": "None",
        "secmode": "None",
        "none": true,
        "login": false,
        "usercert": false,
        "usercertificate": "",
        "userprivatekey": ""
    },
    {
        "id": "44d3feb2a1143d7b",
        "type": "ui-page",
        "name": "OPC UA",
        "ui": "5355e0c476f9da3b",
        "path": "/opcua",
        "icon": "home",
        "layout": "grid",
        "theme": "61eee6fc60281b9b",
        "order": 1,
        "className": "",
        "visible": "true",
        "disabled": "false"
    },
    {
        "id": "3391562fb50c6fe4",
        "type": "ui-page",
        "name": "OPC UA",
        "ui": "5355e0c476f9da3b",
        "path": "/opcua",
        "icon": "home",
        "layout": "grid",
        "theme": "61eee6fc60281b9b",
        "order": 2,
        "className": "",
        "visible": "true",
        "disabled": "false"
    },
    {
        "id": "5355e0c476f9da3b",
        "type": "ui-base",
        "name": "My Dashboard",
        "path": "/dashboard",
        "includeClientData": true,
        "acceptsClientConfig": [
            "ui-notification",
            "ui-control"
        ],
        "showPathInSidebar": false,
        "navigationStyle": "default"
    },
    {
        "id": "ef9998baf5f61e8a",
        "type": "ui-group",
        "name": " Address Space Folder Structure",
        "page": "44d3feb2a1143d7b",
        "width": "2",
        "height": "1",
        "order": 1,
        "showTitle": true,
        "className": "",
        "visible": "true",
        "disabled": "false"
    },
    {
        "id": "af263064820fb7d0",
        "type": "ui-group",
        "name": "Simulation values",
        "page": "44d3feb2a1143d7b",
        "width": "3",
        "height": "1",
        "order": 7,
        "showTitle": true,
        "className": "",
        "visible": "true",
        "disabled": "false"
    },
    {
        "id": "3d4f386e812e8b5f",
        "type": "ui-group",
        "name": "StaticData Values",
        "page": "44d3feb2a1143d7b",
        "width": "4",
        "height": "1",
        "order": 6,
        "showTitle": true,
        "className": "",
        "visible": "true",
        "disabled": "false"
    },
    {
        "id": "3c869db7d71ed5dc",
        "type": "ui-group",
        "name": " Address Space Folder Structure",
        "page": "44d3feb2a1143d7b",
        "width": "2",
        "height": "1",
        "order": 2,
        "showTitle": true,
        "className": "",
        "visible": "true",
        "disabled": "false"
    },
    {
        "id": "8f3a8e4ff7ddfeaf",
        "type": "ui-group",
        "name": "Simulation values",
        "page": "44d3feb2a1143d7b",
        "width": "3",
        "height": "1",
        "order": 3,
        "showTitle": true,
        "className": "",
        "visible": "true",
        "disabled": "false"
    },
    {
        "id": "4815300e672a7bb1",
        "type": "ui-group",
        "name": "StaticData Values",
        "page": "44d3feb2a1143d7b",
        "width": "4",
        "height": "1",
        "order": 4,
        "showTitle": true,
        "className": "",
        "visible": "true",
        "disabled": "false"
    },
    {
        "id": "70e4ee49d32d0f2c",
        "type": "ui-group",
        "name": "MyDevice Status & Control",
        "page": "44d3feb2a1143d7b",
        "width": "3",
        "height": "1",
        "order": 5,
        "showTitle": true,
        "className": "",
        "visible": "true",
        "disabled": "false"
    },
    {
        "id": "61eee6fc60281b9b",
        "type": "ui-theme",
        "name": "Default Theme",
        "colors": {
            "surface": "#0094ce",
            "primary": "#0094ce",
            "bgPage": "#eeeeee",
            "groupBg": "#ffffff",
            "groupOutline": "#cccccc"
        },
        "sizes": {
            "pagePadding": "12px",
            "groupGap": "12px",
            "groupBorderRadius": "4px",
            "widgetGap": "12px"
        }
    },
    {
        "id": "41dcfd7a5dc9aec7",
        "type": "ui-theme",
        "name": "Default Theme",
        "colors": {
            "surface": "#0094ce",
            "primary": "#0094ce",
            "bgPage": "#eeeeee",
            "groupBg": "#ffffff",
            "groupOutline": "#cccccc"
        },
        "sizes": {
            "pagePadding": "12px",
            "groupGap": "12px",
            "groupBorderRadius": "4px",
            "widgetGap": "12px"
        }
    },
    {
        "id": "fe727be26f2ef6db",
        "type": "OpcUa-Endpoint",
        "endpoint": "opc.tcp://192.168.1.113:53530/OPCUA/SimulationServer",
        "secpol": "None",
        "secmode": "None",
        "none": true,
        "login": false,
        "usercert": false,
        "usercertificate": "",
        "userprivatekey": ""
    },
    {
        "id": "4d1f3c0987654321",
        "type": "ui_group",
        "name": "Menu de Ações",
        "tab": "",
        "order": 1,
        "disp": true,
        "width": "6",
        "collapse": false
    },
    {
        "id": "c1e504c2fa71302b",
        "type": "ui_group",
        "name": "Teste Dropdown",
        "tab": "",
        "order": 1,
        "disp": true,
        "width": "6",
        "collapse": false,
        "className": ""
    },
    {
        "id": "68df5e0b.f4201",
        "type": "ui_group",
        "name": "Dropdown Teste",
        "tab": "",
        "order": 1,
        "disp": true,
        "width": "6",
        "collapse": false
    },
    {
        "id": "44e9842b5f2b6018",
        "type": "ui-group",
        "name": "Event",
        "page": "d1fc87389a0f81d0",
        "width": "6",
        "height": "1",
        "order": 1,
        "showTitle": false,
        "className": "",
        "visible": "true",
        "disabled": "false"
    },
    {
        "id": "d1fc87389a0f81d0",
        "type": "ui-page",
        "name": "Dropdown",
        "ui": "5355e0c476f9da3b",
        "path": "/dropdown",
        "icon": "form-dropdown",
        "layout": "notebook",
        "theme": "9d8bfd7e0d216779",
        "order": 3,
        "className": "",
        "visible": "true",
        "disabled": "false"
    },
    {
        "id": "9d8bfd7e0d216779",
        "type": "ui-theme",
        "name": "Default Theme",
        "colors": {
            "surface": "#ffffff",
            "primary": "#15617e",
            "bgPage": "#eeeeee",
            "groupBg": "#ffffff",
            "groupOutline": "#cccccc"
        },
        "sizes": {
            "pagePadding": "12px",
            "groupGap": "12px",
            "groupBorderRadius": "4px",
            "widgetGap": "12px"
        }
    },
    {
        "id": "node-ui-group",
        "type": "ui_group",
        "name": "Default Group",
        "tab": "",
        "order": 1,
        "disp": true,
        "width": 20,
        "collapse": false
    },
    {
        "id": "56dd1777.0149a8",
        "type": "ui_group",
        "name": "Settings",
        "tab": "",
        "order": 1,
        "disp": true,
        "width": "6",
        "collapse": false
    },
    {
        "id": "ddb08462.c1f2f8",
        "type": "ui_group",
        "name": "Shed",
        "tab": "",
        "order": 1,
        "disp": true,
        "width": "6",
        "collapse": false
    },
    {
        "id": "10fce37c.85a72d",
        "type": "ui_tab",
        "name": "7-Select",
        "icon": "dashboard",
        "order": 3,
        "disabled": false,
        "hidden": false
    },
    {
        "id": "f0a5e3b802cd5580",
        "type": "ui_tab",
        "name": "8-Analyze",
        "icon": "dashboard",
        "order": 4,
        "disabled": false,
        "hidden": false
    },
    {
        "id": "0a13573397fc86ae",
        "type": "ui_tab",
        "name": "9-Compose",
        "icon": "dashboard",
        "order": 5,
        "disabled": false,
        "hidden": false
    },
    {
        "id": "d745789b593fc54f",
        "type": "ui_tab",
        "name": "10-Manage",
        "icon": "dashboard",
        "order": 6,
        "disabled": false,
        "hidden": false
    },
    {
        "id": "instruction-group",
        "type": "ui_group",
        "name": "produce",
        "tab": "",
        "order": 1,
        "disp": true,
        "width": "60",
        "collapse": false,
        "className": ""
    },
    {
        "id": "dashboard-group",
        "type": "ui_group",
        "name": "Example Group",
        "tab": "",
        "order": 1,
        "disp": true,
        "width": "6",
        "collapse": false
    },
    {
        "id": "example-group",
        "type": "ui_group",
        "name": "Dropdown Example",
        "tab": "",
        "order": 1,
        "disp": true,
        "width": 12,
        "collapse": false,
        "className": ""
    },
    {
        "id": "group1",
        "type": "ui_group",
        "name": "AAS Viewer",
        "tab": "",
        "order": 1,
        "disp": true,
        "width": "12",
        "collapse": false,
        "className": ""
    },
    {
        "id": "ui_group1",
        "type": "ui_group",
        "name": "Default",
        "tab": "",
        "order": 1,
        "disp": true,
        "width": "6",
        "collapse": false
    },
    {
        "id": "8b3784e33ba42593",
        "type": "ui_group",
        "name": "JSON2tree",
        "tab": "",
        "order": 2,
        "disp": true,
        "width": "6",
        "collapse": false
    },
    {
        "id": "acbef146e75b19d2",
        "type": "ui_group",
        "name": "Group 1",
        "tab": "",
        "order": 2,
        "disp": true,
        "width": "6",
        "collapse": false,
        "className": ""
    },
    {
        "id": "32eab264782bb90a",
        "type": "ui_group",
        "name": "input",
        "tab": "",
        "order": 3,
        "disp": true,
        "width": "6",
        "collapse": false,
        "className": ""
    },
    {
        "id": "d85a90b264484629",
        "type": "ui_group",
        "name": "Group 2",
        "tab": "",
        "order": 1,
        "disp": true,
        "width": 6
    },
    {
        "id": "5fcb0776.c461c8",
        "type": "ui_group",
        "name": "Control",
        "tab": "",
        "order": 1,
        "disp": true,
        "width": "9",
        "collapse": false
    },
    {
        "id": "fc657953.1b728",
        "type": "ui_group",
        "name": "admin1",
        "tab": "",
        "order": 3,
        "disp": true,
        "width": "20",
        "collapse": false
    },
    {
        "id": "7f74a584.dea814",
        "type": "ui_group",
        "name": "admin2",
        "tab": "",
        "order": 4,
        "disp": true,
        "width": "21",
        "collapse": false
    },
    {
        "id": "f033628c.9c7ce",
        "type": "ui_group",
        "name": "Change Tabs",
        "tab": "",
        "order": 2,
        "disp": true,
        "width": "8",
        "collapse": false
    },
    {
        "id": "f8bac202fbe387ec",
        "type": "ui_group",
        "name": "Default",
        "tab": "",
        "order": 1,
        "disp": true,
        "width": 30,
        "collapse": false,
        "className": ""
    },
    {
        "id": "06daa779e377274b",
        "type": "ui_group",
        "name": "Default",
        "tab": "",
        "order": 1,
        "disp": true,
        "width": "6",
        "collapse": false,
        "className": ""
    },
    {
        "id": "a8c0eb8e45b6e4b2",
        "type": "ui_tab",
        "name": "Produce",
        "icon": "dashboard",
        "order": 1,
        "disabled": false,
        "hidden": false
    },
    {
        "id": "e3caa9b951fe752a",
        "type": "ui_group",
        "name": "",
        "tab": "a8c0eb8e45b6e4b2",
        "order": 1,
        "disp": true,
        "width": 15,
        "collapse": false,
        "className": ""
    },
    {
        "id": "af1535b39b74f94a",
        "type": "ui_group",
        "name": "Example",
        "tab": "",
        "order": 1,
        "disp": true,
        "width": 20,
        "collapse": false,
        "className": ""
    },
    {
        "id": "75c87985187defe0",
        "type": "ui_group",
        "name": "vetor",
        "tab": "",
        "order": 1,
        "disp": true,
        "width": 20,
        "collapse": false,
        "className": ""
    },
    {
        "id": "2f6503b9dfe941ed",
        "type": "ui_group",
        "name": "Grupo",
        "tab": "",
        "order": 1,
        "disp": true,
        "width": "6",
        "collapse": false
    },
    {
        "id": "0f4eaf529ca1a110",
        "type": "ui_group",
        "name": "Group 1",
        "tab": "",
        "order": 1,
        "disp": true,
        "width": 6
    },
    {
        "id": "45109acd4e17e7d9",
        "type": "ui_group",
        "name": "",
        "tab": "47987123ef818ed4",
        "order": 1,
        "disp": true,
        "width": "15",
        "collapse": false,
        "className": ""
    },
    {
        "id": "be29d35420eb4c02",
        "type": "ui_group",
        "name": "",
        "tab": "10fce37c.85a72d",
        "order": 1,
        "disp": true,
        "width": 15,
        "collapse": false,
        "className": ""
    },
    {
        "id": "2d655f8a0ec04e64",
        "type": "ui_group",
        "name": "",
        "tab": "f0a5e3b802cd5580",
        "order": 1,
        "disp": true,
        "width": "15",
        "collapse": false,
        "className": ""
    },
    {
        "id": "8c60dcc13bef6894",
        "type": "ui_group",
        "name": "",
        "tab": "0a13573397fc86ae",
        "order": 1,
        "disp": true,
        "width": "15",
        "collapse": false,
        "className": ""
    },
    {
        "id": "b8620c0b3080bcf8",
        "type": "ui_group",
        "name": "",
        "tab": "d745789b593fc54f",
        "order": 1,
        "disp": true,
        "width": "15",
        "collapse": false,
        "className": ""
    },
    {
        "id": "947144ab796917bf",
        "type": "ui_group",
        "name": "Description",
        "tab": "",
        "order": 1,
        "disp": true,
        "width": "30",
        "collapse": false,
        "className": ""
    },
    {
        "id": "eb768e167184ae94",
        "type": "ui_group",
        "name": "Status",
        "tab": "",
        "order": 1,
        "disp": true,
        "width": "6",
        "collapse": false,
        "className": ""
    },
    {
        "id": "19dc3c9d7bb69e37",
        "type": "ui_tab",
        "name": "AASX Server",
        "icon": "dashboard",
        "order": 8,
        "disabled": false,
        "hidden": false
    },
    {
        "id": "1d7bcb74f022a15d",
        "type": "ui_group",
        "name": "AASX Server",
        "tab": "19dc3c9d7bb69e37",
        "order": 1,
        "disp": true,
        "width": "30",
        "collapse": false,
        "className": ""
    },
    {
        "id": "e0c8a94610c8b5d4",
        "type": "ui_tab",
        "name": "Portainer",
        "icon": "dashboard",
        "order": 7,
        "disabled": false,
        "hidden": false
    },
    {
        "id": "52431512732beee1",
        "type": "ui_group",
        "name": "Portainer",
        "tab": "e0c8a94610c8b5d4",
        "order": 1,
        "disp": true,
        "width": 30,
        "collapse": false,
        "className": ""
    },
    {
        "id": "grupo_dashboard",
        "type": "ui_group",
        "name": "Principal",
        "tab": "",
        "order": 1,
        "disp": true,
        "width": "6",
        "collapse": false
    },
    {
        "id": "5fc594f2ade23b5d",
        "type": "ui_group",
        "name": "Description",
        "tab": "",
        "order": 1,
        "disp": true,
        "width": 30,
        "collapse": false,
        "className": ""
    },
    {
        "id": "8d01cea964d5d125",
        "type": "Flow2MermaidCfg",
        "name": "Flow2Uml",
        "direction": "TB",
        "genmereditor": ""
    },
    {
        "id": "f2e8635eaefb413d",
        "type": "ui_spacer",
        "z": "13170589.bf6fd2",
        "name": "spacer",
        "group": "b8620c0b3080bcf8",
        "order": 11,
        "width": 10,
        "height": 1
    },
    {
        "id": "a172cbdf6ccfffb4",
        "type": "ui_spacer",
        "z": "13170589.bf6fd2",
        "name": "spacer",
        "group": "b8620c0b3080bcf8",
        "order": 13,
        "width": 10,
        "height": 1
    },
    {
        "id": "9c2dc7db1c0524cc",
        "type": "ui_spacer",
        "z": "13170589.bf6fd2",
        "name": "spacer",
        "group": "b8620c0b3080bcf8",
        "order": 16,
        "width": 10,
        "height": 1
    },
    {
        "id": "4cef7aedc5665342",
        "type": "ui_spacer",
        "z": "13170589.bf6fd2",
        "name": "spacer",
        "group": "b8620c0b3080bcf8",
        "order": 18,
        "width": 10,
        "height": 1
    },
    {
        "id": "9c7f2b93b037f682",
        "type": "ui_spacer",
        "z": "13170589.bf6fd2",
        "name": "spacer",
        "group": "be29d35420eb4c02",
        "order": 3,
        "width": 1,
        "height": 1
    },
    {
        "id": "7ddacea9c0cc2227",
        "type": "ui_spacer",
        "z": "13170589.bf6fd2",
        "name": "spacer",
        "group": "be29d35420eb4c02",
        "order": 5,
        "width": 4,
        "height": 1
    },
    {
        "id": "e318a606519506c9",
        "type": "ui_spacer",
        "z": "13170589.bf6fd2",
        "name": "spacer",
        "group": "be29d35420eb4c02",
        "order": 7,
        "width": 1,
        "height": 1
    },
    {
        "id": "a44d3ef50a4c4db8",
        "type": "ui_spacer",
        "z": "13170589.bf6fd2",
        "name": "spacer",
        "group": "be29d35420eb4c02",
        "order": 9,
        "width": 4,
        "height": 1
    },
    {
        "id": "d89df68e59c47574",
        "type": "ui_spacer",
        "z": "13170589.bf6fd2",
        "name": "spacer",
        "group": "be29d35420eb4c02",
        "order": 11,
        "width": 1,
        "height": 1
    },
    {
        "id": "71a7e588e578b988",
        "type": "ui_spacer",
        "z": "13170589.bf6fd2",
        "name": "spacer",
        "group": "be29d35420eb4c02",
        "order": 13,
        "width": 4,
        "height": 1
    },
    {
        "id": "62f7ee64215958d5",
        "type": "ui_spacer",
        "z": "13170589.bf6fd2",
        "name": "spacer",
        "group": "be29d35420eb4c02",
        "order": 15,
        "width": 1,
        "height": 1
    },
    {
        "id": "11de4fc1bc1fb7eb",
        "type": "ui_spacer",
        "z": "13170589.bf6fd2",
        "name": "spacer",
        "group": "be29d35420eb4c02",
        "order": 17,
        "width": 4,
        "height": 1
    },
    {
        "id": "1a367775ec4fc026",
        "type": "ui_spacer",
        "z": "13170589.bf6fd2",
        "name": "spacer",
        "group": "be29d35420eb4c02",
        "order": 19,
        "width": 1,
        "height": 1
    },
    {
        "id": "ad9224a44107bff4",
        "type": "ui_spacer",
        "z": "13170589.bf6fd2",
        "name": "spacer",
        "group": "be29d35420eb4c02",
        "order": 21,
        "width": 4,
        "height": 1
    },
    {
        "id": "3b1dec0dd2c44525",
        "type": "ui_tab",
        "name": "Routes",
        "icon": "dashboard",
        "disabled": false,
        "hidden": false
    },
    {
        "id": "c917fc697a3b676d",
        "type": "ui_group",
        "name": "Routes",
        "tab": "3b1dec0dd2c44525",
        "order": 1,
        "disp": true,
        "width": 15,
        "collapse": false,
        "className": ""
    },
    {
        "id": "c98c8a46c1d44eb2",
        "type": "ui_dropdown",
        "z": "13170589.bf6fd2",
        "g": "67d58169ec97f73b",
        "name": "controllers",
        "label": "Controllers:",
        "tooltip": "",
        "place": "Select",
        "group": "be29d35420eb4c02",
        "order": 6,
        "width": 6,
        "height": 1,
        "passthru": true,
        "multiple": false,
        "options": [],
        "payload": "",
        "topic": "controllers",
        "topicType": "str",
        "className": "",
        "x": 2810,
        "y": 300,
        "wires": [
            [
                "151013cdaadfd467"
            ]
        ]
    },
    {
        "id": "7bd54dc877b885bc",
        "type": "function",
        "z": "13170589.bf6fd2",
        "g": "67d58169ec97f73b",
        "name": "mapName",
        "func": "// // Função para processar o payload e enviar a saída em msg.options\n// msg.options = msg.payload.map(item => item.name)\n// return msg;\n\n\n\n// Read registry and map names to dropdown options\nvar registry = global.get(\"registry\") || {};\n\n// Get services from registry or use empty array as fallback\nvar services = registry.services || [];\n\n// Map service names to dropdown options\nmsg.options = services.map(item => item.name);\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2590,
        "y": 340,
        "wires": [
            [
                "6f2a72842e744d7f",
                "c98c8a46c1d44eb2",
                "026d8368be66e657",
                "a43f797f2cfeea15"
            ]
        ]
    },
    {
        "id": "6f2a72842e744d7f",
        "type": "ui_dropdown",
        "z": "13170589.bf6fd2",
        "g": "67d58169ec97f73b",
        "name": "sensors",
        "label": "Sensors:",
        "tooltip": "",
        "place": "Select",
        "group": "be29d35420eb4c02",
        "order": 2,
        "width": 6,
        "height": 1,
        "passthru": true,
        "multiple": false,
        "options": [],
        "payload": "",
        "topic": "sensors",
        "topicType": "str",
        "className": "",
        "x": 2800,
        "y": 260,
        "wires": [
            [
                "151013cdaadfd467"
            ]
        ]
    },
    {
        "id": "026d8368be66e657",
        "type": "ui_dropdown",
        "z": "13170589.bf6fd2",
        "g": "67d58169ec97f73b",
        "name": "actuators",
        "label": "Actuators:",
        "tooltip": "",
        "place": "Select",
        "group": "be29d35420eb4c02",
        "order": 14,
        "width": 6,
        "height": 1,
        "passthru": true,
        "multiple": false,
        "options": [],
        "payload": "",
        "topic": "actuators",
        "topicType": "str",
        "className": "",
        "x": 2800,
        "y": 340,
        "wires": [
            [
                "151013cdaadfd467"
            ]
        ]
    },
    {
        "id": "0467ed2a0f2d46fa",
        "type": "moleculer-call",
        "z": "13170589.bf6fd2",
        "g": "f67e7e89a114723f",
        "broker": "15fdc347.1238cd",
        "name": "$node.list",
        "topic": "$node.list",
        "options": "{\"withServices\":true}",
        "x": 1720,
        "y": 220,
        "wires": [
            [
                "7d19df1a73516aaf"
            ]
        ]
    },
    {
        "id": "e33f45061eadd986",
        "type": "moleculer-call",
        "z": "13170589.bf6fd2",
        "g": "f67e7e89a114723f",
        "broker": "15fdc347.1238cd",
        "name": "$node.actions",
        "topic": "$node.actions",
        "options": "{\"withEndpoints\":true}",
        "x": 1740,
        "y": 260,
        "wires": [
            [
                "8cd3192167609f4d"
            ]
        ]
    },
    {
        "id": "2cc876c05e2eac32",
        "type": "moleculer-call",
        "z": "13170589.bf6fd2",
        "g": "f67e7e89a114723f",
        "broker": "15fdc347.1238cd",
        "name": "$node.services",
        "topic": "$node.services",
        "options": "{\"withActions\":true}",
        "x": 1740,
        "y": 300,
        "wires": [
            [
                "cd9a6b8c18b1e94e"
            ]
        ]
    },
    {
        "id": "cd9a6b8c18b1e94e",
        "type": "function",
        "z": "13170589.bf6fd2",
        "g": "f67e7e89a114723f",
        "name": "formatServicesList",
        "func": "// let servicesList = [];\n\n// msg.payload.forEach(service => {\n//     servicesList.push({\n//         name: service.name || '-',\n//         version: service.version || '-',\n//         state: 'OK',\n//         actions: service.actions ? Object.keys(service.actions).length : 0,\n//         events: service.events ? Object.keys(service.events).length : 0,\n//         // Exibe o nome de cada nó em uma nova linha\n//         nodes: service.nodes ? service.nodes.map(node => `<span style='color: gray;'>${node}</span>`).join('<br>') : 'N/A'\n//     });\n// });\n\n// msg.payload = servicesList;\n// return msg;\n\n\nlet servicesList = [];\n\nmsg.payload.forEach(service => {\n    servicesList.push({\n        name: service.name || '-',\n        version: service.version || '-',\n        state: 'OK',\n        actions: service.actions ? Object.keys(service.actions).length : 0,\n        events: service.events ? Object.keys(service.events).length : 0,\n        nodes: service.nodes ? service.nodes.map(node => `<span style='color: gray;'>${node}</span>`).join('<br>') : 'N/A'\n    });\n});\n\n// Atualiza o registry com a lista de serviços\nvar registry = global.get(\"registry\") || {};\nregistry.services = servicesList;\nglobal.set(\"registry\", registry);\n\nmsg.payload = servicesList;\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1930,
        "y": 300,
        "wires": [
            [
                "ccbf81a13c5f6bf3"
            ]
        ]
    },
    {
        "id": "ccbf81a13c5f6bf3",
        "type": "ui_template",
        "z": "13170589.bf6fd2",
        "g": "f67e7e89a114723f",
        "group": "45109acd4e17e7d9",
        "name": "Show List of services",
        "order": 3,
        "width": 0,
        "height": 0,
        "format": "<div style=\"height: 400px; overflow-y: auto; border: 1px solid black;\">\n    <table style=\"width: 100%; border-collapse: collapse;\">\n        <thead style=\"position: sticky; top: 0; background-color: #f1f1f1; z-index: 1;\">\n            <tr>\n                <th style=\"border: 1px solid black; padding: 8px;\">Service</th>\n                <th style=\"border: 1px solid black; padding: 8px;\">Version</th>\n                <th style=\"border: 1px solid black; padding: 8px;\">State</th>\n                <th style=\"border: 1px solid black; padding: 8px;\">Actions</th>\n                <th style=\"border: 1px solid black; padding: 8px;\">Events</th>\n                <th style=\"border: 1px solid black; padding: 8px;\">Nodes</th>\n            </tr>\n        </thead>\n        <tbody>\n            <tr ng-repeat=\"service in msg.payload\">\n                <td style=\"border: 1px solid black; padding: 8px;\">{{service.name}}</td>\n                <td style=\"border: 1px solid black; padding: 8px;\">{{service.version}}</td>\n                <td style=\"border: 1px solid black; padding: 8px; text-align: center;\">\n                    <span style=\"background-color: green; color: white; padding: 2px 5px;\">{{service.state}}</span>\n                </td>\n                <td style=\"border: 1px solid black; padding: 8px; text-align: center;\">{{service.actions}}</td>\n                <td style=\"border: 1px solid black; padding: 8px; text-align: center;\">{{service.events}}</td>\n                <td style=\"border: 1px solid black; padding: 8px;\" ng-bind-html=\"service.nodes\"></td>\n            </tr>\n        </tbody>\n    </table>\n</div>",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": true,
        "templateScope": "local",
        "className": "",
        "x": 2140,
        "y": 300,
        "wires": [
            []
        ]
    },
    {
        "id": "414b9fe8b6dfb983",
        "type": "ui_template",
        "z": "13170589.bf6fd2",
        "g": "f67e7e89a114723f",
        "group": "45109acd4e17e7d9",
        "name": "Show List of actions",
        "order": 4,
        "width": 0,
        "height": 0,
        "format": "<div style=\"height: 400px; overflow-y: auto; border: 1px solid black;\">\n    <table style=\"width: 100%; border-collapse: collapse;\">\n        <thead style=\"position: sticky; top: 0; background-color: #f1f1f1; z-index: 1;\">\n            <tr>\n                <th style=\"border: 1px solid black; padding: 8px;\">Action</th>\n                <th style=\"border: 1px solid black; padding: 8px;\">Nodes</th>\n                <th style=\"border: 1px solid black; padding: 8px;\">State</th>\n                <th style=\"border: 1px solid black; padding: 8px;\">Cached</th>\n                <th style=\"border: 1px solid black; padding: 8px;\">Params</th>\n            </tr>\n        </thead>\n        <tbody>\n            <tr ng-repeat=\"action in msg.payload\">\n                <td style=\"border: 1px solid black; padding: 8px;\">{{action.name}}</td>\n                <td style=\"border: 1px solid black; padding: 8px;\" ng-bind-html=\"action.nodes\"></td>\n                <td style=\"border: 1px solid black; padding: 8px; text-align: center;\">\n                    <span style=\"background-color: green; color: white; padding: 2px 5px;\" ng-if=\"action.state === 'OK'\">{{action.state}}</span>\n                    <span style=\"background-color: red; color: white; padding: 2px 5px;\" ng-if=\"action.state !== 'OK'\">{{action.state}}</span>\n                </td>\n                <td style=\"border: 1px solid black; padding: 8px; text-align: center;\">{{action.cached}}</td>\n                <td style=\"border: 1px solid black; padding: 8px;\">{{action.params}}</td>\n            </tr>\n        </tbody>\n    </table>\n</div>",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": true,
        "templateScope": "local",
        "className": "",
        "x": 2140,
        "y": 260,
        "wires": [
            []
        ]
    },
    {
        "id": "8cd3192167609f4d",
        "type": "function",
        "z": "13170589.bf6fd2",
        "g": "f67e7e89a114723f",
        "name": "formatActionsList",
        "func": "let actionsList = [];\n\nmsg.payload.forEach(action => {\n    actionsList.push({\n        name: action.name || '-',\n        nodes: action.count ? `<span style=\"color: gray;\">(*) ${action.count} <br>${action.hasLocal ? '<local>' : ''} ${action.nodes ? action.nodes.join('<br>') : ''}</span>` : 'N/A',\n        state: action.available ? 'OK' : 'OFFLINE',\n        cached: action.action.cache ? 'Yes' : 'No',\n        params: action.action.params ? Object.keys(action.action.params).join(', ') : 'N/A'\n    });\n});\n\nmsg.payload = actionsList;\nreturn msg;\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1930,
        "y": 260,
        "wires": [
            [
                "414b9fe8b6dfb983"
            ]
        ]
    },
    {
        "id": "7d19df1a73516aaf",
        "type": "function",
        "z": "13170589.bf6fd2",
        "g": "f67e7e89a114723f",
        "name": "formatNodesList",
        "func": "let nodesList = [];\n\nmsg.payload.forEach(node => {\n    nodesList.push({\n        id: node.id || '-',\n        available: node.available ? 'OK' : 'OFFLINE',\n        local: node.local ? 'Yes' : 'No',\n        lastHeartbeat: new Date(node.lastHeartbeatTime).toLocaleString(),\n        cpu: `${node.cpu}%`,\n        ipList: node.ipList ? node.ipList.join('<br>') : 'N/A',\n        langVersion: node.client.langVersion || 'N/A'\n    });\n});\n\nmsg.payload = nodesList;\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1940,
        "y": 220,
        "wires": [
            [
                "1335a984946eeda7"
            ]
        ]
    },
    {
        "id": "1335a984946eeda7",
        "type": "ui_template",
        "z": "13170589.bf6fd2",
        "g": "f67e7e89a114723f",
        "group": "45109acd4e17e7d9",
        "name": "Show List of nodes",
        "order": 2,
        "width": 0,
        "height": 0,
        "format": "<div style=\"height: 400px; overflow-y: auto; border: 1px solid black;\">\n    <table style=\"width: 100%; border-collapse: collapse;\">\n        <thead style=\"position: sticky; top: 0; background-color: #f1f1f1; z-index: 1;\">\n            <tr>\n                <th style=\"border: 1px solid black; padding: 8px;\">ID</th>\n                <th style=\"border: 1px solid black; padding: 8px;\">Available</th>\n                <th style=\"border: 1px solid black; padding: 8px;\">Local</th>\n                <th style=\"border: 1px solid black; padding: 8px;\">Last Heartbeat</th>\n                <th style=\"border: 1px solid black; padding: 8px;\">CPU</th>\n                <th style=\"border: 1px solid black; padding: 8px;\">IP List</th>\n                <th style=\"border: 1px solid black; padding: 8px;\">Lang Version</th>\n            </tr>\n        </thead>\n        <tbody>\n            <tr ng-repeat=\"node in msg.payload\">\n                <td style=\"border: 1px solid black; padding: 8px;\">{{node.id}}</td>\n                <td style=\"border: 1px solid black; padding: 8px; text-align: center;\">\n                    <span style=\"background-color: green; color: white; padding: 2px 5px;\" ng-if=\"node.available === 'OK'\">{{node.available}}</span>\n                    <span style=\"background-color: red; color: white; padding: 2px 5px;\" ng-if=\"node.available !== 'OK'\">{{node.available}}</span>\n                </td>\n                <td style=\"border: 1px solid black; padding: 8px; text-align: center;\">{{node.local}}</td>\n                <td style=\"border: 1px solid black; padding: 8px; text-align: center;\">{{node.lastHeartbeat}}</td>\n                <td style=\"border: 1px solid black; padding: 8px; text-align: center;\">{{node.cpu}}</td>\n                <td style=\"border: 1px solid black; padding: 8px;\" ng-bind-html=\"node.ipList\"></td>\n                <td style=\"border: 1px solid black; padding: 8px;\">{{node.langVersion}}</td>\n            </tr>\n        </tbody>\n    </table>\n</div>",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": true,
        "templateScope": "local",
        "className": "",
        "x": 2130,
        "y": 220,
        "wires": [
            []
        ]
    },
    {
        "id": "ca54d2444135848d",
        "type": "ui_template",
        "z": "13170589.bf6fd2",
        "g": "e76b2f922b1b4495",
        "group": "e3caa9b951fe752a",
        "name": "Description",
        "order": 1,
        "width": 15,
        "height": "12",
        "format": "<body>\n  <div style=\"font-family: Arial, sans-serif; \n              color: #333; \n              width: 100%; \n              margin: auto; \n              padding: 0 15px; \n              box-sizing: border-box;\n              display: flex;          /* Alinha os filhos em coluna */\n              flex-direction: column; /* Empilha verticalmente */\n              align-items: flex-start; /* Alinha à esquerda (opcional) */\n              justify-content: flex-start; /* Coloca conteúdo no topo */\">\n\n    <!-- Texto explicativo (agora no topo) -->\n    <div style=\"font-size: 1rem; \n                line-height: 1.5; \n                text-align: justify;\n                margin-bottom: 20px;\">\n      <!-- Espaço entre texto e imagem -->\n      <h2 style=\"color: #2c3e50; margin-top: 0; border-bottom: 2px solid #eee; padding-bottom: 10px;\">Plug and Produce\n        Architecture: Produce process</h2>\n      <p>\n        Our proposal of the Produce part of the PnPr architecture is presented in Fig.\n        At the top, in the green rectangle with dashed line, are the (5) steps of Produce,\n        which can be interpreted from left to right: communicate (6), select (7), analyze (8),\n        compose (9) and manage (10). At the bottom of the green rectangle with dashed line\n        in Fig., the number of steps is associated with their specific functions in the\n        PnPr architecture, maintaining the same numbering.\n      </p>\n    </div>\n\n    <!-- Imagem abaixo do texto -->\n    <img src=\"https://raw.githubusercontent.com/pontarolli/pnpr/master/figures/20250128_0744.svg\"\n         alt=\"Figure 2 - PnPr Architecture\"\n         style=\"width: 100%; \n                height: auto; \n                border: 1px solid #ccc; \n                box-sizing: border-box; \n                margin: 0; /* Remove margens automáticas */\n                display: block;\">\n  </div>\n</body>",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": true,
        "templateScope": "local",
        "className": "",
        "x": 870,
        "y": 60,
        "wires": [
            []
        ]
    },
    {
        "id": "b27dac02aeae8a1f",
        "type": "ui_text",
        "z": "13170589.bf6fd2",
        "g": "f886b3d702b7fd02",
        "group": "2d655f8a0ec04e64",
        "order": 7,
        "width": 0,
        "height": 0,
        "name": "controllerSelected",
        "label": "Controller:",
        "format": "{{msg.payload.idShortAsset}}",
        "layout": "row-spread",
        "className": "",
        "style": false,
        "font": "",
        "fontSize": "",
        "color": "#000000",
        "x": 3710,
        "y": 820,
        "wires": []
    },
    {
        "id": "bda792243fc2043e",
        "type": "ui_chart",
        "z": "13170589.bf6fd2",
        "g": "9de5c19daff6b4db",
        "name": "Setpoint x Process variable",
        "group": "b8620c0b3080bcf8",
        "order": 10,
        "width": 15,
        "height": 7,
        "label": "",
        "chartType": "line",
        "legend": "true",
        "xformat": "mm:ss",
        "interpolate": "linear",
        "nodata": "",
        "dot": false,
        "ymin": "0",
        "ymax": "110",
        "removeOlder": "10",
        "removeOlderPoints": "1000",
        "removeOlderUnit": "60",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#00ff4c",
            "#00d5ff",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "className": "",
        "x": 6360,
        "y": 480,
        "wires": [
            []
        ]
    },
    {
        "id": "6fbe26b937051670",
        "type": "ui_chart",
        "z": "13170589.bf6fd2",
        "g": "9de5c19daff6b4db",
        "name": "Manipulated variable x Error",
        "group": "b8620c0b3080bcf8",
        "order": 15,
        "width": 15,
        "height": 7,
        "label": "",
        "chartType": "line",
        "legend": "true",
        "xformat": "mm:ss",
        "interpolate": "linear",
        "nodata": "",
        "dot": false,
        "ymin": "-20",
        "ymax": "110",
        "removeOlder": "10",
        "removeOlderPoints": "1000",
        "removeOlderUnit": "60",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#fbff00",
            "#ff0000",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "className": "",
        "x": 6360,
        "y": 560,
        "wires": [
            []
        ]
    },
    {
        "id": "a43e323f0ea6dc8a",
        "type": "function",
        "z": "13170589.bf6fd2",
        "g": "9fe79b56637c4fe9",
        "name": "Create registry",
        "func": "var registry = {\n  sampleRate: {\n    sample: 0,\n  },\n  functionGenerator: {\n    function: {\n      name: null\n    },\n    wave: {\n      type: 0,    // 1 = sine, 2 = triangle, 3 = constant \n      crest: 0,   // Maximum wave value\n      trough: 0,  // Minimum wave value\n    },\n    constant: {\n      value: 10\n    }\n  },\n  sensor: {\n    service: {\n      name: null, // This will be dynamically set below\n      action: \"aas\" // Moleculer call service.action > idShortAsset.aas Example: greeter.hello\n    },\n    aas: {\n      idShortAsset: null,\n      idShortSubmodel: null,\n      idShortSubmodelElement: null,\n      format: null,\n      value: null\n    }\n  },\n  controller: {\n    service: {\n      name: null, // This will be dynamically set below\n      action: \"aas\" // Moleculer call service.action > idShortAsset.aas Example: greeter.hello\n    },\n    aas: {\n      idShortAsset: null,\n      idShortSubmodel: null,\n      idShortSubmodelElement: null,\n      format: null,\n      value: {\n        ti: 0,\n        td: 0,\n        kp: 0,\n        pv: 0,\n        setpoint: 0,\n        error: 0,\n        integrative: 0,\n        manipulatedVariable: 0,\n        time: 0\n      }\n    }\n  },\n  actuator: {\n    service: {\n      name: null, // This will be dynamically set below\n      action: \"aas\" // Moleculer call service.action > idShortAsset.aas Example: greeter.hello\n    },\n    aas: {\n      idShortAsset: null,\n      idShortSubmodel: null,\n      idShortSubmodelElement: null,\n      format: null,\n      value: null\n    }\n  },\n  valve:{\n    operationalRequirements:{\n    manualValves: {\n      HV120: \"closed\",\n      HV123: \"open\",\n      HV124: \"closed\",\n      HV131: \"open\",\n      HV132: {\n        value: 50,\n        unit: \"%\",\n        mode: \"manual\"\n      }\n    },\n    proportionalValve: {\n      service: {\n       name: null, // This will be dynamically set below\n       action: \"aas\" // Moleculer call service.action > idShortAsset.aas Example: greeter.hello\n        },\n      aas:{\n      idShortAsset: null,\n      idShortSubmodel: null,\n      idShortSubmodelElement: null,\n      value: null\n        }\n      }\n    }\n  },\n    panelButtons: {\n      generalKey: \"on\",\n      panel: \"on\",\n      enableOperation: \"on\",\n      pump1: \"on\",\n      pump2: \"on\",\n      emergency: \"off\"\n    },\n};\nglobal.set(\"registry\", registry);\nreturn { payload: \"registry initialized!\" };",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1120,
        "y": 180,
        "wires": [
            [
                "09d5eee6cc184270"
            ]
        ]
    },
    {
        "id": "ea910940a17a8fd1",
        "type": "function",
        "z": "13170589.bf6fd2",
        "g": "9fe79b56637c4fe9",
        "name": "Read registry object",
        "func": "var registry = global.get(\"registry\") || {};\nreturn { payload: registry };",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1100,
        "y": 260,
        "wires": [
            [
                "09d5eee6cc184270"
            ]
        ]
    },
    {
        "id": "ca22090c271b051d",
        "type": "function",
        "z": "13170589.bf6fd2",
        "g": "9fe79b56637c4fe9",
        "name": "Read Specific Variable",
        "func": "var registry = global.get(\"registry\") || {};\nvar path = msg.topic.split(\".\");\nvar value = path.reduce((obj, key) => obj && obj[key], registry);\nreturn { payload: value !== undefined ? value : \"Variable not found\" };",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1100,
        "y": 340,
        "wires": [
            [
                "09d5eee6cc184270"
            ]
        ]
    },
    {
        "id": "7d360d7b62b37adf",
        "type": "function",
        "z": "13170589.bf6fd2",
        "g": "9fe79b56637c4fe9",
        "name": "Update Sensor",
        "func": "var registry = global.get(\"registry\") || {};\nregistry.sensor.state.speed = msg.payload;\nglobal.set(\"registry\", registry);\nreturn { payload: \"Speed updated to \" + msg.payload + \" km/h\" };",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1120,
        "y": 380,
        "wires": [
            [
                "09d5eee6cc184270"
            ]
        ]
    },
    {
        "id": "3e1e8ce1afd713f1",
        "type": "function",
        "z": "13170589.bf6fd2",
        "g": "9fe79b56637c4fe9",
        "name": "Delete registry object",
        "func": "global.set(\"registry\", null);\nreturn { payload: \"registry deleted!\" };",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1100,
        "y": 460,
        "wires": [
            [
                "09d5eee6cc184270"
            ]
        ]
    },
    {
        "id": "f995a42aca9603fe",
        "type": "inject",
        "z": "13170589.bf6fd2",
        "g": "9fe79b56637c4fe9",
        "name": "Create registry",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": "",
        "topic": "",
        "x": 900,
        "y": 180,
        "wires": [
            [
                "a43e323f0ea6dc8a"
            ]
        ]
    },
    {
        "id": "0da67af09a78ddfe",
        "type": "inject",
        "z": "13170589.bf6fd2",
        "g": "9fe79b56637c4fe9",
        "name": "Read registry",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": "",
        "topic": "",
        "x": 890,
        "y": 260,
        "wires": [
            [
                "ea910940a17a8fd1"
            ]
        ]
    },
    {
        "id": "32d8feca72322ce6",
        "type": "inject",
        "z": "13170589.bf6fd2",
        "g": "9fe79b56637c4fe9",
        "name": "Update Sensor",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": "",
        "topic": "",
        "payload": "80",
        "payloadType": "num",
        "x": 900,
        "y": 380,
        "wires": [
            [
                "7d360d7b62b37adf"
            ]
        ]
    },
    {
        "id": "17541dd7b10088a8",
        "type": "inject",
        "z": "13170589.bf6fd2",
        "g": "9fe79b56637c4fe9",
        "name": "Delete registry",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": "",
        "topic": "",
        "x": 890,
        "y": 460,
        "wires": [
            [
                "3e1e8ce1afd713f1"
            ]
        ]
    },
    {
        "id": "241d1b568606efa0",
        "type": "inject",
        "z": "13170589.bf6fd2",
        "g": "9fe79b56637c4fe9",
        "name": "Read Sensor",
        "props": [
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": "",
        "topic": "sensor.state.speed",
        "x": 890,
        "y": 340,
        "wires": [
            [
                "ca22090c271b051d"
            ]
        ]
    },
    {
        "id": "09d5eee6cc184270",
        "type": "debug",
        "z": "13170589.bf6fd2",
        "g": "9fe79b56637c4fe9",
        "name": "Out",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1310,
        "y": 340,
        "wires": []
    },
    {
        "id": "5a589f426886db55",
        "type": "function",
        "z": "13170589.bf6fd2",
        "g": "9fe79b56637c4fe9",
        "name": "Add generic asset",
        "func": "var registry = global.get(\"registry\") || {};\nif (!registry.asset) {\n    registry.asset = {};\n}\nregistry.asset = {\n    \"idShort\": \"genericAsset\",\n};\nglobal.set(\"registry\", registry);\nreturn { payload: \"asset added!\" };",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1110,
        "y": 220,
        "wires": [
            [
                "09d5eee6cc184270"
            ]
        ]
    },
    {
        "id": "90be5b87aeb958da",
        "type": "inject",
        "z": "13170589.bf6fd2",
        "g": "9fe79b56637c4fe9",
        "name": "Create asset",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": "",
        "topic": "",
        "x": 890,
        "y": 220,
        "wires": [
            [
                "5a589f426886db55"
            ]
        ]
    },
    {
        "id": "1aa2cc1884919f34",
        "type": "function",
        "z": "13170589.bf6fd2",
        "g": "9fe79b56637c4fe9",
        "name": "Delete generic asset",
        "func": "var registry = global.get(\"registry\") || {};\nif (registry.asset) {\n    delete registry.asset;\n    global.set(\"registry\", registry);\n    return { payload: \"asset deleted!\" };\n} else {\n    return { payload: \"asset not found!\" };\n}",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1100,
        "y": 420,
        "wires": [
            [
                "09d5eee6cc184270"
            ]
        ]
    },
    {
        "id": "c79192e9739460f9",
        "type": "inject",
        "z": "13170589.bf6fd2",
        "g": "9fe79b56637c4fe9",
        "name": "Delete asset",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": "",
        "topic": "",
        "x": 890,
        "y": 420,
        "wires": [
            [
                "1aa2cc1884919f34"
            ]
        ]
    },
    {
        "id": "8da7086213b18514",
        "type": "comment",
        "z": "13170589.bf6fd2",
        "g": "9fe79b56637c4fe9",
        "name": "CRUD Methods",
        "info": "CRUD Methods (Create, Read, Update and Delete)\n\n\nRegistry – A centralized storage object that holds dynamic variables, configurations, and other essential application data. \nIt serves as a single source of truth for managing runtime settings, environment parameters, and metadata, allowing seamless access and updates across different components of the application. \nThe Registry ensures consistency, flexibility, and maintainability by providing a structured way to store and retrieve critical information.",
        "x": 1300,
        "y": 180,
        "wires": []
    },
    {
        "id": "f2c1886b251e1263",
        "type": "function",
        "z": "13170589.bf6fd2",
        "g": "9fe79b56637c4fe9",
        "name": "Read part of object",
        "func": "var registry = global.get(\"registry\") || {};\nvar path = msg.topic.split(\".\");\nvar value = path.reduce((obj, key) => obj && obj[key], registry);\nreturn { payload: value !== undefined ? value : \"Variable not found\" };",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1110,
        "y": 300,
        "wires": [
            [
                "09d5eee6cc184270"
            ]
        ]
    },
    {
        "id": "14129b0c09b5a346",
        "type": "inject",
        "z": "13170589.bf6fd2",
        "g": "9fe79b56637c4fe9",
        "name": "Read controller aas",
        "props": [
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": "",
        "topic": "controller.aas",
        "x": 910,
        "y": 300,
        "wires": [
            [
                "f2c1886b251e1263"
            ]
        ]
    },
    {
        "id": "68a9a63f75d140a8",
        "type": "function",
        "z": "13170589.bf6fd2",
        "g": "8ebf985bfdd08116",
        "name": "PID4 (parameters)",
        "func": "var registry = global.get(\"registry\") || {};\n\nmsg.action = `${registry.controller.service.name}.${registry.controller.service.action}`\n\nmsg.payload = {\n    \"idShortSubmodel\": registry.controller.aas.idShortSubmodel,\n    \"idShortSubmodelElement\": registry.controller.aas.idShortSubmodelElement,\n    \"value\":{\n        \"ti\": registry.controller.aas.value.ti,\n        \"td\": registry.controller.aas.value.td,\n        \"kp\": registry.controller.aas.value.kp,\n        \"pv\": registry.sensor.aas.value,  // Value retrieved from the flow variable\n        \"setpoint\": registry.controller.aas.value.setpoint,\n        \"error\": registry.controller.aas.value.error,\n        \"integrative\": registry.controller.aas.value.integrative,\n        \"manipulatedVariable\": registry.controller.aas.value.manipulatedVariable,\n        \"time\": registry.controller.aas.value.time\n    }\n};\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 4510,
        "y": 800,
        "wires": [
            [
                "197a9e0655224a3d"
            ]
        ]
    },
    {
        "id": "197a9e0655224a3d",
        "type": "moleculer-call",
        "z": "13170589.bf6fd2",
        "g": "8ebf985bfdd08116",
        "broker": "15fdc347.1238cd",
        "name": "",
        "topic": "",
        "options": "{}",
        "x": 4670,
        "y": 800,
        "wires": [
            [
                "c6e2fc0e1cc44ec9"
            ]
        ]
    },
    {
        "id": "c6e2fc0e1cc44ec9",
        "type": "function",
        "z": "13170589.bf6fd2",
        "g": "8ebf985bfdd08116",
        "name": "PID4 (payload)",
        "func": "var registry = global.get(\"registry\") || {};\n\nmsg.action = `${registry.controller.service.name}.${registry.controller.service.action}`\n\nmsg.payload = {\n\n    \"idShortSubmodel\": \"OperationalData\",\n    \"idShortSubmodelElement\": \"Payload\",\n    \"format\": \"value\"\n\n}\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 4820,
        "y": 800,
        "wires": [
            [
                "cd97ec714a90a853"
            ]
        ]
    },
    {
        "id": "cd97ec714a90a853",
        "type": "moleculer-call",
        "z": "13170589.bf6fd2",
        "g": "8ebf985bfdd08116",
        "broker": "15fdc347.1238cd",
        "name": "",
        "topic": "",
        "options": "{}",
        "x": 4970,
        "y": 800,
        "wires": [
            [
                "ec4ce54f72947fd8",
                "1d0dd5306b34b3f1"
            ]
        ]
    },
    {
        "id": "ec4ce54f72947fd8",
        "type": "function",
        "z": "13170589.bf6fd2",
        "g": "8ebf985bfdd08116",
        "name": "Update registry",
        "func": "var registry = global.get(\"registry\") || {};\nregistry.controller.aas.value.error = msg.payload.error;\nregistry.controller.aas.value.integrative = msg.payload.integrative;\nregistry.controller.aas.value.manipulatedVariable = msg.payload.mv;\nregistry.controller.aas.value.pv = msg.payload.processVariable;\nregistry.controller.aas.value.time = msg.payload.time;\nglobal.set(\"registry\", registry);\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 5120,
        "y": 800,
        "wires": [
            [
                "3a3b866220fa915d"
            ]
        ]
    },
    {
        "id": "bba541518ea0022c",
        "type": "function",
        "z": "13170589.bf6fd2",
        "g": "8ebf985bfdd08116",
        "name": "Update registry",
        "func": "// Obter o valor do registro global\nvar registry = global.get(\"registry\") || {};\n\n// Atualizar o idShortAsset com o valor vindo de msg.payload\nregistry.sensor.aas.value = msg.payload; // Atribui o valor recebido\n\n// Atualizar o valor global\nglobal.set(\"registry\", registry);\n\n// Retornar uma mensagem indicando a atualização\nreturn  msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 5180,
        "y": 660,
        "wires": [
            [
                "68a9a63f75d140a8",
                "d1be0363a648178c"
            ]
        ]
    },
    {
        "id": "1a16a5b3e93b5de3",
        "type": "ui_text_input",
        "z": "13170589.bf6fd2",
        "g": "9de5c19daff6b4db",
        "name": "",
        "label": "",
        "tooltip": "",
        "group": "",
        "order": 1,
        "width": 0,
        "height": 0,
        "passthru": true,
        "mode": "text",
        "delay": 300,
        "topic": "topic",
        "sendOnBlur": true,
        "className": "",
        "topicType": "msg",
        "x": 5740,
        "y": 480,
        "wires": [
            []
        ]
    },
    {
        "id": "4fd7663e631829dd",
        "type": "function",
        "z": "13170589.bf6fd2",
        "g": "9de5c19daff6b4db",
        "name": "Setpoint",
        "func": "var registry = global.get(\"registry\") || {};\nmsg.payload = registry.controller.aas.value.setpoint; \nmsg.topic = \"Setpoint\";\nmsg.original = {\n    timestamp: new Date().toISOString(),\n    type: \"Setpoint\",\n    value: msg.payload\n};\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 6080,
        "y": 480,
        "wires": [
            [
                "bda792243fc2043e",
                "5e38acde4af5c3f8"
            ]
        ]
    },
    {
        "id": "859693f0609fc886",
        "type": "function",
        "z": "13170589.bf6fd2",
        "g": "9de5c19daff6b4db",
        "name": "Process variable",
        "func": "var registry = global.get(\"registry\") || {};\nmsg.payload = registry.sensor.aas.value; \nmsg.topic = \"Pv\";\nmsg.original = {\n    timestamp: new Date().toISOString(),\n    type: \"Pv\",\n    value: msg.payload\n};\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 6110,
        "y": 520,
        "wires": [
            [
                "bda792243fc2043e",
                "5e38acde4af5c3f8"
            ]
        ]
    },
    {
        "id": "b84b24dd73976a24",
        "type": "function",
        "z": "13170589.bf6fd2",
        "g": "9de5c19daff6b4db",
        "name": "Manipulated variable",
        "func": "var registry = global.get(\"registry\") || {};\nmsg.payload = registry.controller.aas.value.manipulatedVariable; \nmsg.topic = \"Mv\";\nmsg.original = {\n    timestamp: new Date().toISOString(),\n    type: \"Mv\",\n    value: msg.payload\n};\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 6120,
        "y": 560,
        "wires": [
            [
                "6fbe26b937051670",
                "756ce7cd2bb19185"
            ]
        ]
    },
    {
        "id": "ece6b096c976cf96",
        "type": "function",
        "z": "13170589.bf6fd2",
        "g": "9de5c19daff6b4db",
        "name": "Error",
        "func": "var registry = global.get(\"registry\") || {};\nmsg.payload = registry.controller.aas.value.error; \nmsg.topic = \"Error\";\nmsg.original = {\n    timestamp: new Date().toISOString(),\n    type: \"Error\",\n    value: msg.payload\n};\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 6070,
        "y": 600,
        "wires": [
            [
                "6fbe26b937051670",
                "756ce7cd2bb19185"
            ]
        ]
    },
    {
        "id": "3a3b866220fa915d",
        "type": "function",
        "z": "13170589.bf6fd2",
        "g": "8ebf985bfdd08116",
        "name": "Actuator",
        "func": "var registry = global.get(\"registry\") || {};\n\nmsg.action = `${registry.actuator.service.name}.${registry.actuator.service.action}`\n\nmsg.payload = {\n    \"idShortSubmodel\": registry.actuator.aas.idShortSubmodel,\n    \"idShortSubmodelElement\": registry.actuator.aas.idShortSubmodelElement,\n    \"value\": String(registry.controller.aas.value.manipulatedVariable)  \n};\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 5280,
        "y": 800,
        "wires": [
            [
                "4d2f5ed1f3da9d6f"
            ]
        ]
    },
    {
        "id": "4d2f5ed1f3da9d6f",
        "type": "moleculer-call",
        "z": "13170589.bf6fd2",
        "g": "8ebf985bfdd08116",
        "broker": "15fdc347.1238cd",
        "name": "",
        "topic": "",
        "options": "{}",
        "x": 5410,
        "y": 800,
        "wires": [
            []
        ]
    },
    {
        "id": "a14bd96d2e3ca77d",
        "type": "ui_text",
        "z": "13170589.bf6fd2",
        "g": "6d311eefaabc1477",
        "group": "2d655f8a0ec04e64",
        "order": 2,
        "width": 0,
        "height": 0,
        "name": "sensorSelected",
        "label": "Sensor:",
        "format": "{{msg.payload.idShortAsset}}",
        "layout": "row-spread",
        "className": "",
        "style": false,
        "font": "",
        "fontSize": 16,
        "color": "#000000",
        "x": 3710,
        "y": 420,
        "wires": []
    },
    {
        "id": "630ec0b163d69b33",
        "type": "ui_text",
        "z": "13170589.bf6fd2",
        "g": "6d8524ceaaaca1e5",
        "group": "2d655f8a0ec04e64",
        "order": 15,
        "width": 0,
        "height": 0,
        "name": "actuatorSelected",
        "label": "Actuator:",
        "format": "{{msg.payload.idShortAsset}}",
        "layout": "row-spread",
        "className": "",
        "style": false,
        "font": "",
        "fontSize": 16,
        "color": "#000000",
        "x": 3710,
        "y": 1720,
        "wires": []
    },
    {
        "id": "74a16fe658f80bd5",
        "type": "ui_dropdown",
        "z": "13170589.bf6fd2",
        "g": "6d311eefaabc1477",
        "name": "sensorSubmodel",
        "label": "Submodel:",
        "tooltip": "",
        "place": "Select",
        "group": "2d655f8a0ec04e64",
        "order": 3,
        "width": 0,
        "height": 0,
        "passthru": true,
        "multiple": false,
        "options": [
            {
                "label": "Identification",
                "value": "Identification",
                "type": "str"
            },
            {
                "label": "TechnicalData",
                "value": "TechnicalData",
                "type": "str"
            },
            {
                "label": "OperationalData",
                "value": "OperationalData",
                "type": "str"
            },
            {
                "label": "SimulationModel ",
                "value": "SimulationModel ",
                "type": "str"
            },
            {
                "label": "Documentation",
                "value": "Documentation",
                "type": "str"
            },
            {
                "label": "None",
                "value": "",
                "type": "str"
            }
        ],
        "topic": "idShortSubmodel",
        "topicType": "str",
        "className": "",
        "x": 3520,
        "y": 260,
        "wires": [
            [
                "08b21281262cc826"
            ]
        ]
    },
    {
        "id": "4a303ecd592807a3",
        "type": "function",
        "z": "13170589.bf6fd2",
        "g": "6d311eefaabc1477",
        "name": "readRegistry",
        "func": "// Obter o objeto registry do escopo global\nvar registry = global.get(\"registry\") || {};\n\nmsg.action = `${registry.sensor.service.name}.${registry.sensor.service.action}`\n\nmsg.payload = {\n    idShortAsset: registry.sensor.aas.idShortAsset || '',\n    idShortSubmodel: registry.sensor.aas.idShortSubmodel || '',\n    idShortSubmodelElement: registry.sensor.aas.idShortSubmodelElement || '',\n    format: registry.sensor.aas.format || ''\n};\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 3530,
        "y": 400,
        "wires": [
            [
                "a14bd96d2e3ca77d",
                "85e5c18a582916f1"
            ]
        ]
    },
    {
        "id": "1188989aeccf0d20",
        "type": "ui_dropdown",
        "z": "13170589.bf6fd2",
        "g": "6d311eefaabc1477",
        "name": "sensorElement",
        "label": "Element:",
        "tooltip": "",
        "place": "Select",
        "group": "2d655f8a0ec04e64",
        "order": 4,
        "width": 0,
        "height": 0,
        "passthru": true,
        "multiple": false,
        "options": [
            {
                "label": "Level",
                "value": "Level",
                "type": "str"
            },
            {
                "label": "Current",
                "value": "Current",
                "type": "str"
            },
            {
                "label": "Percentage",
                "value": "Percentage",
                "type": "str"
            },
            {
                "label": "None",
                "value": "",
                "type": "str"
            }
        ],
        "topic": "idShortSubmodelElement",
        "topicType": "str",
        "className": "",
        "x": 3510,
        "y": 300,
        "wires": [
            [
                "08b21281262cc826"
            ]
        ]
    },
    {
        "id": "8ebdca6daa974bde",
        "type": "ui_dropdown",
        "z": "13170589.bf6fd2",
        "g": "6d311eefaabc1477",
        "name": "sensorFormat",
        "label": "Format:",
        "tooltip": "",
        "place": "Select",
        "group": "2d655f8a0ec04e64",
        "order": 5,
        "width": 0,
        "height": 0,
        "passthru": true,
        "multiple": false,
        "options": [
            {
                "label": "None",
                "value": "",
                "type": "str"
            },
            {
                "label": "value",
                "value": "value",
                "type": "str"
            }
        ],
        "topic": "format",
        "topicType": "str",
        "className": "",
        "x": 3510,
        "y": 340,
        "wires": [
            [
                "08b21281262cc826"
            ]
        ]
    },
    {
        "id": "5f27993959f21033",
        "type": "ui_text",
        "z": "13170589.bf6fd2",
        "g": "7a56353afcae4d8d",
        "group": "be29d35420eb4c02",
        "order": 4,
        "width": 4,
        "height": 1,
        "name": "sensorSelected",
        "label": "Selected:",
        "format": "{{msg.payload.registry.sensor.aas.idShortAsset}}",
        "layout": "row-spread",
        "className": "",
        "style": false,
        "font": "",
        "fontSize": 16,
        "color": "#000000",
        "x": 2820,
        "y": 540,
        "wires": []
    },
    {
        "id": "0e5de5c522088d6f",
        "type": "ui_text",
        "z": "13170589.bf6fd2",
        "g": "7a56353afcae4d8d",
        "group": "be29d35420eb4c02",
        "order": 8,
        "width": 4,
        "height": 1,
        "name": "controllerSelected",
        "label": "Selected:",
        "format": "{{msg.payload.registry.controller.aas.idShortAsset}}",
        "layout": "row-spread",
        "className": "",
        "style": false,
        "font": "",
        "fontSize": 16,
        "color": "#000000",
        "x": 2830,
        "y": 580,
        "wires": []
    },
    {
        "id": "9c91f98636748402",
        "type": "ui_text",
        "z": "13170589.bf6fd2",
        "g": "7a56353afcae4d8d",
        "group": "be29d35420eb4c02",
        "order": 16,
        "width": 4,
        "height": 1,
        "name": "actuatorSelected",
        "label": "Selected:",
        "format": "{{msg.payload.registry.actuator.aas.idShortAsset}}",
        "layout": "row-spread",
        "className": "",
        "style": false,
        "font": "",
        "fontSize": 16,
        "color": "#000000",
        "x": 2830,
        "y": 620,
        "wires": []
    },
    {
        "id": "6f63c6eab8ea0150",
        "type": "ui_dropdown",
        "z": "13170589.bf6fd2",
        "g": "f886b3d702b7fd02",
        "name": "controllerSubmodel",
        "label": "Submodel:",
        "tooltip": "",
        "place": "Select",
        "group": "2d655f8a0ec04e64",
        "order": 8,
        "width": 0,
        "height": 0,
        "passthru": true,
        "multiple": false,
        "options": [
            {
                "label": "None",
                "value": "",
                "type": "str"
            },
            {
                "label": "OperationalData",
                "value": "OperationalData",
                "type": "str"
            }
        ],
        "topic": "idShortSubmodel",
        "topicType": "str",
        "className": "",
        "x": 3530,
        "y": 520,
        "wires": [
            [
                "d748bf3bb9dd10b5"
            ]
        ]
    },
    {
        "id": "d748bf3bb9dd10b5",
        "type": "function",
        "z": "13170589.bf6fd2",
        "g": "f886b3d702b7fd02",
        "name": "Update registry",
        "func": "// Obter o valor do registro global\nvar registry = global.get(\"registry\") || {};\n\n// Garante que a estrutura esperada exista\nregistry.controller = registry.controller || {};\nregistry.controller.aas = registry.controller.aas || {};\n\nif (msg.topic && typeof msg.payload !== 'undefined') {\n    registry.controller.aas[msg.topic] = msg.payload;\n}\n\n// Atualiza o valor global\nglobal.set(\"registry\", registry);\n\n// Retorna a mensagem\nreturn msg;\n\n\n\n\n// observação\n// Em JavaScript, há duas formas principais de acessar propriedades de um objeto:\n\n// 1. Notação por ponto(estática):\n// obj.propriedade = valor;\n// Usada quando você conhece o nome da propriedade de antemão.\n\n// 2. Notação por colchetes(dinâmica):\n// obj[\"propriedade\"] = valor;\n// Ou, se você tem o nome da propriedade numa variável:\n// obj[minhaVariavel] = valor;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 3740,
        "y": 560,
        "wires": [
            []
        ]
    },
    {
        "id": "7b397e80da6902fe",
        "type": "function",
        "z": "13170589.bf6fd2",
        "g": "f886b3d702b7fd02",
        "name": "Read registry",
        "func": "// Obter o objeto registry do escopo global\nvar registry = global.get(\"registry\") || {};\n\nmsg.action = `${registry.controller.service.name}.${registry.controller.service.action}`\n\nmsg.payload = registry.controller.aas\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 3510,
        "y": 800,
        "wires": [
            [
                "480e8131b93ac93d",
                "b27dac02aeae8a1f"
            ]
        ]
    },
    {
        "id": "480e8131b93ac93d",
        "type": "ui_template",
        "z": "13170589.bf6fd2",
        "g": "f886b3d702b7fd02",
        "group": "2d655f8a0ec04e64",
        "name": "controllerRegistry",
        "order": 14,
        "width": 0,
        "height": 0,
        "format": "<div class=\"json-container\">\n    <!-- Título -->\n    <h3 class=\"json-title\" style=\"text-align: center; margin-bottom: 10px; color: #333;\">controller (registry)</h3>\n\n    <!-- Exibição do JSON -->\n    <div class=\"json-display\">\n        <pre>{{msg.payload | json}}</pre>\n    </div>\n</div>\n\n<style>\n    .json-display {\n        white-space: pre-wrap;\n        /* Permite a quebra de linha para JSON formatado */\n        max-height: 300px;\n        /* Ajuste a altura máxima, se desejado */\n        background-color: #f5f5f5;\n        /* Cor de fundo para destacar o JSON */\n        font-family: monospace;\n    }\n\n    .json-title {\n        font-family: Arial, sans-serif;\n        font-size: 1.2em;\n        font-weight: bold;\n    }\n</style>",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": true,
        "templateScope": "local",
        "className": "",
        "x": 3710,
        "y": 780,
        "wires": [
            []
        ]
    },
    {
        "id": "a89512bf099d270f",
        "type": "ui_dropdown",
        "z": "13170589.bf6fd2",
        "g": "f886b3d702b7fd02",
        "name": "controllerElement",
        "label": "Element:",
        "tooltip": "",
        "place": "Select",
        "group": "2d655f8a0ec04e64",
        "order": 9,
        "width": 0,
        "height": 0,
        "passthru": true,
        "multiple": false,
        "options": [
            {
                "label": "None",
                "value": "",
                "type": "str"
            },
            {
                "label": "Percentage",
                "value": "Percentage",
                "type": "str"
            },
            {
                "label": "Payload",
                "value": "Payload",
                "type": "str"
            },
            {
                "label": "Parameters",
                "value": "Parameters",
                "type": "str"
            }
        ],
        "topic": "idShortSubmodelElement",
        "topicType": "str",
        "className": "",
        "x": 3530,
        "y": 560,
        "wires": [
            [
                "d748bf3bb9dd10b5"
            ]
        ]
    },
    {
        "id": "261906bc063a0493",
        "type": "ui_dropdown",
        "z": "13170589.bf6fd2",
        "g": "f886b3d702b7fd02",
        "name": "controllerFormat",
        "label": "Format:",
        "tooltip": "",
        "place": "Select",
        "group": "2d655f8a0ec04e64",
        "order": 10,
        "width": 0,
        "height": 0,
        "passthru": true,
        "multiple": false,
        "options": [
            {
                "label": "None",
                "value": "",
                "type": "str"
            },
            {
                "label": "value",
                "value": "value",
                "type": "str"
            },
            {
                "label": "complete",
                "value": "complete",
                "type": "str"
            }
        ],
        "topic": "format",
        "topicType": "str",
        "className": "",
        "x": 3520,
        "y": 600,
        "wires": [
            [
                "d748bf3bb9dd10b5"
            ]
        ]
    },
    {
        "id": "354ae0c45ed9bbc1",
        "type": "ui_dropdown",
        "z": "13170589.bf6fd2",
        "g": "6d8524ceaaaca1e5",
        "name": "actuatorSubmodel",
        "label": "Submodel:",
        "tooltip": "",
        "place": "Select",
        "group": "2d655f8a0ec04e64",
        "order": 16,
        "width": 0,
        "height": 0,
        "passthru": true,
        "multiple": false,
        "options": [
            {
                "label": "OperationalData",
                "value": "OperationalData",
                "type": "str"
            },
            {
                "label": "None",
                "value": "",
                "type": "str"
            }
        ],
        "topic": "idShortSubmodel",
        "topicType": "str",
        "className": "",
        "x": 3530,
        "y": 1560,
        "wires": [
            [
                "24ef48d53088e4e6"
            ]
        ]
    },
    {
        "id": "24ef48d53088e4e6",
        "type": "function",
        "z": "13170589.bf6fd2",
        "g": "6d8524ceaaaca1e5",
        "name": "Update registry",
        "func": "// Obter o valor do registro global\nvar registry = global.get(\"registry\") || {};\n\n// Garante que a estrutura esperada exista\nregistry.actuator = registry.actuator || {};\nregistry.actuator.aas = registry.actuator.aas || {};\n\nif (msg.topic && typeof msg.payload !== 'undefined') {\n    registry.actuator.aas[msg.topic] = msg.payload;\n}\n\n// Atualiza o valor global\nglobal.set(\"registry\", registry);\n\n// Retorna a mensagem\nreturn msg;\n\n\n\n\n// observação\n// Em JavaScript, há duas formas principais de acessar propriedades de um objeto:\n\n// 1. Notação por ponto(estática):\n// obj.propriedade = valor;\n// Usada quando você conhece o nome da propriedade de antemão.\n\n// 2. Notação por colchetes(dinâmica):\n// obj[\"propriedade\"] = valor;\n// Ou, se você tem o nome da propriedade numa variável:\n// obj[minhaVariavel] = valor;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 3740,
        "y": 1600,
        "wires": [
            []
        ]
    },
    {
        "id": "a5251b0d66c17a11",
        "type": "function",
        "z": "13170589.bf6fd2",
        "g": "6d8524ceaaaca1e5",
        "name": "Read (registry)",
        "func": "// Obter o objeto registry do escopo global\nvar registry = global.get(\"registry\") || {};\n\nmsg.action = `${registry.actuator.service.name}.${registry.actuator.service.action}`\n\nmsg.payload = {\n    idShortAsset: registry.actuator.aas.idShortAsset || '',\n    idShortSubmodel: registry.actuator.aas.idShortSubmodel || '',\n    idShortSubmodelElement: registry.actuator.aas.idShortSubmodelElement || '',\n    format: registry.actuator.aas.format || ''\n};\n\nreturn msg;\n\n\n\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 3500,
        "y": 1700,
        "wires": [
            [
                "bb263c221e0b07a1",
                "630ec0b163d69b33"
            ]
        ]
    },
    {
        "id": "bb263c221e0b07a1",
        "type": "ui_template",
        "z": "13170589.bf6fd2",
        "g": "6d8524ceaaaca1e5",
        "group": "2d655f8a0ec04e64",
        "name": "actuatorRegistry",
        "order": 19,
        "width": 0,
        "height": 0,
        "format": "<div class=\"json-container\">\n    <!-- Título -->\n    <h3 class=\"json-title\" style=\"text-align: center; margin-bottom: 10px; color: #333;\">Actuator (registry)</h3>\n\n    <!-- Exibição do JSON -->\n    <div class=\"json-display\">\n        <pre>{{msg.payload | json}}</pre>\n    </div>\n</div>\n\n<style>\n    .json-display {\n        white-space: pre-wrap;\n        /* Permite a quebra de linha para JSON formatado */\n        max-height: 300px;\n        /* Ajuste a altura máxima, se desejado */\n        background-color: #f5f5f5;\n        /* Cor de fundo para destacar o JSON */\n        font-family: monospace;\n    }\n\n    .json-title {\n        font-family: Arial, sans-serif;\n        font-size: 1.2em;\n        font-weight: bold;\n    }\n</style>",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": true,
        "templateScope": "local",
        "className": "",
        "x": 3700,
        "y": 1680,
        "wires": [
            []
        ]
    },
    {
        "id": "9e530b0a1fd8ef97",
        "type": "ui_dropdown",
        "z": "13170589.bf6fd2",
        "g": "6d8524ceaaaca1e5",
        "name": "actuatorElement",
        "label": "Element:",
        "tooltip": "",
        "place": "Select",
        "group": "2d655f8a0ec04e64",
        "order": 17,
        "width": 0,
        "height": 0,
        "passthru": true,
        "multiple": false,
        "options": [
            {
                "label": "Percentage",
                "value": "Percentage",
                "type": "str"
            },
            {
                "label": "Payload",
                "value": "Payload",
                "type": "str"
            },
            {
                "label": "Parameters",
                "value": "Parameters",
                "type": "str"
            }
        ],
        "topic": "idShortSubmodelElement",
        "topicType": "str",
        "className": "",
        "x": 3520,
        "y": 1600,
        "wires": [
            [
                "24ef48d53088e4e6"
            ]
        ]
    },
    {
        "id": "7a9d8e9733acc5b1",
        "type": "ui_dropdown",
        "z": "13170589.bf6fd2",
        "g": "6d8524ceaaaca1e5",
        "name": "actuatorFormat",
        "label": "Format:",
        "tooltip": "",
        "place": "Select",
        "group": "2d655f8a0ec04e64",
        "order": 18,
        "width": 0,
        "height": 0,
        "passthru": true,
        "multiple": false,
        "options": [
            {
                "label": "value",
                "value": "value",
                "type": "str"
            },
            {
                "label": "None",
                "value": "None",
                "type": "str"
            }
        ],
        "topic": "format",
        "topicType": "str",
        "className": "",
        "x": 3520,
        "y": 1640,
        "wires": [
            [
                "24ef48d53088e4e6"
            ]
        ]
    },
    {
        "id": "fdfaab2921229013",
        "type": "function",
        "z": "13170589.bf6fd2",
        "g": "2e9f93364ef00f8c",
        "name": "Options",
        "func": "msg.payload = {\n  op1: Math.floor(Math.random() * 100),\n  op2: 11 + Math.floor(Math.random() * 10),\n  op3: Math.floor(Math.random() * 50),\n  op4: Math.floor(Math.random() * 75),\n  op5: Math.floor(Math.random() * 30),\n  op6: Math.floor(Math.random() * 20),\n  op7: Math.floor(Math.random() * 99),\n  op8: Math.floor(Math.random() * 80),\n  op9: Math.floor(Math.random() * 60),\n  op10: Math.floor(Math.random() * 40),\n  sensor: global.get(\"registry.sensor.aas.idShortAsset\"),\n  sensorValue: global.get(\"registry.sensor.aas.value\"),\n  controller: global.get(\"registry.controller.aas.idShortAsset\"),\n  actuator: global.get(\"registry.actuator.aas.idShortAsset\")\n};\n\n\nreturn msg;\n\n\n\n\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 4620,
        "y": 300,
        "wires": [
            [
                "567a0b50c196564b"
            ]
        ]
    },
    {
        "id": "567a0b50c196564b",
        "type": "ui_template",
        "z": "13170589.bf6fd2",
        "g": "2e9f93364ef00f8c",
        "group": "8c60dcc13bef6894",
        "name": "Applications",
        "order": 2,
        "width": 0,
        "height": 0,
        "format": "<div ng-app=\"\" style=\"max-width: 1200px; margin: auto; padding: 15px; font-family: Arial, sans-serif; color: #333;\">\n  <label>Selec:\n    <select id=\"selectShape\" ng-model=\"selectedShape\" ng-init=\"selectedShape='op1'\">\n      <option ng-repeat=\"i in [].constructor(3) track by $index\" value=\"op{{$index+1}}\">\n        {{$index === 0 ? 'Process control' :\n          $index === 1 ? 'Batch Process' :\n          $index === 2 ? 'Historian' :\n          'Opção ' + ($index + 1)}}\n      </option>\n    </select>\n  </label>\n\n  <svg viewBox=\"0 0 400 250\" width=\"100%\" height=\"auto\" preserveAspectRatio=\"xMidYMid meet\">\n    <defs>\n      <marker id=\"arrow\" markerWidth=\"10\" markerHeight=\"7\" refX=\"10\" refY=\"3.5\" orient=\"auto\" markerUnits=\"strokeWidth\">\n        <polygon points=\"0 0, 10 3.5, 0 7\" fill=\"#000\" />\n      </marker>\n      <marker id=\"arrowhead\" markerWidth=\"10\" markerHeight=\"7\" refX=\"10\" refY=\"3.5\" orient=\"auto\">\n        <polygon points=\"0 0, 10 3.5, 0 7\" fill=\"#000\" />\n      </marker>\n    </defs>\n\n    <!-- Opção 1: Process Control -->\n    <g ng-show=\"selectedShape === 'op1'\">\n      <rect x=\"25\" y=\"100\" width=\"100\" height=\"60\" fill=\"#ADD8E6\" stroke=\"#000\" />\n      <text x=\"75\" y=\"135\" text-anchor=\"middle\" font-size=\"14\">{{msg.payload.sensor || 'Sensor'}}</text>\n\n      <rect x=\"150\" y=\"100\" width=\"100\" height=\"60\" fill=\"#90EE90\" stroke=\"#000\" />\n      <text x=\"200\" y=\"135\" text-anchor=\"middle\" font-size=\"14\">{{msg.payload.controller || 'Controller'}}</text>\n\n      <rect x=\"275\" y=\"100\" width=\"100\" height=\"60\" fill=\"#FFB6C1\" stroke=\"#000\" />\n      <text x=\"325\" y=\"135\" text-anchor=\"middle\" font-size=\"14\">{{msg.payload.actuator || 'Actuator'}}</text>\n\n      <line x1=\"125\" y1=\"130\" x2=\"150\" y2=\"130\" stroke=\"#000\" stroke-width=\"2\" marker-end=\"url(#arrow)\" />\n      <line x1=\"250\" y1=\"130\" x2=\"275\" y2=\"130\" stroke=\"#000\" stroke-width=\"2\" marker-end=\"url(#arrow)\" />\n      <line x1=\"325\" y1=\"160\" x2=\"325\" y2=\"220\" stroke=\"#000\" stroke-width=\"2\" />\n      <line x1=\"325\" y1=\"220\" x2=\"75\" y2=\"220\" stroke=\"#000\" stroke-width=\"2\" />\n      <line x1=\"75\" y1=\"220\" x2=\"75\" y2=\"160\" stroke=\"#000\" stroke-width=\"2\" marker-end=\"url(#arrow)\" />\n    </g>\n\n    <!-- Opção 2: Batch Process -->\n    <g ng-show=\"selectedShape === 'op2'\">\n      <circle cx=\"75\" cy=\"125\" r=\"30\" fill=\"#FDD835\" stroke=\"#000\" />\n      <text x=\"75\" y=\"130\" text-anchor=\"middle\" font-size=\"12\">{{msg.payload.sensor || 'Dosagem'}}</text>\n\n      <circle cx=\"200\" cy=\"125\" r=\"30\" fill=\"#4FC3F7\" stroke=\"#000\" />\n      <text x=\"200\" y=\"130\" text-anchor=\"middle\" font-size=\"12\">{{msg.payload.actuator || 'Mistura'}}</text>\n\n      <circle cx=\"325\" cy=\"125\" r=\"30\" fill=\"#A5D6A7\" stroke=\"#000\" />\n      <text x=\"325\" y=\"130\" text-anchor=\"middle\" font-size=\"12\">{{msg.payload.final || 'Final'}}</text>\n\n      <line x1=\"105\" y1=\"125\" x2=\"170\" y2=\"125\" stroke=\"#000\" stroke-width=\"2\" marker-end=\"url(#arrowhead)\" />\n      <line x1=\"230\" y1=\"125\" x2=\"295\" y2=\"125\" stroke=\"#000\" stroke-width=\"2\" marker-end=\"url(#arrowhead)\" />\n    </g>\n\n    <!-- Opção 3: Historian -->\n    <g ng-show=\"selectedShape === 'op3'\">\n      <rect x=\"25\" y=\"100\" width=\"100\" height=\"60\" fill=\"#FFD700\" stroke=\"#000\" />\n      <text x=\"75\" y=\"135\" text-anchor=\"middle\" font-size=\"14\">{{msg.payload.sensor || 'Sensor'}}</text>\n\n      <rect x=\"150\" y=\"100\" width=\"100\" height=\"60\" fill=\"#6495ED\" stroke=\"#000\" />\n      <text x=\"200\" y=\"135\" text-anchor=\"middle\" font-size=\"14\">Historian</text>\n\n      <rect x=\"275\" y=\"100\" width=\"100\" height=\"60\" fill=\"#98FB98\" stroke=\"#000\" />\n      <text x=\"325\" y=\"135\" text-anchor=\"middle\" font-size=\"14\">{{msg.payload.sensorValue || 'HMI'}}</text>\n\n      <line x1=\"125\" y1=\"130\" x2=\"150\" y2=\"130\" stroke=\"#000\" stroke-width=\"2\" marker-end=\"url(#arrow)\" />\n      <line x1=\"250\" y1=\"130\" x2=\"275\" y2=\"130\" stroke=\"#000\" stroke-width=\"2\" marker-end=\"url(#arrow)\" />\n    </g>\n  </svg>\n</div>",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": true,
        "templateScope": "local",
        "className": "",
        "x": 4770,
        "y": 300,
        "wires": [
            []
        ]
    },
    {
        "id": "ee520e86be8fa9e4",
        "type": "ui_template",
        "z": "13170589.bf6fd2",
        "g": "f67e7e89a114723f",
        "group": "45109acd4e17e7d9",
        "name": "Description",
        "order": 1,
        "width": 0,
        "height": 0,
        "format": "<body>\n  <!-- Centered Image at the top -->\n  <div style=\"text-align: center; margin: 20px auto; max-width: 1200px;\">\n    <img src=\"https://raw.githubusercontent.com/pontarolli/pnpr/master/figures/communicate.svg\"\n         alt=\"Figure 6 - PnPr Communication\"\n         style=\"max-width: 100%; height: auto; border: 1px solid #e0e0e0; border-radius: 4px; box-shadow: 0 2px 4px rgba(0,0,0,0.1);\">\n  </div>\n\n  <!-- Main content below the image -->\n  <div\n    style=\"font-family: Arial, sans-serif; color: #333; max-width: 1200px; margin: 0 auto; padding: 20px; box-sizing: border-box;\">\n    <div style=\"font-size: 1.05rem; line-height: 1.7;\">\n      <h2 style=\"color: #2c3e50; margin-top: 0; border-bottom: 2px solid #eee; padding-bottom: 10px;\">Communication Step\n      </h2>\n\n      <p style=\"margin-bottom: 15px;\">A total integrated networked environment is one of the Industry 4.0 pillars.\n        Creating Industry 4.0 applications in the Produce part requires a standardized and automatic communication among\n        assets. The sixth step in the Produce process, as depicted in the architecture PnPr figure in the Produce tab (highlighted in\n        green), involves utilizing service composer software compatible with the asset communication protocol and their\n        respective information models of the PnPr architecture to establish a communication channel for creating\n        automation applications.</p>\n\n      <p style=\"margin-bottom: 15px;\">In our proposal, Node-RED was chosen as the composer due to its industry\n        acceptance and communication support for our PnPr architecture (microservice, OPC UA, and HTTP). In this stage, a call is made every 10 seconds to register Moleculer services. The\n        response includes all available and online assets connected to the NATS transporter.</p>\n\n      <div\n        style=\"background-color: #f8f9fa; border-left: 4px solid #3498db; padding: 15px; margin-bottom: 20px; border-radius: 0 4px 4px 0;\">\n        <h3 style=\"margin-top: 0; color: #2c3e50;\">Key Service Returns:</h3>\n        <ul style=\"margin-bottom: 0; padding-left: 20px;\">\n          <li style=\"margin-bottom: 8px;\"><code>$node.list</code>: Lists all known nodes</li>\n          <li style=\"margin-bottom: 8px;\"><code>$node.services</code>: Lists all registered services</li>\n          <li><code>$node.actions</code>: Lists all registered actions</li>\n        </ul>\n      </div>\n\n      <div style=\"background-color: #f0f8ff; border: 1px solid #d0e3ff; padding: 15px; border-radius: 4px;\">\n        <h3 style=\"margin-top: 0; color: #2c3e50;\">Technical Note:</h3>\n        <p style=\"margin-bottom: 0;\">The communication layer automatically handles service discovery and registration\n          through the NATS transporter, enabling seamless integration between assets in the PnPr architecture.</p>\n      </div>\n    </div>\n  </div>\n</body>",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": true,
        "templateScope": "local",
        "className": "",
        "x": 2110,
        "y": 180,
        "wires": [
            []
        ]
    },
    {
        "id": "26c69fe7cdb3f048",
        "type": "ui_template",
        "z": "13170589.bf6fd2",
        "g": "9334aa3adb839a1f",
        "group": "be29d35420eb4c02",
        "name": "Description",
        "order": 1,
        "width": 0,
        "height": 0,
        "format": "<body>\n  <!-- Imagem no topo centralizada a 100% -->\n  <div style=\"text-align: center; margin: 20px auto; max-width: 1200px;\">\n    <img src=\"https://raw.githubusercontent.com/pontarolli/pnpr/master/figures/aas.svg\"\n         alt=\"Figure 2 - PnPr Architecture\"\n         style=\"width: 100%; height: auto; border: 1px solid #e0e0e0; border-radius: 4px; box-shadow: 0 2px 4px rgba(0,0,0,0.1);\">\n  </div>\n\n  <!-- Conteúdo abaixo da imagem -->\n  <div\n    style=\"font-family: Arial, sans-serif; color: #333; max-width: 1200px; margin: 0 auto; padding: 20px; box-sizing: border-box;\">\n    <div style=\"font-size: 1.05rem; line-height: 1.7;\">\n      <h2 style=\"color: #2c3e50; margin-top: 0; border-bottom: 2px solid #eee; padding-bottom: 10px;\">Selection Step\n      </h2>\n\n      <p style=\"margin-bottom: 15px;\">The seventh step in the Produce process, as illustrated in in the architecture PnPr figure in the Produce tab (highlighted\n        in green), involves application composers issuing a scanner request to detect all available assets within the\n        network. Upon receiving the response - which includes asset properties, capacities, and\n        other structured information according to the Asset Administration Shell (AAS) information model - the data can\n        be systematically organized into an Asset Library, as shown in in the architecture PnPr figure in the Produce tab.</p>\n\n\n\n      <p style=\"margin-bottom: 15px;\">In our implementation, we utilize the Node Package Manager (NPM) to encapsulate\n        and distribute custom-created libraries and functional blocks within the Node-RED development environment\n        (editor/backend). Additionally, you can dynamically select online assets using the interactive\n        selectors below through the Node-RED dashboard (frontend) interface.</p>\n\n      <div\n        style=\"background-color: #f8f9fa; border-left: 4px solid #3498db; padding: 15px; margin-bottom: 20px; border-radius: 0 4px 4px 0;\">\n        <h3 style=\"margin-top: 0; color: #2c3e50;\">Instructions:</h3>\n        <ol style=\"margin-bottom: 0; padding-left: 20px;\">\n          <li style=\"margin-bottom: 8px;\">Select a Sensor Asset (e.g., lit125_daq)</li>\n          <li style=\"margin-bottom: 8px;\">Select a Controller Asset (e.g., lic125_pid4)</li>\n          <li style=\"margin-bottom: 8px;\">Select an Actuator Asset (e.g., p2_daq)</li>\n          <li>Proceed to the next step: 8-Analyze</li>\n        </ol>\n      </div>\n    </div>\n  </div>\n</body>",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": true,
        "templateScope": "local",
        "className": "",
        "x": 3070,
        "y": 180,
        "wires": [
            []
        ]
    },
    {
        "id": "21d143549c9300b2",
        "type": "ui_template",
        "z": "13170589.bf6fd2",
        "g": "10a4928a39108988",
        "group": "2d655f8a0ec04e64",
        "name": "Description analyze",
        "order": 1,
        "width": 0,
        "height": 0,
        "format": "<body>\n  <!-- Imagem no topo centralizada a 100% -->\n  <div style=\"text-align: center; margin: 20px auto; max-width: 1200px; padding: 0 20px;\">\n    <img src=\"https://raw.githubusercontent.com/pontarolli/pnpr/master/figures/analyze.svg\"\n         alt=\"Figure 2 - PnPr Architecture\"\n         style=\"width: 100%; max-width: 100%; height: auto; border: 1px solid #e0e0e0; border-radius: 4px; box-shadow: 0 2px 4px rgba(0,0,0,0.1);\">\n  </div>\n\n  <!-- Conteúdo abaixo da imagem -->\n  <div\n    style=\"font-family: Arial, sans-serif; color: #333; max-width: 1200px; margin: 0 auto; padding: 20px; box-sizing: border-box;\">\n    <div style=\"font-size: 1.05rem; line-height: 1.7;\">\n      <h2 style=\"color: #2c3e50; margin-top: 0; border-bottom: 2px solid #eee; padding-bottom: 10px;\">Analysis Step</h2>\n\n      <p style=\"margin-bottom: 15px;\">In the eighth step in Produce in the architecture PnPr figure in the Produce tab (highlighted in green), the compositor\n        analyzes the identity,\n        functionalities, and requirements of the asset(s). The asset manager data structure in the architecture PnPr figure in the Produce tab (E.g., Motor) supports the\n        representation of the physical and\n        the information world, allowing the change of asset parameters, as well as the creation of asset simulation\n        models for enabling the creation of Digital Twins (DT)</p>\n\n      <p style=\"margin-bottom: 25px;\">At this stage, it is possible to change all the settings of the blocks you\n        selected either in Node-RED (editor/backend)\n        statically or dynamically (dashboard/frontend).</p>\n\n      <div\n        style=\"background-color: #f8f9fa; border-left: 4px solid #3498db; padding: 15px; margin-bottom: 20px; border-radius: 0 4px 4px 0;\">\n        <h3 style=\"margin-top: 0; color: #2c3e50;\">Instructions:</h3>\n        <ol style=\"margin-bottom: 0; padding-left: 20px;\">\n          <li style=\"margin-bottom: 8px;\">Analyze and configure the sensor asset value if needed. Example:\n            <code>\"idShortSubmodel\": \"OperationalData\", \"idShortSubmodelElement\": \"Percentage\", \"format\": \"value\"</code>\n          </li>\n          <li style=\"margin-bottom: 8px;\">Analyze and configure the controller asset value if needed. Example:\n            <code>{\"idShortSubmodel\": \"OperationalData\", \"idShortSubmodelElement\": \"Parameters\", \"format\": \"value\", \"value\": {\"ti\": 17, \"td\": 2, \"kp\": 7.5}}</code>\n          </li>\n          <li style=\"margin-bottom: 8px;\">Analyze and configure the actuator asset value if needed. Example:\n            <code>{\"idShortSubmodel\": \"OperationalData\", \"idShortSubmodelElement\": \"Percentage\", \"format\": \"value\"}</code>\n          </li>\n          <li>Proceed to the next step: 9-Compose</li>\n        </ol>\n      </div>\n    </div>\n  </div>\n</body>",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": true,
        "templateScope": "local",
        "className": "",
        "x": 3730,
        "y": 180,
        "wires": [
            []
        ]
    },
    {
        "id": "53094b7afbb6be12",
        "type": "ui_template",
        "z": "13170589.bf6fd2",
        "g": "8e30bfbd13c6747d",
        "group": "8c60dcc13bef6894",
        "name": "Description compose",
        "order": 1,
        "width": 0,
        "height": 0,
        "format": "<body>\n  <!-- Imagem no topo centralizada a 100% -->\n  <div style=\"text-align: center; margin: 20px auto; max-width: 1200px; padding: 0 20px;\">\n    <img src=\"https://raw.githubusercontent.com/pontarolli/pnpr/master/figures/orchestration.svg\"\n         alt=\"Figure 9 - PnPr Orchestration\"\n         style=\"width: 100%; max-width: 100%; height: auto; border: 1px solid #e0e0e0; border-radius: 4px; box-shadow: 0 2px 4px rgba(0,0,0,0.1);\">\n  </div>\n\n  <!-- Conteúdo abaixo da imagem -->\n  <div\n    style=\"font-family: Arial, sans-serif; color: #333; max-width: 1200px; margin: 0 auto; padding: 20px; box-sizing: border-box;\">\n    <div style=\"font-size: 1.05rem; line-height: 1.7;\">\n      <h2 style=\"color: #2c3e50; margin-top: 0; border-bottom: 2px solid #eee; padding-bottom: 10px;\">Compose Step</h2>\n\n      <p style=\"margin-bottom: 15px;\">Industrial service-oriented applications mostly rely on the orchestration\n        procedure. The ninth step in Produce in the architecture PnPr figure in the Produce tab (highlighted in green) is related to the composition of\n        applications in the PnPr architecture. As in an \"orchestra\", the composer defines a sequence in which the assets will\n        relate, composing the required application in the architecture PnPr figure in the Produce tab (Asset Composer).</p>\n\n      <p style=\"margin-bottom: 25px;\">At this stage, you can compose an application manually in the backend, or select\n        applications that have already been developed and have pre-configured parameters.</p>\n\n      <div\n        style=\"background-color: #f8f9fa; border-left: 4px solid #3498db; padding: 15px; margin-bottom: 20px; border-radius: 0 4px 4px 0;\">\n        <h3 style=\"margin-top: 0; color: #2c3e50;\">Instructions:</h3>\n        <ol style=\"margin-bottom: 0; padding-left: 20px;\">\n          <li style=\"margin-bottom: 8px;\">Select the generic application you want to run from the menu. Example:\n            <strong>Process Control</strong>\n          </li>\n          <li style=\"margin-bottom: 8px;\">Click on the control loop you want to use. Example:\n            <strong>Tank Level</strong>\n          </li>\n          <li>Proceed to the next step: 10-Manage</li>\n        </ol>\n      </div>\n    </div>\n  </div>\n</body>",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": true,
        "templateScope": "local",
        "className": "",
        "x": 4480,
        "y": 180,
        "wires": [
            []
        ]
    },
    {
        "id": "b737cc241e46fcfc",
        "type": "ui_template",
        "z": "13170589.bf6fd2",
        "g": "5438809457a42244",
        "group": "b8620c0b3080bcf8",
        "name": "Description manage",
        "order": 1,
        "width": 0,
        "height": 0,
        "format": "<body>\n  <!-- Imagem no topo centralizada a 100% -->\n  <div style=\"text-align: center; margin: 20px auto; max-width: 1200px; padding: 0 20px;\">\n    <img src=\"https://raw.githubusercontent.com/pontarolli/pnpr/master/figures/manage.svg\"\n         alt=\"Figure 10 - PnPr Management\"\n         style=\"width: 100%; max-width: 100%; height: auto; border: 1px solid #e0e0e0; border-radius: 4px; box-shadow: 0 2px 4px rgba(0,0,0,0.1);\">\n  </div>\n\n  <!-- Conteúdo abaixo da imagem -->\n  <div\n    style=\"font-family: Arial, sans-serif; color: #333; max-width: 1200px; margin: 0 auto; padding: 20px; box-sizing: border-box;\">\n    <div style=\"font-size: 1.05rem; line-height: 1.7;\">\n      <h2 style=\"color: #2c3e50; margin-top: 0; border-bottom: 2px solid #eee; padding-bottom: 10px;\">Management Step\n      </h2>\n\n      <p style=\"margin-bottom: 15px;\">The tenth and last step in Produce in the architecture PnPr figure in the Produce tab (highlighted in green) occurs\n        after defining the order in the asset's composition. The execution of the application can occur manually, where\n        each step of the program is controlled and initiated by the user. Furthermore, there is automatic execution, where the program is configured to\n        operate autonomously, without direct user intervention. Actions are performed according to a set of predefined\n        instructions or rules.</p>\n\n      <p style=\"margin-bottom: 25px;\">At this stage, you can manage the application. You can start or stop the\n        application, as well as view control statistics. You can also export graph data.</p>\n\n      <div\n        style=\"background-color: #f8f9fa; border-left: 4px solid #3498db; padding: 15px; margin-bottom: 20px; border-radius: 0 4px 4px 0;\">\n        <h3 style=\"margin-top: 0; color: #2c3e50;\">Instructions:</h3>\n        <ol style=\"margin-bottom: 0; padding-left: 20px;\">\n          <li style=\"margin-bottom: 8px;\">Click <strong>Start/On</strong> to begin the application</li>\n          <li style=\"margin-bottom: 8px;\">If you want to collect data, configure the number of samples you need.\n            Example: <strong>1000 samples</strong></li>\n          <li style=\"margin-bottom: 8px;\">Click <strong>Start/On Recording</strong> to begin data collection</li>\n          <li style=\"margin-bottom: 8px;\">After finishing the recording, click <strong>Download TXT</strong> to save the\n            control chart data</li>\n          <li>If you want to stop the application, click <strong>Stop/Off</strong></li>\n        </ol>\n      </div>\n    </div>\n  </div>\n</body>",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": true,
        "templateScope": "local",
        "className": "",
        "x": 5760,
        "y": 180,
        "wires": [
            []
        ]
    },
    {
        "id": "79219bfd94fcba84",
        "type": "comment",
        "z": "13170589.bf6fd2",
        "g": "e76b2f922b1b4495",
        "name": "Tasks",
        "info": "Ricardo\n\nMatheus\n\nPendentes\n[ ] Simplificar os links in ou para gerar fluxograma automatico.\n[ ] Gerar o fluxograma de cada etapa separado, um para comunicate, outro para select, etc.\n[ ] Backup ou container da ultima versao do produce.\n\n\nConcluidas\n[x] 01 reuniao com professor sobre interface.\n[x] controlar a malha pit118.\n[x] remover kp ti do manage\n[x] help na aplicação tambem breve descrição introdutoria\n[x] deixar exibidor do aas tree com caixa cinza fixa igual json\n[x] remover aas json\n[x] deixar todos os templates com tamanho 30 de lagura e 100% automatico\n[x] no compose abstrair as sequencias e deixar o compose ja pronto, apenas controle, restante exemplo.\n[x] colocar umas imagens do aas melhores para vender a IDE\n[x] visualizador aas? ver no analyzer? coloquei o aasx-server no lugar e comentei o dos serviços\n[x] exportar os pontos do grafico json > txt pois será usado pgf plots https://www.overleaf.com/learn/latex/Pgfplots_package.\n[x] definir numero de amostras 1100 pontos caso tenha perda ou erro pra dar 1000/ duas senoides/\n[x] o controle deve ser executado na sequencia sensor controle atuador e não com varios injects, fazer interconectando com linha no node-red.\n[X] deixar o valor de setar constante igual seno e triangulo ao inves de slidebar.\n[x] gerador de função separado do controle no dashboard e node-red apesar do parametro estar interligado.\n[X] botão liga e desliga controle ou aplicação\n[x] Deixar apenas um botao de start recording e um de stop recording, para os dois graficos ficarem sincronizados. Já fiz uma conexão direta e removi a conexão dos botoes, so confirmar e deletar os botões. Obs.: Os dois botões de export pode deixar.\n\n[x] 02 reuniao com professor 2025-05-12 para mostrar os resultados no final do mes.\n[x] help do serviço igual do labview colocar no documentation como \"Description\" do aasxserver.\n[x] adicionar as rotas opcua na documentaçao do aasserver.\n        Sensors\n        opc.tcp://192.168.1.111:26116/UA/MyLittleServer       (fit116) ok\n        opc.tcp://192.168.1.111:26118/UA/MyLittleServer       (pit118) ok   \n        opc.tcp://192.168.1.111:26125/UA/MyLittleServer       (lit125) ok\n        opc.tcp://192.168.1.111:26129/UA/MyLittleServer       (pit129) ok\n        Controllers\n        opc.tcp://192.168.1.101:24116/UA/fic116_pid4          (fic116) ok\n        opc.tcp://192.168.1.101:24118/UA/pic118_pid4          (pic118) ok\n        opc.tcp://192.168.1.101:24125/UA/lic125_pid4          (lic125) ok\n        opc.tcp://192.168.1.101:24129/UA/pic129_pid4          (pic129) ok\n        Actuators\n        opc.tcp://192.168.1.114:26001/UA/MyLittleServer       (p1)\n        opc.tcp://192.168.1.114:26002/UA/MyLittleServer       (p2)\n        opc.tcp://192.168.1.114:26122/UA/MyLittleServer       (lv122)\n[x] adicionar exemplos de rotas nats e api gateway.\n[x] dar alguns exemplos de rotas.\n[x] adicionar operational requirements no registry\n[x] Sintonizar malha Pipe Pressure PIT118 amarelo, deixar como padrão salvo 9-compose em Default process control assets, e exportar dois graficos.\n[x] Sintonizar malha Tank Level LIT125 roxo, deixar como padrão salvo 9-compose em Default process control assets, e exportar dois graficos.\n[x] Sintonizar malha Reservoir Pressure PIT129 verde, deixar como padrão salvo 9-compose em Default process control assets, e exportar dois graficos.\n[x] Sintonizar malha Pipe Flow PIT116 azul, deixar como padrão salvo 9-compose em Default process control assets, e exportar dois graficos.\n[x] gerar os graficos de teste com pgfplots no latex.\n[x] gerar grafico Pipe Pressure PIT118 amarelo\n[x] gerar grafico Tank Level LIT125 roxo\n[x] gerar grafico Reservoir Pressure PIT129 verde\n[x] gerar grafico Pipe Flow PIT116 azul\n[x] organizar o codigo inteiro do node-red com largura max como referencia do comunicate para printscren 100% fullhd colocar latex.\n[x] deixar o default com td ti\n[x] tirar o nome do plug e colocar so o nome das ferramentas extras.\n[x] limpar registry exemplos carro, fazer backup naquela backup, deleta tudo que nao a ver com pnpr.\n[x] fazer backup no github e versionmento 0.0.5  colocar 1.0.0. Esta no github e no backup tese 20250513-1852-flows.json\n[x] simplificar analyze esta dando muito get set a toa, ou pode dar apenas da variavel desejada\n[x] deletar os templates do dash que nao estao usando ou ocultar apenas os que nao tem nada.\n[x] focar mais no frontend do que no backend, porque o pessoal vai saber ver bem mais diagrama de sequencia ou fluxograma do que o codigo em si.\n[x] descrever novas funcionalidades de programação, como operar. \n[x] Colocar imagens remotas localmente no container ou rasp. Imagens locais. TTentei adicionar um volume, e colocar as imagens, fiz no compose. Não consegui, perderia muito tempo pra nada, achei irrelevante podemos deixar remoto mesmo.\n[x] Pipe Pressure      PIT118 amarelo      PERFIL MISTO           lv122 20%                deixar no default todos.\n[X] Tank Level         LIT125 roxo         SENOIDE                lv122 100%\n[X] Reservoir Pressure PIT129 verde        QUADRADA PWM 50%       lv122 Nao se aplica\n[x] Pipe Flow          PIT116 azul         TRIANGULAR             lv122 100%\n[x] Deixar a definição de quantidades de amostras no dashboard em 10-manage, e adicionar essa variavel no registry.\n[x] adicionar um contador de amostras coletadas.\n[X] adicionar um led dizendo que a gravaçao começo/terminou ou switch, o mesmo para startar o controle. Pois nao da pra saber se realmente quando pressionamos se começou.\n[x] mover o tipo de onda para o select, deixando a configuração para o analize, padronização dos assets.\n[X] mover todos os tempos, intervalos, ou triggers ou repete 1x tudo para o registry e colocar link in link out, pois tem muitos que se repetem para simplificar os contadores.\n[x] adicionar operational requirements quando a malha é selecionada aparece o default.\n[x] Gerador de função tem que entrar como assets no select, podemos chamar ele de fg. Toda parte de configuração é no analyse tipo de onda, min e max.\n[x] Padrao valvula proporcional quando seleciono o controle seria melhor movermos para o node-red editor compose, antes de iniciar o controle chamo umas 3x so pra ter certeza depois inicio o controle, de acordo com a malha especifica.\n[x] deixar as fontes do dashboard de uma maneira que quando tirado o printscreen e depois reduzido para 16cm a fonte fique com 8pt.\n[x] colocar na rasp do dashboard rasp 4 64 trabalhos futuros Matheus grafana influx telegraf???\n",
        "x": 5210,
        "y": 60,
        "wires": []
    },
    {
        "id": "ee6b122147975bb7",
        "type": "ui_text_input",
        "z": "13170589.bf6fd2",
        "g": "f886b3d702b7fd02",
        "name": "Set Kp",
        "label": "Set Kp",
        "tooltip": "",
        "group": "2d655f8a0ec04e64",
        "order": 11,
        "width": 0,
        "height": 0,
        "passthru": true,
        "mode": "number",
        "delay": 300,
        "topic": "topic",
        "sendOnBlur": true,
        "className": "",
        "topicType": "msg",
        "x": 3570,
        "y": 640,
        "wires": [
            [
                "f2579f3c76716d12"
            ]
        ]
    },
    {
        "id": "3382e35985931e44",
        "type": "ui_text_input",
        "z": "13170589.bf6fd2",
        "g": "f886b3d702b7fd02",
        "name": "Set td",
        "label": "Set td",
        "tooltip": "",
        "group": "2d655f8a0ec04e64",
        "order": 13,
        "width": 0,
        "height": 0,
        "passthru": true,
        "mode": "number",
        "delay": "300",
        "topic": "topic",
        "sendOnBlur": true,
        "className": "",
        "topicType": "msg",
        "x": 3570,
        "y": 720,
        "wires": [
            [
                "5097fe75849e09d6"
            ]
        ]
    },
    {
        "id": "3e528c19e3a6212f",
        "type": "ui_text_input",
        "z": "13170589.bf6fd2",
        "g": "f886b3d702b7fd02",
        "name": "Set ti",
        "label": "Set ti",
        "tooltip": "",
        "group": "2d655f8a0ec04e64",
        "order": 12,
        "width": 0,
        "height": 0,
        "passthru": true,
        "mode": "number",
        "delay": 300,
        "topic": "topic",
        "sendOnBlur": true,
        "className": "",
        "topicType": "msg",
        "x": 3570,
        "y": 680,
        "wires": [
            [
                "98b670b82f40108f"
            ]
        ]
    },
    {
        "id": "f2579f3c76716d12",
        "type": "function",
        "z": "13170589.bf6fd2",
        "g": "f886b3d702b7fd02",
        "name": "Update registry",
        "func": "var registry = global.get(\"registry\") || {};\nregistry.controller.aas.value.kp = msg.payload;\nglobal.set(\"registry\", registry);\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 3740,
        "y": 640,
        "wires": [
            []
        ]
    },
    {
        "id": "98b670b82f40108f",
        "type": "function",
        "z": "13170589.bf6fd2",
        "g": "f886b3d702b7fd02",
        "name": "Update registry",
        "func": "var registry = global.get(\"registry\") || {};\nregistry.controller.aas.value.ti = msg.payload;\nglobal.set(\"registry\", registry);\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 3740,
        "y": 680,
        "wires": [
            []
        ]
    },
    {
        "id": "5097fe75849e09d6",
        "type": "function",
        "z": "13170589.bf6fd2",
        "g": "f886b3d702b7fd02",
        "name": "Update registry",
        "func": "var registry = global.get(\"registry\") || {};\nregistry.controller.aas.value.td = msg.payload;\nglobal.set(\"registry\", registry);\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 3740,
        "y": 720,
        "wires": [
            []
        ]
    },
    {
        "id": "190d96e2ff37b1bd",
        "type": "function",
        "z": "13170589.bf6fd2",
        "g": "9de5c19daff6b4db",
        "name": "Trigger=enable",
        "func": "// Verifica se \"Eneable\" é igual a 1\nif (flow.get(\"Eneable\") !== 1) {\n  return null; // Não faz nada e interrompe a execução\n}\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 5900,
        "y": 540,
        "wires": [
            [
                "4fd7663e631829dd",
                "859693f0609fc886",
                "b84b24dd73976a24",
                "ece6b096c976cf96"
            ]
        ]
    },
    {
        "id": "4bef1fa09334a4bf",
        "type": "function",
        "z": "13170589.bf6fd2",
        "g": "881cf02ebcef961a",
        "name": "Set Recording= true",
        "func": "flow.set(\"Recording_SpxPv\", true);\nflow.set(\"Export_SpxPv\", []);\n\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 6420,
        "y": 800,
        "wires": [
            []
        ]
    },
    {
        "id": "328f73b46992a07e",
        "type": "function",
        "z": "13170589.bf6fd2",
        "g": "881cf02ebcef961a",
        "name": "Set Recording= false",
        "func": "flow.set(\"Recording_SpxPv\", false);\nflow.set(\"Started_SpxPv\", false);\n\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 6420,
        "y": 840,
        "wires": [
            []
        ]
    },
    {
        "id": "112dd9f83c4ea002",
        "type": "ui_button",
        "z": "13170589.bf6fd2",
        "g": "881cf02ebcef961a",
        "name": "Download graph",
        "group": "b8620c0b3080bcf8",
        "order": 12,
        "width": 5,
        "height": 1,
        "passthru": false,
        "label": "📁 Download txt",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "className": "",
        "icon": "file_download",
        "payload": "",
        "payloadType": "str",
        "topic": "topic",
        "topicType": "msg",
        "x": 6240,
        "y": 880,
        "wires": [
            [
                "74d1ead1cab47ab7"
            ]
        ]
    },
    {
        "id": "4241ff57486cddd8",
        "type": "http in",
        "z": "13170589.bf6fd2",
        "g": "881cf02ebcef961a",
        "name": "Exportar JSON",
        "url": "/Export_SpxPv",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 6320,
        "y": 920,
        "wires": [
            [
                "a7c01be8231f2c0a"
            ]
        ]
    },
    {
        "id": "a7c01be8231f2c0a",
        "type": "function",
        "z": "13170589.bf6fd2",
        "g": "881cf02ebcef961a",
        "name": "data counter",
        "func": "let dada_plot1 = flow.get(\"Export_SpxPv\") || [];\n\nif (dada_plot1.length === 0) {\n    msg.payload = \"Sem dada_plot1 para exportar.\";\n    return msg;\n}\n\n// Monta linhas com contador\nlet linhas = [\"Time[s]    Setpoint[%]    Process Variable[%]\"];\n\nlet contador = 0;\nfor (let i = 0; i < dada_plot1.length; i += 2) {\n    let setpoint = \"\", pv = \"\";\n\n    // Verifica o tipo e organiza\n    if (dada_plot1[i].type === \"Setpoint\") {\n        setpoint = dada_plot1[i].value;\n        if (dada_plot1[i + 1] && dada_plot1[i + 1].type === \"Pv\") {\n            pv = dada_plot1[i + 1].value;\n        }\n    } else if (dada_plot1[i].type === \"Pv\") {\n        pv = dada_plot1[i].value;\n        if (dada_plot1[i + 1] && dada_plot1[i + 1].type === \"Setpoint\") {\n            setpoint = dada_plot1[i + 1].value;\n        }\n    }\n\n    linhas.push(`${String(contador).padEnd(9)} ${String(setpoint).padEnd(10)} ${pv}`);\n    contador++;\n}\n\nmsg.payload = linhas.join(\"\\n\");\nmsg.headers = {\n    'Content-Type': 'text/plain',\n    'Content-Disposition': 'attachment; filename=\"Export_SpxPv.txt\"'\n};\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 6490,
        "y": 920,
        "wires": [
            [
                "169c957289390c7f"
            ]
        ]
    },
    {
        "id": "169c957289390c7f",
        "type": "http response",
        "z": "13170589.bf6fd2",
        "g": "881cf02ebcef961a",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 6590,
        "y": 920,
        "wires": []
    },
    {
        "id": "5e38acde4af5c3f8",
        "type": "function",
        "z": "13170589.bf6fd2",
        "g": "881cf02ebcef961a",
        "name": "Store recorded dada",
        "func": "// Obter o valor do registro global\nvar registry = global.get(\"registry\") || {};\n\nlet recording = flow.get(\"Recording_SpxPv\") || false;\nif (!recording) return null;\n\nlet dada_plot1 = flow.get(\"Export_SpxPv\") || [];\ndada_plot1.push(msg.original);\n\n// Limite de amostras (dobro por causa de SP e PV)\nlet maxSamples = 2 * (registry.sampleRate.sample || 1000); // valor padrão de 1000 se não definido\n\nif (dada_plot1.length > maxSamples) {\n    dada_plot1.shift();\n}\n\nflow.set(\"Export_SpxPv\", dada_plot1);\n\n// Calcular progresso\nlet currentSamples = dada_plot1.length;\nlet samplesRemaining = Math.max(0, maxSamples - currentSamples);\n\n// Adicionar essas informações à msg para retorno ou debug\nmsg.payload = samplesRemaining/2;\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 6280,
        "y": 720,
        "wires": [
            [
                "621c974fc40532fc"
            ]
        ]
    },
    {
        "id": "07ab0eb0b648f817",
        "type": "ui_template",
        "z": "13170589.bf6fd2",
        "g": "881cf02ebcef961a",
        "group": "b8620c0b3080bcf8",
        "name": "url",
        "order": 14,
        "width": 5,
        "height": 1,
        "format": "<script>\n    (function(scope) {\n    let ultimaUrl = null;\n\n    scope.$watch('msg', function(msg) {\n        if (\n            msg &&\n            msg.trigger === true &&\n            typeof msg.payload === 'string' &&\n            msg.payload.startsWith('http://186.217.146.208:18105/Export_SpxPv') &&\n            msg.payload !== ultimaUrl\n        ) {\n            ultimaUrl = msg.payload;\n            window.open(msg.payload, '_blank');\n\n            // limpa o conteúdo para não reutilizar em outro momento\n            setTimeout(function() {\n                scope.send({ reset: true });\n            }, 500); // dá um pequeno delay pro link abrir primeiro\n        }\n    });\n})(scope);\n</script>",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": false,
        "templateScope": "local",
        "className": "",
        "x": 6590,
        "y": 880,
        "wires": [
            []
        ]
    },
    {
        "id": "74d1ead1cab47ab7",
        "type": "function",
        "z": "13170589.bf6fd2",
        "g": "881cf02ebcef961a",
        "name": "trigger_export",
        "func": "msg.payload = \"http://186.217.146.208:18105/Export_SpxPv?t=\" + Date.now();\nmsg.trigger = true;\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 6440,
        "y": 880,
        "wires": [
            [
                "07ab0eb0b648f817"
            ]
        ]
    },
    {
        "id": "e75092bd2395f205",
        "type": "function",
        "z": "13170589.bf6fd2",
        "g": "e5bbc6a661c17ac9",
        "name": "Set Recording= true",
        "func": "flow.set(\"Recording_MvxError\", true);\nflow.set(\"Export_MVxError\", []);\n\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 6420,
        "y": 1100,
        "wires": [
            []
        ]
    },
    {
        "id": "ed82cca06bd18c6e",
        "type": "function",
        "z": "13170589.bf6fd2",
        "g": "e5bbc6a661c17ac9",
        "name": "Set Recording= false",
        "func": "flow.set(\"Recording_MvxError\", false);\n\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 6420,
        "y": 1140,
        "wires": [
            []
        ]
    },
    {
        "id": "cf050fd721b2d40f",
        "type": "ui_button",
        "z": "13170589.bf6fd2",
        "g": "e5bbc6a661c17ac9",
        "name": "Download graph",
        "group": "b8620c0b3080bcf8",
        "order": 17,
        "width": 5,
        "height": 1,
        "passthru": false,
        "label": "📁 Download txt",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "className": "",
        "icon": "file_download",
        "payload": "",
        "payloadType": "str",
        "topic": "topic",
        "topicType": "msg",
        "x": 6240,
        "y": 1180,
        "wires": [
            [
                "09bfc96d7f077198"
            ]
        ]
    },
    {
        "id": "ebc74dc5772444a1",
        "type": "http in",
        "z": "13170589.bf6fd2",
        "g": "e5bbc6a661c17ac9",
        "name": "Exportar JSON",
        "url": "/Export_MVxError",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 6320,
        "y": 1220,
        "wires": [
            [
                "5935568508bb9b72"
            ]
        ]
    },
    {
        "id": "5935568508bb9b72",
        "type": "function",
        "z": "13170589.bf6fd2",
        "g": "e5bbc6a661c17ac9",
        "name": "data counter",
        "func": "let dada_plot2 = flow.get(\"Export_MVxError\") || [];\n\nif (dada_plot2.length === 0) {\n    msg.payload = \"Sem dada_plot2 para exportar.\";\n    return msg;\n}\n\n// Monta linhas com contador\nlet linhas = [\"Time[s]    Manipulated Variable[%]    Error[%]\"];\n\nlet contador = 0;\nfor (let i = 0; i < dada_plot2.length; i += 2) {\n    let Mv = \"\", Error = \"\";\n\n    // Verifica o tipo e organiza\n    if (dada_plot2[i].type === \"Mv\") {\n        Mv = dada_plot2[i].value;\n        if (dada_plot2[i + 1] && dada_plot2[i + 1].type === \"Error\") {\n            Error = dada_plot2[i + 1].value;\n        }\n    } else if (dada_plot2[i].type === \"Error\") {\n        Error = dada_plot2[i].value;\n        if (dada_plot2[i + 1] && dada_plot2[i + 1].type === \"Mv\") {\n            Mv = dada_plot2[i + 1].value;\n        }\n    }\n\n    linhas.push(`${String(contador).padEnd(9)} ${String(Mv).padEnd(10)} ${Error}`);\n    contador++;\n}\n\nmsg.payload = linhas.join(\"\\n\");\nmsg.headers = {\n    'Content-Type': 'text/plain',\n    'Content-Disposition': 'attachment; filename=\"Export_MVxError.txt\"'\n};\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 6490,
        "y": 1220,
        "wires": [
            [
                "335e4bf44542083a"
            ]
        ]
    },
    {
        "id": "335e4bf44542083a",
        "type": "http response",
        "z": "13170589.bf6fd2",
        "g": "e5bbc6a661c17ac9",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 6590,
        "y": 1220,
        "wires": []
    },
    {
        "id": "756ce7cd2bb19185",
        "type": "function",
        "z": "13170589.bf6fd2",
        "g": "e5bbc6a661c17ac9",
        "name": "Store recorded dada",
        "func": "// Obter o valor do registro global\nvar registry = global.get(\"registry\") || {};\n\nlet recording = flow.get(\"Recording_MvxError\") || false;\nif (!recording) return null;\n\nlet dada_plot2 = flow.get(\"Export_MVxError\") || [];\ndada_plot2.push(msg.original);\nif (dada_plot2.length > 2400) {\n    dada_plot2.shift();\n}\nflow.set(\"Export_MVxError\", dada_plot2);\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 6280,
        "y": 1020,
        "wires": [
            []
        ]
    },
    {
        "id": "34dc3c0c85566eb1",
        "type": "ui_template",
        "z": "13170589.bf6fd2",
        "g": "e5bbc6a661c17ac9",
        "group": "b8620c0b3080bcf8",
        "name": "url",
        "order": 19,
        "width": 5,
        "height": 1,
        "format": "<script>\n    (function(scope) {\n    let ultimaUrl = null;\n\n    scope.$watch('msg', function(msg) {\n        if (\n            msg &&\n            msg.trigger === true &&\n            typeof msg.payload === 'string' &&\n            msg.payload.startsWith('http://186.217.146.208:18105/Export_MVxError') &&\n            msg.payload !== ultimaUrl\n        ) {\n            ultimaUrl = msg.payload;\n            window.open(msg.payload, '_blank');\n\n            // limpa o conteúdo para não reutilizar em outro momento\n            setTimeout(function() {\n                scope.send({ reset: true });\n            }, 500); // dá um pequeno delay pro link abrir primeiro\n        }\n    });\n})(scope);\n</script>",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": false,
        "templateScope": "local",
        "className": "",
        "x": 6590,
        "y": 1180,
        "wires": [
            []
        ]
    },
    {
        "id": "09bfc96d7f077198",
        "type": "function",
        "z": "13170589.bf6fd2",
        "g": "e5bbc6a661c17ac9",
        "name": "trigger_export",
        "func": "msg.payload = \"http://186.217.146.208:18105/Export_MVxError?t=\" + Date.now();\nmsg.trigger = true;\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 6440,
        "y": 1180,
        "wires": [
            [
                "34dc3c0c85566eb1"
            ]
        ]
    },
    {
        "id": "be293e654825f56a",
        "type": "ui_template",
        "z": "13170589.bf6fd2",
        "g": "43dfc30da9bd76e6",
        "group": "52431512732beee1",
        "name": "Description",
        "order": 1,
        "width": 0,
        "height": 0,
        "format": "<div\n    style=\"font-family: Arial, sans-serif; color: #333; width: 100%; padding: 0 15px; box-sizing: border-box; display: flex; flex-direction: column; gap: 20px;\">\n\n    <div style=\"font-size: 1rem; line-height: 1.6; text-align: justify;\">\n        <p>Portainer is an open-source graphical user interface designed to simplify the administration of Docker environments.\n        With Portainer, users get an intuitive, centralized view of their Docker containers, images, volumes, and networks,\n        making it easy to manage complex environments in a visual and accessible way.</p>\n    </div>\n\n    <!-- Div com o iframe -->\n    <div style=\"width: 100%; height: 80vh; border: 1px solid #ccc; box-sizing: border-box;\">\n        <iframe src=\"http://186.217.146.208:9006/\" style=\"width: 100%; height: 100%; border: none;\"></iframe>\n    </div>\n\n</div>\n\n<!-- Tive que colocar rota remota senão a pagina so apareceia localmente -->",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": true,
        "templateScope": "local",
        "className": "",
        "x": 150,
        "y": 180,
        "wires": [
            []
        ]
    },
    {
        "id": "0153d6773624f820",
        "type": "ui_template",
        "z": "13170589.bf6fd2",
        "g": "6f2273ab3ae9c659",
        "group": "1d7bcb74f022a15d",
        "name": "Description",
        "order": 1,
        "width": 30,
        "height": "100",
        "format": "<div\n    style=\"font-family: Arial, sans-serif; color: #333; width: 100%; padding: 0 15px; box-sizing: border-box; display: flex; flex-direction: column; gap: 20px;\">\n\n    <div style=\"font-size: 1rem; line-height: 1.6; text-align: justify;\">\n        <p>AASX Server is a companion application to AASX Package Explorer. It provides a local service to host and serve AAS\n        packages. The Core version exposes endpoints for REST, OPC UA and MQTT protocols. The GUI version offers the same\n        functionality and additionally uses Blazor Framework to provide a GUI in the browser for exploring AASX Packages.</p>\n    </div>\n\n    <!-- Div com o iframe -->\n    <div style=\"width: 100%; height: 80vh; border: 1px solid #ccc; box-sizing: border-box;\">\n        <iframe src=\"http://186.217.146.208:5101/\" style=\"width: 100%; height: 100%; border: none;\"></iframe>\n    </div>\n\n</div>",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": true,
        "templateScope": "local",
        "className": "",
        "x": 510,
        "y": 180,
        "wires": [
            []
        ]
    },
    {
        "id": "d1153840c27505f8",
        "type": "function",
        "z": "13170589.bf6fd2",
        "g": "8ebf985bfdd08116",
        "name": "Sensor",
        "func": "// Verifica se \"Eneable\" é igual a 1\nif (flow.get(\"Eneable\") !== 1) {\n    return null; // Não faz nada e interrompe a execução\n}\n\nvar registry = global.get(\"registry\") || {};\n\nmsg.action = `${registry.sensor.service.name}.${registry.sensor.service.action}`\n\nmsg.payload = {\n    \"idShortSubmodel\": registry.sensor.aas.idShortSubmodel,\n    \"idShortSubmodelElement\": registry.sensor.aas.idShortSubmodelElement,\n    \"format\": registry.sensor.aas.format\n}\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 4620,
        "y": 660,
        "wires": [
            [
                "b59cdbcba8dee990"
            ]
        ]
    },
    {
        "id": "b59cdbcba8dee990",
        "type": "moleculer-call",
        "z": "13170589.bf6fd2",
        "g": "8ebf985bfdd08116",
        "broker": "15fdc347.1238cd",
        "name": "",
        "topic": "",
        "options": "{}",
        "x": 4750,
        "y": 660,
        "wires": [
            [
                "e4e22826b0d5a36c"
            ]
        ]
    },
    {
        "id": "e4e22826b0d5a36c",
        "type": "function",
        "z": "13170589.bf6fd2",
        "g": "8ebf985bfdd08116",
        "name": "Compare",
        "func": "// let respostaAtual = msg.payload;\n// let ultimaResposta = flow.get(\"ultimaResposta\") || null;\n\n// msg.igual = respostaAtual === ultimaResposta;\n\n// if (!msg.igual) {\n//     flow.set(\"ultimaResposta\", respostaAtual);\n//     flow.set(\"tentativas\", 0);\n// } else {\n//     let tentativas = flow.get(\"tentativas\") || 0;\n//     tentativas++;\n//     flow.set(\"tentativas\", tentativas);\n//     msg.tentativas = tentativas;\n//     msg.parar = tentativas >= 5;\n// }\n\n// return msg;\n// Comparar com anterior\nlet respostaAtual = msg.payload;\nlet ultimaResposta = flow.get(\"ultimaResposta\") || null;\n\nif (respostaAtual === \"00.00\" || \"0\") {\n    // Sempre aceita \"00.00\", sem reset ou repetição\n    msg.igual = false;\n    msg.forcado = true; // usado só pra debug se quiser\n    return msg;\n}\n\nmsg.igual = respostaAtual === ultimaResposta;\n\nif (!msg.igual) {\n    flow.set(\"ultimaResposta\", respostaAtual);\n    flow.set(\"tentativas\", 0);\n} else {\n    let tentativas = flow.get(\"tentativas\") || 0;\n    tentativas++;\n    flow.set(\"tentativas\", tentativas);\n    msg.tentativas = tentativas;\n    msg.parar = tentativas >= 5;\n}\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 4880,
        "y": 660,
        "wires": [
            [
                "f6ad54ba6dfa2c4b"
            ]
        ]
    },
    {
        "id": "f6ad54ba6dfa2c4b",
        "type": "switch",
        "z": "13170589.bf6fd2",
        "g": "8ebf985bfdd08116",
        "name": "equal?",
        "property": "igual",
        "propertyType": "msg",
        "rules": [
            {
                "t": "false"
            },
            {
                "t": "true"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 5010,
        "y": 660,
        "wires": [
            [
                "bba541518ea0022c"
            ],
            [
                "142618608284cbf6"
            ]
        ]
    },
    {
        "id": "142618608284cbf6",
        "type": "switch",
        "z": "13170589.bf6fd2",
        "g": "8ebf985bfdd08116",
        "name": "stop?",
        "property": "parar",
        "propertyType": "msg",
        "rules": [
            {
                "t": "false"
            },
            {
                "t": "true"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 5010,
        "y": 720,
        "wires": [
            [
                "d1153840c27505f8"
            ],
            []
        ]
    },
    {
        "id": "3f0d27c43cc9e930",
        "type": "comment",
        "z": "13170589.bf6fd2",
        "g": "6f2273ab3ae9c659",
        "name": "",
        "info": "",
        "x": 660,
        "y": 180,
        "wires": []
    },
    {
        "id": "29795accd9989929",
        "type": "comment",
        "z": "13170589.bf6fd2",
        "g": "43dfc30da9bd76e6",
        "name": "",
        "info": "",
        "x": 300,
        "y": 180,
        "wires": []
    },
    {
        "id": "3628fd21648b00dc",
        "type": "ui_button",
        "z": "13170589.bf6fd2",
        "g": "1c0d55350b380884",
        "name": "Start Recording",
        "group": "b8620c0b3080bcf8",
        "order": 5,
        "width": 5,
        "height": 1,
        "passthru": false,
        "label": "Start Recording",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "className": "",
        "icon": "",
        "payload": "true",
        "payloadType": "bool",
        "topic": "topic",
        "topicType": "msg",
        "x": 5740,
        "y": 980,
        "wires": [
            [
                "dea34522d5a80aeb",
                "4bef1fa09334a4bf",
                "e75092bd2395f205"
            ]
        ]
    },
    {
        "id": "3c66d6f1ffd80879",
        "type": "ui_button",
        "z": "13170589.bf6fd2",
        "g": "1c0d55350b380884",
        "name": "Start Recording",
        "group": "b8620c0b3080bcf8",
        "order": 6,
        "width": 5,
        "height": 1,
        "passthru": false,
        "label": "Stop Recording",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "className": "",
        "icon": "",
        "payload": "false",
        "payloadType": "bool",
        "topic": "topic",
        "topicType": "msg",
        "x": 5740,
        "y": 1020,
        "wires": [
            [
                "dea34522d5a80aeb",
                "328f73b46992a07e",
                "ed82cca06bd18c6e"
            ]
        ]
    },
    {
        "id": "e4ce3d3f478adbfc",
        "type": "ui_button",
        "z": "13170589.bf6fd2",
        "g": "63f2a9cb575789f8",
        "name": "Button ON",
        "group": "b8620c0b3080bcf8",
        "order": 2,
        "width": 5,
        "height": 1,
        "passthru": false,
        "label": "ON",
        "tooltip": "",
        "color": "",
        "bgcolor": "green",
        "className": "Button_ON",
        "icon": "",
        "payload": "true",
        "payloadType": "bool",
        "topic": "topic",
        "topicType": "msg",
        "x": 5750,
        "y": 320,
        "wires": [
            [
                "c13cf6ad06a4b0f2",
                "efb647f0b099275b"
            ]
        ]
    },
    {
        "id": "260f9faa6028f7fb",
        "type": "ui_button",
        "z": "13170589.bf6fd2",
        "g": "63f2a9cb575789f8",
        "name": "Button OFF",
        "group": "b8620c0b3080bcf8",
        "order": 3,
        "width": 5,
        "height": 1,
        "passthru": false,
        "label": "OFF",
        "tooltip": "",
        "color": "",
        "bgcolor": "red",
        "className": "Button_OFF",
        "icon": "",
        "payload": "false",
        "payloadType": "bool",
        "topic": "topic",
        "topicType": "msg",
        "x": 5750,
        "y": 260,
        "wires": [
            [
                "c13cf6ad06a4b0f2",
                "32628e63c595fc1d"
            ]
        ]
    },
    {
        "id": "c13cf6ad06a4b0f2",
        "type": "function",
        "z": "13170589.bf6fd2",
        "g": "63f2a9cb575789f8",
        "name": "Flow status",
        "func": "     if  (msg.payload === true) {\n         flow.set(\"Eneable\", 1)\n         msg.payload = \"ativado\"\n         return msg;\n\n      } else {\n         flow.set(\"Eneable\", 0)\n         msg.payload = \"desativado\"\n         return msg;\n      }\n   ",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 6010,
        "y": 300,
        "wires": [
            []
        ]
    },
    {
        "id": "fa992894d136ff1d",
        "type": "function",
        "z": "13170589.bf6fd2",
        "g": "63f2a9cb575789f8",
        "name": "Trigger=enable",
        "func": " if(msg.enable == 1){\n   msg.payload = true\n   return msg;\n }else{\n    msg.payload = false\n    return msg;\n }",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 5920,
        "y": 380,
        "wires": [
            [
                "39ed40412daedcda"
            ]
        ]
    },
    {
        "id": "08b21281262cc826",
        "type": "function",
        "z": "13170589.bf6fd2",
        "g": "6d311eefaabc1477",
        "name": "updateRegistry",
        "func": "// Obter o valor do registro global\nvar registry = global.get(\"registry\") || {};\n\n// Garante que a estrutura esperada exista\nregistry.sensor = registry.sensor || {};\nregistry.sensor.aas = registry.sensor.aas || {};\n\n// Atualiza dinamicamente a propriedade com base no msg.topic\n// Se msg.topic for \"format\"\n// registry.sensor.aas[\"format\"] = msg.payload; daria isso\n// registry.sensor.aas.format = msg.payload; que é equivalente a isso\n\nif (msg.topic && typeof msg.payload !== 'undefined') {\n    registry.sensor.aas[msg.topic] = msg.payload;\n}\n\n// Atualiza o valor global\nglobal.set(\"registry\", registry);\n\n// Retorna a mensagem\nreturn msg;\n\n\n\n\n// observação\n// Em JavaScript, há duas formas principais de acessar propriedades de um objeto:\n\n// 1. Notação por ponto(estática):\n// obj.propriedade = valor;\n// Usada quando você conhece o nome da propriedade de antemão.\n\n// 2. Notação por colchetes(dinâmica):\n// obj[\"propriedade\"] = valor;\n// Ou, se você tem o nome da propriedade numa variável:\n// obj[minhaVariavel] = valor;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 3720,
        "y": 300,
        "wires": [
            []
        ]
    },
    {
        "id": "dea34522d5a80aeb",
        "type": "ui_led",
        "z": "13170589.bf6fd2",
        "g": "1c0d55350b380884",
        "order": 7,
        "group": "b8620c0b3080bcf8",
        "width": 5,
        "height": 1,
        "label": "RECORDING",
        "labelPlacement": "left",
        "labelAlignment": "center",
        "colorForValue": [
            {
                "color": "#ff0000",
                "value": "false",
                "valueType": "bool"
            },
            {
                "color": "#008000",
                "value": "true",
                "valueType": "bool"
            }
        ],
        "allowColorForValueInMessage": false,
        "shape": "square",
        "showGlow": true,
        "name": "Recording status led",
        "x": 5960,
        "y": 1000,
        "wires": []
    },
    {
        "id": "39ed40412daedcda",
        "type": "ui_led",
        "z": "13170589.bf6fd2",
        "g": "63f2a9cb575789f8",
        "order": 4,
        "group": "b8620c0b3080bcf8",
        "width": 5,
        "height": 1,
        "label": "ON/OFF",
        "labelPlacement": "left",
        "labelAlignment": "center",
        "colorForValue": [
            {
                "color": "#ff0000",
                "value": "false",
                "valueType": "bool"
            },
            {
                "color": "#008000",
                "value": "true",
                "valueType": "bool"
            }
        ],
        "allowColorForValueInMessage": false,
        "shape": "square",
        "showGlow": true,
        "name": "",
        "x": 6070,
        "y": 380,
        "wires": []
    },
    {
        "id": "8728007f365baeb1",
        "type": "ui_text_input",
        "z": "13170589.bf6fd2",
        "g": "1c0d55350b380884",
        "name": "Set number of samples",
        "label": "Set number of samples",
        "tooltip": "",
        "group": "b8620c0b3080bcf8",
        "order": 8,
        "width": 5,
        "height": 1,
        "passthru": true,
        "mode": "number",
        "delay": 300,
        "topic": "topic",
        "sendOnBlur": true,
        "className": "",
        "topicType": "msg",
        "x": 5970,
        "y": 820,
        "wires": [
            []
        ]
    },
    {
        "id": "10846b23e33e3c13",
        "type": "function",
        "z": "13170589.bf6fd2",
        "g": "1c0d55350b380884",
        "name": "Update registry",
        "func": "// Obter o valor do registro global\nvar registry = global.get(\"registry\") || {};\n\n// Atualizar o idShortAsset com o valor vindo de msg.payload\nregistry.sampleRate.sample = msg.payload; \n\n// Atualizar o valor global\nglobal.set(\"registry\", registry);\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 5940,
        "y": 860,
        "wires": [
            []
        ]
    },
    {
        "id": "621c974fc40532fc",
        "type": "ui_text",
        "z": "13170589.bf6fd2",
        "g": "881cf02ebcef961a",
        "group": "b8620c0b3080bcf8",
        "order": 9,
        "width": 10,
        "height": 1,
        "name": "Number of Remaning Samples",
        "label": "Number of Remaning Samples:",
        "format": "{{msg.payload}}",
        "layout": "row-right",
        "className": "",
        "style": false,
        "font": "",
        "fontSize": 16,
        "color": "#000000",
        "x": 6530,
        "y": 720,
        "wires": []
    },
    {
        "id": "d64cc8c2ec354d58",
        "type": "ui_dropdown",
        "z": "13170589.bf6fd2",
        "g": "bb55775566b42bd3",
        "name": "valveSubmodel",
        "label": "Submodel:",
        "tooltip": "",
        "place": "Select",
        "group": "2d655f8a0ec04e64",
        "order": 25,
        "width": 0,
        "height": 0,
        "passthru": true,
        "multiple": false,
        "options": [
            {
                "label": "OperationalData",
                "value": "OperationalData",
                "type": "str"
            },
            {
                "label": "None",
                "value": "",
                "type": "str"
            }
        ],
        "topic": "idShortSubmodel",
        "topicType": "str",
        "className": "",
        "x": 3520,
        "y": 1840,
        "wires": [
            [
                "4118a977de196312"
            ]
        ]
    },
    {
        "id": "4118a977de196312",
        "type": "function",
        "z": "13170589.bf6fd2",
        "g": "bb55775566b42bd3",
        "name": "Update registry",
        "func": "// // Obter o valor do registro global\n// var registry = global.get(\"registry\") || {};\n\n// // Garante que a estrutura esperada exista\n// registry.actuator = registry.valve.operationalRequirements.proportionalValve || {};\n// registry.actuator.aas = registry.valve.operationalRequirements.proportionalValve.aas || {};\n\n// if (msg.topic && typeof msg.payload !== 'undefined') {\n//     registry.valve.operationalRequirements.proportionalValve.aas[msg.topic] = msg.payload;\n// }\n\n// // Atualiza o valor global\n// global.set(\"registry\", registry);\n\n// // Retorna a mensagem\n// return msg;\n\n\n\n\n// // observação\n// // Em JavaScript, há duas formas principais de acessar propriedades de um objeto:\n\n// // 1. Notação por ponto(estática):\n// // obj.propriedade = valor;\n// // Usada quando você conhece o nome da propriedade de antemão.\n\n// // 2. Notação por colchetes(dinâmica):\n// // obj[\"propriedade\"] = valor;\n// // Ou, se você tem o nome da propriedade numa variável:\n// // obj[minhaVariavel] = valor;\n\n\n\n// Obter o valor do registro global\nvar registry = global.get(\"registry\") || {};\n\n// Garante que a estrutura esperada exista\nregistry.actuator = registry.valve.operationalRequirements.proportionalValve || {};\nregistry.actuator.aas = registry.valve.operationalRequirements.proportionalValve.aas || {};\n\nif (msg.topic && typeof msg.payload !== 'undefined') {\n    // Se o tópico for \"value\", converte o payload para string\n    if (msg.topic === \"value\") {\n        registry.valve.operationalRequirements.proportionalValve.aas[msg.topic] = String(msg.payload);\n    } else {\n        registry.valve.operationalRequirements.proportionalValve.aas[msg.topic] = msg.payload;\n    }\n}\n\n// Atualiza o valor global\nglobal.set(\"registry\", registry);\n\n// Retorna a mensagem\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 3720,
        "y": 1880,
        "wires": [
            []
        ]
    },
    {
        "id": "79b5123eb596c231",
        "type": "ui_dropdown",
        "z": "13170589.bf6fd2",
        "g": "bb55775566b42bd3",
        "name": "valveElement",
        "label": "Element:",
        "tooltip": "",
        "place": "Select",
        "group": "2d655f8a0ec04e64",
        "order": 26,
        "width": 0,
        "height": 0,
        "passthru": true,
        "multiple": false,
        "options": [
            {
                "label": "Percentage",
                "value": "Percentage",
                "type": "str"
            },
            {
                "label": "Payload",
                "value": "Payload",
                "type": "str"
            },
            {
                "label": "Parameters",
                "value": "Parameters",
                "type": "str"
            }
        ],
        "topic": "idShortSubmodelElement",
        "topicType": "str",
        "className": "",
        "x": 3520,
        "y": 1880,
        "wires": [
            [
                "4118a977de196312"
            ]
        ]
    },
    {
        "id": "c2adb4745895712b",
        "type": "function",
        "z": "13170589.bf6fd2",
        "g": "bb55775566b42bd3",
        "name": "Read (registry)",
        "func": "// Obter o objeto registry do escopo global\nvar registry = global.get(\"registry\") || {};\n\nmsg.action = `${registry.valve.operationalRequirements.proportionalValve.service.name}.${registry.valve.operationalRequirements.proportionalValve.service.action}`\n\nmsg.payload = {\n    idShortAsset: registry.valve.operationalRequirements.proportionalValve.aas.idShortAsset || '',\n    idShortSubmodel: registry.valve.operationalRequirements.proportionalValve.aas.idShortSubmodel || '',\n    idShortSubmodelElement: registry.valve.operationalRequirements.proportionalValve.aas.idShortSubmodelElement || '',\n    value: registry.valve.operationalRequirements.proportionalValve.aas.value || ''\n};\n\nreturn msg;\n\n\n\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 3500,
        "y": 2000,
        "wires": [
            [
                "694894269f0f9b45",
                "6f29f36c87f70618"
            ]
        ]
    },
    {
        "id": "694894269f0f9b45",
        "type": "ui_template",
        "z": "13170589.bf6fd2",
        "g": "bb55775566b42bd3",
        "group": "2d655f8a0ec04e64",
        "name": "valveRegistry",
        "order": 28,
        "width": 0,
        "height": 0,
        "format": "<div class=\"json-container\">\n    <!-- Título -->\n    <h3 class=\"json-title\" style=\"text-align: center; margin-bottom: 10px; color: #333;\">Valve (registry)</h3>\n\n    <!-- Exibição do JSON -->\n    <div class=\"json-display\">\n        <pre>{{msg.payload | json}}</pre>\n    </div>\n</div>\n\n<style>\n    .json-display {\n        white-space: pre-wrap;\n        /* Permite a quebra de linha para JSON formatado */\n        max-height: 300px;\n        /* Ajuste a altura máxima, se desejado */\n        background-color: #f5f5f5;\n        /* Cor de fundo para destacar o JSON */\n        font-family: monospace;\n    }\n\n    .json-title {\n        font-family: Arial, sans-serif;\n        font-size: 1.2em;\n        font-weight: bold;\n    }\n</style>",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": true,
        "templateScope": "local",
        "className": "",
        "x": 3700,
        "y": 1980,
        "wires": [
            []
        ]
    },
    {
        "id": "a43f797f2cfeea15",
        "type": "ui_dropdown",
        "z": "13170589.bf6fd2",
        "g": "67d58169ec97f73b",
        "name": "valves",
        "label": "Valves:",
        "tooltip": "",
        "place": "Select",
        "group": "be29d35420eb4c02",
        "order": 18,
        "width": 6,
        "height": 1,
        "passthru": true,
        "multiple": false,
        "options": [],
        "payload": "",
        "topic": "valves",
        "topicType": "str",
        "className": "",
        "x": 2790,
        "y": 380,
        "wires": [
            [
                "151013cdaadfd467"
            ]
        ]
    },
    {
        "id": "c67a71bb5a4e2a72",
        "type": "ui_text",
        "z": "13170589.bf6fd2",
        "g": "7a56353afcae4d8d",
        "group": "be29d35420eb4c02",
        "order": 20,
        "width": 4,
        "height": 1,
        "name": "valveSelected",
        "label": "Selected:",
        "format": "{{msg.payload.registry.valve.operationalRequirements.proportionalValve.aas.idShortAsset}}",
        "layout": "row-spread",
        "className": "",
        "style": false,
        "font": "",
        "fontSize": 16,
        "color": "#000000",
        "x": 2820,
        "y": 660,
        "wires": []
    },
    {
        "id": "6f29f36c87f70618",
        "type": "ui_text",
        "z": "13170589.bf6fd2",
        "g": "bb55775566b42bd3",
        "group": "2d655f8a0ec04e64",
        "order": 24,
        "width": 0,
        "height": 0,
        "name": "valveSelected",
        "label": "Valve:",
        "format": "{{msg.payload.idShortAsset}}",
        "layout": "row-spread",
        "className": "",
        "style": false,
        "font": "",
        "fontSize": 16,
        "color": "#000000",
        "x": 3700,
        "y": 2020,
        "wires": []
    },
    {
        "id": "1ef7e2c062efdc65",
        "type": "ui_text_input",
        "z": "13170589.bf6fd2",
        "g": "bb55775566b42bd3",
        "name": "valveValue",
        "label": "Value:",
        "tooltip": "",
        "group": "2d655f8a0ec04e64",
        "order": 27,
        "width": 0,
        "height": 0,
        "passthru": true,
        "mode": "number",
        "delay": "300",
        "topic": "",
        "sendOnBlur": true,
        "className": "",
        "topicType": "str",
        "x": 3510,
        "y": 1920,
        "wires": [
            [
                "4118a977de196312"
            ]
        ]
    },
    {
        "id": "481fda9a7d808b62",
        "type": "inject",
        "z": "13170589.bf6fd2",
        "g": "f67e7e89a114723f",
        "name": "Interval 10s",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "10",
        "crontab": "",
        "once": true,
        "onceDelay": "2",
        "topic": "",
        "payload": "{}",
        "payloadType": "json",
        "x": 1550,
        "y": 260,
        "wires": [
            [
                "0467ed2a0f2d46fa",
                "e33f45061eadd986",
                "2cc876c05e2eac32"
            ]
        ]
    },
    {
        "id": "85e5c18a582916f1",
        "type": "ui_template",
        "z": "13170589.bf6fd2",
        "g": "6d311eefaabc1477",
        "group": "2d655f8a0ec04e64",
        "name": "sensorRegistry",
        "order": 6,
        "width": 0,
        "height": 0,
        "format": "<div class=\"json-container\">\n    <!-- Título -->\n    <h3 class=\"json-title\" style=\"text-align: center; margin-bottom: 10px; color: #333;\">Sensor (registry)</h3>\n\n    <!-- Exibição do JSON -->\n    <div class=\"json-display\">\n        <pre>{{msg.payload | json}}</pre>\n    </div>\n</div>\n\n<style>\n    .json-display {\n        white-space: pre-wrap;\n        /* Permite a quebra de linha para JSON formatado */\n        max-height: 300px;\n        /* Ajuste a altura máxima, se desejado */\n        background-color: #f5f5f5;\n        /* Cor de fundo para destacar o JSON */\n        font-family: monospace;\n    }\n\n    .json-title {\n        font-family: Arial, sans-serif;\n        font-size: 1.2em;\n        font-weight: bold;\n    }\n</style>",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": true,
        "templateScope": "local",
        "className": "Sensor",
        "x": 3710,
        "y": 380,
        "wires": [
            []
        ]
    },
    {
        "id": "91b4e261f1e41af1",
        "type": "ui_dropdown",
        "z": "13170589.bf6fd2",
        "g": "67d58169ec97f73b",
        "name": "functionGenerators",
        "label": "Functions:",
        "tooltip": "",
        "place": "Select",
        "group": "be29d35420eb4c02",
        "order": 10,
        "width": 6,
        "height": 1,
        "passthru": true,
        "multiple": false,
        "options": [
            {
                "label": "fg",
                "value": "fg",
                "type": "str"
            },
            {
                "label": "fg2",
                "value": "fg2",
                "type": "str"
            }
        ],
        "payload": "",
        "topic": "functionGenerators",
        "topicType": "str",
        "className": "",
        "x": 2830,
        "y": 420,
        "wires": [
            [
                "151013cdaadfd467"
            ]
        ]
    },
    {
        "id": "68f063302692ecb2",
        "type": "inject",
        "z": "13170589.bf6fd2",
        "g": "63f2a9cb575789f8",
        "name": "Eneable",
        "props": [
            {
                "p": "enable",
                "v": "Eneable",
                "vt": "flow"
            }
        ],
        "repeat": "0.5",
        "crontab": "",
        "once": false,
        "onceDelay": "",
        "topic": "",
        "x": 5760,
        "y": 380,
        "wires": [
            [
                "fa992894d136ff1d"
            ]
        ]
    },
    {
        "id": "c6a8d69f2b824280",
        "type": "ui_text",
        "z": "13170589.bf6fd2",
        "g": "7a56353afcae4d8d",
        "group": "be29d35420eb4c02",
        "order": 12,
        "width": 4,
        "height": 1,
        "name": "functionSelected",
        "label": "Selected:",
        "format": "{{msg.payload.registry.functionGenerator.function.name}}",
        "layout": "row-spread",
        "className": "",
        "style": false,
        "font": "",
        "fontSize": 16,
        "color": "#000000",
        "x": 2830,
        "y": 700,
        "wires": []
    },
    {
        "id": "12ccf96f3149f89c",
        "type": "inject",
        "z": "13170589.bf6fd2",
        "g": "1c0d55350b380884",
        "name": "Sample Rate",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "1200",
        "payloadType": "num",
        "x": 5750,
        "y": 820,
        "wires": [
            [
                "8728007f365baeb1",
                "10846b23e33e3c13"
            ]
        ]
    },
    {
        "id": "126d236157168818",
        "type": "inject",
        "z": "13170589.bf6fd2",
        "g": "2e9f93364ef00f8c",
        "name": "Interval 1s",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "1",
        "crontab": "",
        "once": false,
        "onceDelay": "",
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 4510,
        "y": 300,
        "wires": [
            [
                "fdfaab2921229013"
            ]
        ]
    },
    {
        "id": "1dbd744cd5a77763",
        "type": "inject",
        "z": "13170589.bf6fd2",
        "g": "9de5c19daff6b4db",
        "name": "Interval 1s",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "1",
        "crontab": "",
        "once": false,
        "onceDelay": "",
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 5770,
        "y": 540,
        "wires": [
            [
                "190d96e2ff37b1bd"
            ]
        ]
    },
    {
        "id": "fbc5e17923fd20d7",
        "type": "inject",
        "z": "13170589.bf6fd2",
        "g": "8ebf985bfdd08116",
        "name": "Interval 1s",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "1",
        "crontab": "",
        "once": false,
        "onceDelay": "",
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 4450,
        "y": 660,
        "wires": [
            [
                "d1153840c27505f8"
            ]
        ]
    },
    {
        "id": "22227849759470ef",
        "type": "ui_dropdown",
        "z": "13170589.bf6fd2",
        "g": "5ed9b33ae8b164d1",
        "name": "waveType",
        "label": "Wave type:",
        "tooltip": "",
        "place": "Select",
        "group": "2d655f8a0ec04e64",
        "order": 21,
        "width": 0,
        "height": 0,
        "passthru": true,
        "multiple": false,
        "options": [
            {
                "label": "Sine",
                "value": 1,
                "type": "num"
            },
            {
                "label": "Step",
                "value": 2,
                "type": "num"
            },
            {
                "label": "Triangle",
                "value": 3,
                "type": "num"
            },
            {
                "label": "Mixed profile",
                "value": 4,
                "type": "num"
            }
        ],
        "payload": "",
        "topic": "topic",
        "topicType": "msg",
        "className": "",
        "x": 3500,
        "y": 1060,
        "wires": [
            [
                "1ab4168162c05c30"
            ]
        ]
    },
    {
        "id": "1ab4168162c05c30",
        "type": "switch",
        "z": "13170589.bf6fd2",
        "g": "5ed9b33ae8b164d1",
        "name": "",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "1",
                "vt": "num"
            },
            {
                "t": "eq",
                "v": "2",
                "vt": "num"
            },
            {
                "t": "eq",
                "v": "3",
                "vt": "num"
            },
            {
                "t": "eq",
                "v": "4",
                "vt": "num"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 4,
        "x": 3650,
        "y": 1060,
        "wires": [
            [
                "13068d0c509d561d",
                "f828006e2789cf17"
            ],
            [
                "13068d0c509d561d",
                "f828006e2789cf17"
            ],
            [
                "13068d0c509d561d",
                "f828006e2789cf17"
            ],
            [
                "13068d0c509d561d",
                "f828006e2789cf17"
            ]
        ]
    },
    {
        "id": "2a4d588af3072b95",
        "type": "function",
        "z": "13170589.bf6fd2",
        "g": "cc7d4f3d94349fc4",
        "name": "Sinus",
        "func": "var registry = global.get(\"registry\") || {};\n\n//Sine wave function calculation\nvar x = flow.get(\"My_arc001\") + ((Math.PI * 2)/650); // ===300 points (seconds) in the arc\nflow.set(\"My_arc001\", x)\nvar SinGen = Math.sin(x);  // === It varies from +1 to -1\nif (flow.get(\"My_arc001\") >= (Math.PI * 2)) { flow.set(\"My_arc001\", 0.0) };\n\n//Scaling [ Y-Y0 = m.(X-X0) ]\nvar VoutMax = registry.functionGenerator.wave.crest;\nvar VoutMin = registry.functionGenerator.wave.trough;\nvar AngCoef = 2 / (VoutMax - VoutMin);\nvar Vout = ((SinGen+1)/AngCoef) + VoutMin ;\n\n//var Vout = SinGen;\n\n//flow Var Level Setpoint definition\nflow.set(\"SinusSetpoint\", Vout);\nglobal.set(\"registry\", registry);\nmsg.payload = Vout;\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "//O código adicionado aqui será executado uma vez\n// sempre que o nó for iniciado.\n\nflow.set(\"My_arc001\", 0.0); //Varies the number from 0 to Pi*2 (in rad mode)",
        "finalize": "",
        "libs": [],
        "x": 3810,
        "y": 1240,
        "wires": [
            [
                "101b53ef0a89eb9d"
            ]
        ]
    },
    {
        "id": "3ea3414ca0b938fd",
        "type": "switch",
        "z": "13170589.bf6fd2",
        "g": "cc7d4f3d94349fc4",
        "name": "Set wave",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "1",
                "vt": "num"
            },
            {
                "t": "eq",
                "v": "3",
                "vt": "num"
            },
            {
                "t": "eq",
                "v": "2",
                "vt": "num"
            },
            {
                "t": "eq",
                "v": "4",
                "vt": "num"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 4,
        "x": 3660,
        "y": 1300,
        "wires": [
            [
                "2a4d588af3072b95"
            ],
            [
                "f399366716e51821"
            ],
            [
                "a640201cf15e3dbf"
            ],
            [
                "c13698e9459e34da"
            ]
        ]
    },
    {
        "id": "f399366716e51821",
        "type": "function",
        "z": "13170589.bf6fd2",
        "g": "cc7d4f3d94349fc4",
        "name": "Triangle",
        "func": "var registry = global.get(\"registry\") || {};\n\n//Triangle wave function calculation\nvar VoutMax = registry.functionGenerator.wave.crest;\nvar VoutMin = registry.functionGenerator.wave.trough;\n// coef > 1, wave more steep\n// coef = 1, wave in 45 degrees\n// coef < 1, wave less steep\nvar coef = 0.20\nvar Vout = flow.get(\"tri\") + (flow.get(\"signal\")* coef);\nflow.set(\"tri\", Vout);\n\n//Definition if it count up or counts down\nif (Vout <= VoutMin) { flow.set(\"signal\", 1);}\n                else { ; }\nif (Vout >= VoutMax) { flow.set(\"signal\",-1);}\n                else { ; }              \n\nflow.set(\"TriangleSetpoint\", Vout);\nglobal.set(\"registry\", registry);\nmsg.payload = Vout;\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "//O código adicionado aqui será executado uma vez\n// sempre que o nó for iniciado.\nvar VoutMin = 10;\nflow.set(\"tri\",VoutMin);\nflow.set(\"signal\", 1);",
        "finalize": "",
        "libs": [],
        "x": 3820,
        "y": 1280,
        "wires": [
            [
                "101b53ef0a89eb9d"
            ]
        ]
    },
    {
        "id": "a640201cf15e3dbf",
        "type": "function",
        "z": "13170589.bf6fd2",
        "g": "cc7d4f3d94349fc4",
        "name": "Step",
        "func": "// Obter o registro global\nvar registry = global.get(\"registry\") || {};\n\nlet crest = registry.functionGenerator.wave.crest;\nlet trough = registry.functionGenerator.wave.trough;\nlet stepSize = crest - trough;\nlet holdTime = registry.sampleRate.sample/10;\n\n// Valor atual\nlet currentValue = registry.controller.aas.value.setpoint;\n\n// Direção e contador de espera\nlet direction = flow.get(\"stepDirection\") || 1;\nlet holdCounter = flow.get(\"holdCounter\") || 0;\n\n// Verificar se atingiu o limite e precisa esperar\nif ((currentValue >= crest && direction === 1) ||\n    (currentValue <= trough && direction === -1)) {\n    \n    if (holdCounter < holdTime) {\n        holdCounter += 1; \n    } else {\n        direction *= -1;  // inverte direção\n        holdCounter = 0;\n    }\n} else {\n    // Avança normalmente\n    currentValue += stepSize * direction;\n\n    // Garantir que não passe dos limites\n    if (currentValue > crest) currentValue = crest;\n    if (currentValue < trough) currentValue = trough;\n}\n\n\n// Salvar estados\nflow.set(\"stepDirection\", direction);\nflow.set(\"holdCounter\", holdCounter);\n\n// Retornar valor atualizado\nmsg.payload = currentValue;\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 3810,
        "y": 1320,
        "wires": [
            [
                "101b53ef0a89eb9d"
            ]
        ]
    },
    {
        "id": "101b53ef0a89eb9d",
        "type": "function",
        "z": "13170589.bf6fd2",
        "g": "cc7d4f3d94349fc4",
        "name": "Update registry",
        "func": "var registry = global.get(\"registry\") || {};\nregistry.controller.aas.value.setpoint = msg.payload;\nglobal.set(\"registry\", registry);\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 4020,
        "y": 1320,
        "wires": [
            []
        ]
    },
    {
        "id": "f828006e2789cf17",
        "type": "function",
        "z": "13170589.bf6fd2",
        "g": "5ed9b33ae8b164d1",
        "name": "Set",
        "func": "var voutMax = 50;\nvar voutMin = 10;\n\n// Cria uma mensagem para voutMax\nvar msg1 = { payload: voutMax };\n\n// Cria uma mensagem para voutMin\nvar msg2 = { payload: voutMin };\n\n// Envia as duas mensagens em saídas separadas\nnode.send([msg1, msg2]);",
        "outputs": 2,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 3810,
        "y": 1020,
        "wires": [
            [
                "847284872bf02321"
            ],
            [
                "7860ea2f4a451a30"
            ]
        ]
    },
    {
        "id": "847284872bf02321",
        "type": "ui_text_input",
        "z": "13170589.bf6fd2",
        "g": "5ed9b33ae8b164d1",
        "name": "crest",
        "label": "Crest:",
        "tooltip": "",
        "group": "2d655f8a0ec04e64",
        "order": 22,
        "width": 0,
        "height": 0,
        "passthru": true,
        "mode": "number",
        "delay": 300,
        "topic": "topic",
        "sendOnBlur": true,
        "className": "",
        "topicType": "msg",
        "x": 3950,
        "y": 980,
        "wires": [
            [
                "848089d0c330e2a7"
            ]
        ]
    },
    {
        "id": "7860ea2f4a451a30",
        "type": "ui_text_input",
        "z": "13170589.bf6fd2",
        "g": "5ed9b33ae8b164d1",
        "name": "trough",
        "label": "Trough:",
        "tooltip": "",
        "group": "2d655f8a0ec04e64",
        "order": 23,
        "width": 0,
        "height": 0,
        "passthru": true,
        "mode": "number",
        "delay": 300,
        "topic": "topic",
        "sendOnBlur": true,
        "className": "",
        "topicType": "msg",
        "x": 3950,
        "y": 1020,
        "wires": [
            [
                "b645f6eac5d36cc2"
            ]
        ]
    },
    {
        "id": "848089d0c330e2a7",
        "type": "function",
        "z": "13170589.bf6fd2",
        "g": "5ed9b33ae8b164d1",
        "name": "Update registry",
        "func": "// Obter o valor do registro global\nvar registry = global.get(\"registry\") || {};\n\n// Atualizar o idShortAsset com o valor vindo de msg.payload\nregistry.functionGenerator.wave.crest = msg.payload; // Atribui o valor recebido\n\n// Atualizar o valor global\nglobal.set(\"registry\", registry);\n\n// Retornar uma mensagem indicando a atualização\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 4100,
        "y": 980,
        "wires": [
            []
        ]
    },
    {
        "id": "b645f6eac5d36cc2",
        "type": "function",
        "z": "13170589.bf6fd2",
        "g": "5ed9b33ae8b164d1",
        "name": "Update registry",
        "func": "// Obter o valor do registro global\nvar registry = global.get(\"registry\") || {};\n\n// Atualizar o idShortAsset com o valor vindo de msg.payload\nregistry.functionGenerator.wave.trough = msg.payload; // Atribui o valor recebido\n\n// Atualizar o valor global\nglobal.set(\"registry\", registry);\n\n// Retornar uma mensagem indicando a atualização\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 4100,
        "y": 1020,
        "wires": [
            []
        ]
    },
    {
        "id": "13068d0c509d561d",
        "type": "function",
        "z": "13170589.bf6fd2",
        "g": "5ed9b33ae8b164d1",
        "name": "Update registry",
        "func": "// Obter o valor do registro global\nvar registry = global.get(\"registry\") || {};\n\n// Atualizar o idShortAsset com o valor vindo de msg.payload\nregistry.functionGenerator.wave.type = msg.payload; // Atribui o valor recebido\n\n// Atualizar o valor global\nglobal.set(\"registry\", registry);\n\n// Retornar uma mensagem indicando a atualização\nreturn  msg;\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "//O código adicionado aqui será executado uma vez\n// sempre que o nó for iniciado.\nvar VoutMin = 10;\nflow.set(\"tri\",VoutMin);\nflow.set(\"signal\", 1);",
        "finalize": "",
        "libs": [],
        "x": 3840,
        "y": 1100,
        "wires": [
            []
        ]
    },
    {
        "id": "b06e8883a9c8d890",
        "type": "function",
        "z": "13170589.bf6fd2",
        "g": "cc7d4f3d94349fc4",
        "name": "Read registry",
        "func": "// Obter o objeto registry do escopo global\nvar registry = global.get(\"registry\") || {};\n\nmsg.payload = registry.functionGenerator.wave.type;\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 3490,
        "y": 1300,
        "wires": [
            [
                "3ea3414ca0b938fd"
            ]
        ]
    },
    {
        "id": "c13698e9459e34da",
        "type": "function",
        "z": "13170589.bf6fd2",
        "g": "cc7d4f3d94349fc4",
        "name": "Mixed profile",
        "func": "let registry = global.get(\"registry\") || {};\nlet stepCounter = flow.get(\"stepCounter\") || 0;\n\nlet crest = registry.functionGenerator.wave.crest;\nlet trough = registry.functionGenerator.wave.trough;\n\nlet cyclePosition = stepCounter % 300;\nlet outputValue = trough;\n\nif (cyclePosition < 50) {\n    // rampa crescente 0 a 100%\n    let pct = cyclePosition / 49; // normaliza de 0 a 1\n    outputValue = trough + pct * (crest - trough);\n} else\n    if (cyclePosition < 100){\n        outputValue = trough + 1 * (crest - trough);\n    }\n    else if (cyclePosition < 150) {\n    // rampa decrescente 100% a 50%\n    let pct = (cyclePosition - 100) / 49; // normaliza 0 a 1\n    outputValue = crest - pct * 0.5 * (crest - trough);\n} else {\n    if (cyclePosition < 200) {\n        outputValue = trough + 0.5 * (crest - trough);\n    } else if (cyclePosition < 250) {\n        outputValue = trough + 0.8 * (crest - trough);\n    } else if (cyclePosition < 300) {\n        outputValue = trough + 0.3 * (crest - trough);\n    } else {\n        outputValue = trough;\n    }\n}\n\nregistry.functionGenerator.constant.value = outputValue;\nglobal.set(\"registry\", registry);\n\nstepCounter++;\nflow.set(\"stepCounter\", stepCounter);\n\nmsg.payload = outputValue;\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 3830,
        "y": 1360,
        "wires": [
            [
                "101b53ef0a89eb9d"
            ]
        ]
    },
    {
        "id": "30134f7ad1dd7797",
        "type": "ui_text",
        "z": "13170589.bf6fd2",
        "g": "cc7d4f3d94349fc4",
        "group": "2d655f8a0ec04e64",
        "order": 20,
        "width": 0,
        "height": 0,
        "name": "functionSelected",
        "label": "Function:",
        "format": "{{msg.payload.idShortAsset}}",
        "layout": "row-spread",
        "className": "",
        "style": false,
        "font": "",
        "fontSize": 16,
        "color": "#000000",
        "x": 3690,
        "y": 1400,
        "wires": []
    },
    {
        "id": "4cbe968ea709ff1b",
        "type": "inject",
        "z": "13170589.bf6fd2",
        "g": "cc7d4f3d94349fc4",
        "name": "Interval 1s",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "1",
        "crontab": "",
        "once": false,
        "onceDelay": "",
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 3370,
        "y": 1300,
        "wires": [
            [
                "b06e8883a9c8d890",
                "5d71b5ec6d7a31be"
            ]
        ]
    },
    {
        "id": "32628e63c595fc1d",
        "type": "function",
        "z": "13170589.bf6fd2",
        "g": "63f2a9cb575789f8",
        "name": "pumps=off",
        "func": "var registry = global.get(\"registry\") || {};\nmsg.action = `${registry.actuator.service.name}.${registry.actuator.service.action}`\n\nfor (let i = 0; i < 3; i++) {\n        msg.payload = {\n            \"idShortSubmodel\": \"OperationalData\",\n            \"idShortSubmodelElement\": \"Percentage\",\n            \"value\": \"0\"\n        };\n        node.send(msg); // Envia a mensagem somente se a condição for atendida\n}\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 5990,
        "y": 260,
        "wires": [
            [
                "d12db9e945c761d6"
            ]
        ]
    },
    {
        "id": "d12db9e945c761d6",
        "type": "moleculer-call",
        "z": "13170589.bf6fd2",
        "g": "63f2a9cb575789f8",
        "broker": "15fdc347.1238cd",
        "name": "",
        "topic": "",
        "options": "{}",
        "x": 6150,
        "y": 260,
        "wires": [
            []
        ]
    },
    {
        "id": "efb647f0b099275b",
        "type": "function",
        "z": "13170589.bf6fd2",
        "g": "63f2a9cb575789f8",
        "name": "lv122 configuration",
        "func": "var registry = global.get(\"registry\") || {};\nmsg.action = `${registry.valve.operationalRequirements.proportionalValve.service.name}.${registry.valve.operationalRequirements.proportionalValve.service.action}`\n\nfor (let i = 0; i < 3; i++) {\n        msg.payload = {\n            \"idShortSubmodel\": registry.valve.operationalRequirements.proportionalValve.aas.idShortSubmodel,\n            \"idShortSubmodelElement\": registry.valve.operationalRequirements.proportionalValve.aas.idShortSubmodelElement,\n            \"value\": registry.valve.operationalRequirements.proportionalValve.aas.value\n        };\n        node.send(msg); // Envia a mensagem somente se a condição for atendida\n}\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 6030,
        "y": 340,
        "wires": [
            [
                "cd370a5b5ea229e2"
            ]
        ]
    },
    {
        "id": "cd370a5b5ea229e2",
        "type": "moleculer-call",
        "z": "13170589.bf6fd2",
        "g": "63f2a9cb575789f8",
        "broker": "15fdc347.1238cd",
        "name": "",
        "topic": "",
        "options": "{}",
        "x": 6230,
        "y": 340,
        "wires": [
            []
        ]
    },
    {
        "id": "7762fee7c2f8c565",
        "type": "inject",
        "z": "13170589.bf6fd2",
        "g": "6d8524ceaaaca1e5",
        "name": "Interval 1s",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "1",
        "crontab": "",
        "once": false,
        "onceDelay": "",
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 3370,
        "y": 1700,
        "wires": [
            [
                "a5251b0d66c17a11"
            ]
        ]
    },
    {
        "id": "f4a716ad4d7458ad",
        "type": "inject",
        "z": "13170589.bf6fd2",
        "g": "bb55775566b42bd3",
        "name": "Interval 1s",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "1",
        "crontab": "",
        "once": false,
        "onceDelay": "",
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 3370,
        "y": 2000,
        "wires": [
            [
                "c2adb4745895712b"
            ]
        ]
    },
    {
        "id": "9c4c972ad50cc52c",
        "type": "inject",
        "z": "13170589.bf6fd2",
        "g": "f886b3d702b7fd02",
        "name": "Interval 1s",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "1",
        "crontab": "",
        "once": false,
        "onceDelay": "",
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 3390,
        "y": 800,
        "wires": [
            [
                "7b397e80da6902fe"
            ]
        ]
    },
    {
        "id": "67e1c9b4fc583ced",
        "type": "inject",
        "z": "13170589.bf6fd2",
        "g": "6d311eefaabc1477",
        "name": "Interval 1s",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "1",
        "crontab": "",
        "once": false,
        "onceDelay": "",
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 3360,
        "y": 400,
        "wires": [
            [
                "4a303ecd592807a3"
            ]
        ]
    },
    {
        "id": "3b037be1ad258ca7",
        "type": "inject",
        "z": "13170589.bf6fd2",
        "g": "2e9f93364ef00f8c",
        "name": "Empty 1x",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": "0.1",
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 4540,
        "y": 400,
        "wires": [
            [
                "7cc943e5f69b5aa2"
            ]
        ]
    },
    {
        "id": "7cc943e5f69b5aa2",
        "type": "function",
        "z": "13170589.bf6fd2",
        "g": "2e9f93364ef00f8c",
        "name": "Update registry",
        "func": "// Obter o valor do registro global\nvar registry = global.get(\"registry\") || {};\n\n// Atualizar o sensor\n// Atualizar o idShortAsset com o valor vindo de msg.payload\nregistry.sensor.aas.idShortAsset = \"lit125_daq\"; // Atribui o valor recebido\nregistry.sensor.service.name = \"lit125_daq\"; \n// Atualizar o idShortAsset com o valor vindo de msg.payload\nregistry.sensor.aas.idShortSubmodel = \"OperationalData\"; // Atribui o valor recebido\n// Atualizar o idShortAsset com o valor vindo de msg.payload\nregistry.sensor.aas.idShortSubmodelElement = \"Percentage\"; // Atribui o valor recebido\n// Atualizar o idShortAsset com o valor vindo de msg.payload\nregistry.sensor.aas.format = \"value\"; // Atribui o valor recebido\n\n// Atualizar o controlador\nregistry.controller.aas.idShortAsset = \"lic125_pid4\";\nregistry.controller.service.name = \"lic125_pid4\";\nregistry.controller.aas.idShortSubmodel = \"OperationalData\";\nregistry.controller.aas.idShortSubmodelElement = \"Parameters\";\nregistry.controller.aas.format = \"value\";\nregistry.controller.aas.value.kp = 7.5;\nregistry.controller.aas.value.ti = 17;\nregistry.controller.aas.value.td = 2;\n\n// Atualizar o gerenciador de função\nregistry.functionGenerator.wave.type = 1;\nregistry.functionGenerator.wave.crest = 50;\nregistry.functionGenerator.wave.trough = 10;\n\n// Atualizar o actuator\nregistry.actuator.aas.idShortAsset = \"p2_daq\";\nregistry.actuator.service.name = \"p2_daq\";\nregistry.actuator.aas.idShortSubmodel = \"OperationalData\";\nregistry.actuator.aas.idShortSubmodelElement = \"Percentage\";\nregistry.actuator.aas.format = \"value\";\n\n// Atualizar o valve\nregistry.valve.operationalRequirements.proportionalValve.aas.idShortAsset = \"lv122_daq\"; \nregistry.valve.operationalRequirements.proportionalValve.service.name = \"lv122_daq\";\nregistry.valve.operationalRequirements.proportionalValve.aas.idShortSubmodel = \"OperationalData\"; \nregistry.valve.operationalRequirements.proportionalValve.aas.idShortSubmodelElement = \"Percentage\";\nregistry.valve.operationalRequirements.proportionalValve.aas.value = \"100\";\n\n\n// Atualizar o valor global\nglobal.set(\"registry\", registry);\n\n// Retornar uma mensagem indicando a atualização\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 4700,
        "y": 440,
        "wires": [
            []
        ]
    },
    {
        "id": "eb1b40e8d69d8951",
        "type": "ui_button",
        "z": "13170589.bf6fd2",
        "g": "2e9f93364ef00f8c",
        "name": "Tank level",
        "group": "8c60dcc13bef6894",
        "order": 4,
        "width": 0,
        "height": 0,
        "passthru": false,
        "label": "Tank level",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "className": "",
        "icon": "",
        "payload": "",
        "payloadType": "str",
        "topic": "topic",
        "topicType": "msg",
        "x": 4520,
        "y": 440,
        "wires": [
            [
                "7cc943e5f69b5aa2"
            ]
        ]
    },
    {
        "id": "4cb975919734d2c2",
        "type": "ui_button",
        "z": "13170589.bf6fd2",
        "g": "2e9f93364ef00f8c",
        "name": "Reservoir pressure",
        "group": "8c60dcc13bef6894",
        "order": 7,
        "width": 0,
        "height": 0,
        "passthru": false,
        "label": "Reservoir pressure",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "className": "",
        "icon": "",
        "payload": "",
        "payloadType": "str",
        "topic": "topic",
        "topicType": "msg",
        "x": 4490,
        "y": 480,
        "wires": [
            [
                "06672febd3cab359"
            ]
        ]
    },
    {
        "id": "06672febd3cab359",
        "type": "function",
        "z": "13170589.bf6fd2",
        "g": "2e9f93364ef00f8c",
        "name": "Update registry",
        "func": "// Obter o valor do registro global\nvar registry = global.get(\"registry\") || {};\n\n// Atualizar o sensor\n// Atualizar o idShortAsset com o valor vindo de msg.payload\nregistry.sensor.aas.idShortAsset = \"pit129_daq\"; // Atribui o valor recebido\nregistry.sensor.service.name = \"pit129_daq\"; \n// Atualizar o idShortAsset com o valor vindo de msg.payload\nregistry.sensor.aas.idShortSubmodel = \"OperationalData\"; // Atribui o valor recebido\n// Atualizar o idShortAsset com o valor vindo de msg.payload\nregistry.sensor.aas.idShortSubmodelElement = \"Percentage\"; // Atribui o valor recebido\n// Atualizar o idShortAsset com o valor vindo de msg.payload\nregistry.sensor.aas.format = \"value\"; // Atribui o valor recebido\n\n// Atualizar o controlador\nregistry.controller.aas.idShortAsset = \"pic129_pid4\";\nregistry.controller.service.name = \"pic129_pid4\";\nregistry.controller.aas.idShortSubmodel = \"OperationalData\";\nregistry.controller.aas.idShortSubmodelElement = \"Parameters\";\nregistry.controller.aas.format = \"value\";\nregistry.controller.aas.value.kp = 0.5;   // Aumenta a resposta rápida\nregistry.controller.aas.value.ti = 2;  // Corrige erro estático mais rápido\nregistry.controller.aas.value.td = 0.1;  // Mantém para suavizar oscilações\nregistry.controller.aas.value.setpoint = 30;\n\n// Atualizar o gerenciador de função\nregistry.functionGenerator.wave.type = 2;\nregistry.functionGenerator.wave.crest = 50;\nregistry.functionGenerator.wave.trough = 10;\n\n// Atualizar o actuator\nregistry.actuator.aas.idShortAsset = \"p1_daq\";\nregistry.actuator.service.name = \"p1_daq\";\nregistry.actuator.aas.idShortSubmodel = \"OperationalData\";\nregistry.actuator.aas.idShortSubmodelElement = \"Percentage\";\nregistry.actuator.aas.format = \"value\";\n\n// Atualizar o valve\nregistry.valve.operationalRequirements.proportionalValve.aas.idShortAsset = \"lv122_daq\"; \nregistry.valve.operationalRequirements.proportionalValve.service.name = \"lv122_daq\";\nregistry.valve.operationalRequirements.proportionalValve.aas.idShortSubmodel = \"OperationalData\"; \nregistry.valve.operationalRequirements.proportionalValve.aas.idShortSubmodelElement = \"Percentage\";\nregistry.valve.operationalRequirements.proportionalValve.aas.value = \"100\";\n\n// Atualizar o valor global\nglobal.set(\"registry\", registry);\n\n// Retornar uma mensagem indicando a atualização\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 4700,
        "y": 480,
        "wires": [
            []
        ]
    },
    {
        "id": "53863c712e61fe47",
        "type": "ui_button",
        "z": "13170589.bf6fd2",
        "g": "2e9f93364ef00f8c",
        "name": "Pipe flow",
        "group": "8c60dcc13bef6894",
        "order": 6,
        "width": 0,
        "height": 0,
        "passthru": false,
        "label": "Pipe flow",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "className": "",
        "icon": "",
        "payload": "",
        "payloadType": "str",
        "topic": "topic",
        "topicType": "msg",
        "x": 4520,
        "y": 520,
        "wires": [
            [
                "3af48236db2042f4"
            ]
        ]
    },
    {
        "id": "3af48236db2042f4",
        "type": "function",
        "z": "13170589.bf6fd2",
        "g": "2e9f93364ef00f8c",
        "name": "Update registry",
        "func": "// Obter o valor do registro global\nvar registry = global.get(\"registry\") || {};\n\n// Atualizar o sensor\n// Atualizar o idShortAsset com o valor vindo de msg.payload\nregistry.sensor.aas.idShortAsset = \"fit116_daq\"; // Atribui o valor recebido\nregistry.sensor.service.name = \"fit116_daq\"; \n// Atualizar o idShortAsset com o valor vindo de msg.payload\nregistry.sensor.aas.idShortSubmodel = \"OperationalData\"; // Atribui o valor recebido\n// Atualizar o idShortAsset com o valor vindo de msg.payload\nregistry.sensor.aas.idShortSubmodelElement = \"Percentage\"; // Atribui o valor recebido\n// Atualizar o idShortAsset com o valor vindo de msg.payload\nregistry.sensor.aas.format = \"value\"; // Atribui o valor recebido\n\n// Atualizar o controlador\nregistry.controller.aas.idShortAsset = \"fic116_pid4\";\nregistry.controller.service.name = \"fic116_pid4\";\nregistry.controller.aas.idShortSubmodel = \"OperationalData\";\nregistry.controller.aas.idShortSubmodelElement = \"Parameters\";\nregistry.controller.aas.format = \"value\";\nregistry.controller.aas.value.kp = 1.2;\nregistry.controller.aas.value.ti = 1.5;\nregistry.controller.aas.value.td = 0;\nregistry.controller.aas.value.setpoint = 30;\n\n// Atualizar o gerenciador de função\nregistry.functionGenerator.wave.type = 3;\nregistry.functionGenerator.wave.crest = 50;\nregistry.functionGenerator.wave.trough = 10;\n\n// Atualizar o actuator\nregistry.actuator.aas.idShortAsset = \"p2_daq\";\nregistry.actuator.service.name = \"p2_daq\";\nregistry.actuator.aas.idShortSubmodel = \"OperationalData\";\nregistry.actuator.aas.idShortSubmodelElement = \"Percentage\";\nregistry.actuator.aas.format = \"value\";\n\n// Atualizar o valve\nregistry.valve.operationalRequirements.proportionalValve.aas.idShortAsset = \"lv122_daq\"; \nregistry.valve.operationalRequirements.proportionalValve.service.name = \"lv122_daq\";\nregistry.valve.operationalRequirements.proportionalValve.aas.idShortSubmodel = \"OperationalData\"; \nregistry.valve.operationalRequirements.proportionalValve.aas.idShortSubmodelElement = \"Percentage\";\nregistry.valve.operationalRequirements.proportionalValve.aas.value = \"100\";\n\n// Atualizar o valor global\nglobal.set(\"registry\", registry);\n\n// Retornar uma mensagem indicando a atualização\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 4700,
        "y": 520,
        "wires": [
            []
        ]
    },
    {
        "id": "373b01054c442936",
        "type": "ui_button",
        "z": "13170589.bf6fd2",
        "g": "2e9f93364ef00f8c",
        "name": "Pipe pressure",
        "group": "8c60dcc13bef6894",
        "order": 5,
        "width": 0,
        "height": 0,
        "passthru": false,
        "label": "Pipe pressure",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "className": "",
        "icon": "",
        "payload": "",
        "payloadType": "str",
        "topic": "topic",
        "topicType": "msg",
        "x": 4500,
        "y": 560,
        "wires": [
            [
                "650cc2be253d9125"
            ]
        ]
    },
    {
        "id": "650cc2be253d9125",
        "type": "function",
        "z": "13170589.bf6fd2",
        "g": "2e9f93364ef00f8c",
        "name": "Update registry",
        "func": "// Obter o valor do registro global\nvar registry = global.get(\"registry\") || {};\n\n// Atualizar o sensor\n// Atualizar o idShortAsset com o valor vindo de msg.payload\nregistry.sensor.aas.idShortAsset = \"pit118_daq\"; // Atribui o valor recebido\nregistry.sensor.service.name = \"pit118_daq\"; \n// Atualizar o idShortAsset com o valor vindo de msg.payload\nregistry.sensor.aas.idShortSubmodel = \"OperationalData\"; // Atribui o valor recebido\n// Atualizar o idShortAsset com o valor vindo de msg.payload\nregistry.sensor.aas.idShortSubmodelElement = \"Percentage\"; // Atribui o valor recebido\n// Atualizar o idShortAsset com o valor vindo de msg.payload\nregistry.sensor.aas.format = \"value\"; // Atribui o valor recebido\n\n// Atualizar o controlador\nregistry.controller.aas.idShortAsset = \"pic118_pid4\"; //pic118_pid4 esta dando erro null vou testar com fic116_pid4 depois volto para o 118\nregistry.controller.service.name = \"pic118_pid4\";\nregistry.controller.aas.idShortSubmodel = \"OperationalData\";\nregistry.controller.aas.idShortSubmodelElement = \"Parameters\";\nregistry.controller.aas.format = \"value\";\nregistry.controller.aas.value.kp = 1;\nregistry.controller.aas.value.ti = 1;\nregistry.controller.aas.value.td = 0;\n\nregistry.controller.aas.value.setpoint = 30;\n\n// Atualizar o gerenciador de função\nregistry.functionGenerator.wave.type = 4;\nregistry.functionGenerator.wave.crest = 50;\nregistry.functionGenerator.wave.trough = 10;\n\n// Atualizar o actuator\nregistry.actuator.aas.idShortAsset = \"p2_daq\";\nregistry.actuator.service.name = \"p2_daq\";\nregistry.actuator.aas.idShortSubmodel = \"OperationalData\";\nregistry.actuator.aas.idShortSubmodelElement = \"Percentage\";\nregistry.actuator.aas.format = \"value\";\n\n// Atualizar o valve\nregistry.valve.operationalRequirements.proportionalValve.aas.idShortAsset = \"lv122_daq\"; \nregistry.valve.operationalRequirements.proportionalValve.service.name = \"lv122_daq\";\nregistry.valve.operationalRequirements.proportionalValve.aas.idShortSubmodel = \"OperationalData\"; \nregistry.valve.operationalRequirements.proportionalValve.aas.idShortSubmodelElement = \"Percentage\";\nregistry.valve.operationalRequirements.proportionalValve.aas.value = \"20\";\n\n// Atualizar o valor global\nglobal.set(\"registry\", registry);\n\n// Retornar uma mensagem indicando a atualização\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 4700,
        "y": 560,
        "wires": [
            []
        ]
    },
    {
        "id": "4d78c555ea251c40",
        "type": "ui_text",
        "z": "13170589.bf6fd2",
        "g": "2e9f93364ef00f8c",
        "group": "8c60dcc13bef6894",
        "order": 3,
        "width": 0,
        "height": 0,
        "name": "",
        "label": "Default process control assets",
        "format": "{{msg.payload}}",
        "layout": "row-spread",
        "className": "",
        "style": false,
        "font": "",
        "fontSize": 16,
        "color": "#000000",
        "x": 4630,
        "y": 260,
        "wires": []
    },
    {
        "id": "c233e17467666072",
        "type": "inject",
        "z": "13170589.bf6fd2",
        "g": "67d58169ec97f73b",
        "name": "Empty 1x",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "str",
        "x": 2620,
        "y": 420,
        "wires": [
            [
                "91b4e261f1e41af1"
            ]
        ]
    },
    {
        "id": "4ca1766c4fb7952a",
        "type": "inject",
        "z": "13170589.bf6fd2",
        "g": "6d311eefaabc1477",
        "name": "Empty 1x",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "str",
        "x": 3350,
        "y": 300,
        "wires": [
            [
                "74a16fe658f80bd5",
                "1188989aeccf0d20",
                "8ebdca6daa974bde"
            ]
        ]
    },
    {
        "id": "b74e25cf75692c1d",
        "type": "inject",
        "z": "13170589.bf6fd2",
        "g": "f886b3d702b7fd02",
        "name": "Empty 1x",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "str",
        "x": 3360,
        "y": 560,
        "wires": [
            [
                "6f63c6eab8ea0150",
                "a89512bf099d270f",
                "261906bc063a0493"
            ]
        ]
    },
    {
        "id": "eef072ae51c5546a",
        "type": "inject",
        "z": "13170589.bf6fd2",
        "g": "5ed9b33ae8b164d1",
        "name": "Empty 1x",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "str",
        "x": 3360,
        "y": 980,
        "wires": [
            [
                "22227849759470ef",
                "847284872bf02321",
                "7860ea2f4a451a30"
            ]
        ]
    },
    {
        "id": "683e08bf20eeb8e8",
        "type": "inject",
        "z": "13170589.bf6fd2",
        "g": "6d8524ceaaaca1e5",
        "name": "Empty 1x",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "str",
        "x": 3360,
        "y": 1600,
        "wires": [
            [
                "354ae0c45ed9bbc1",
                "9e530b0a1fd8ef97",
                "7a9d8e9733acc5b1"
            ]
        ]
    },
    {
        "id": "a90ecafa6951c028",
        "type": "inject",
        "z": "13170589.bf6fd2",
        "g": "bb55775566b42bd3",
        "name": "Empty 1x",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "str",
        "x": 3360,
        "y": 1880,
        "wires": [
            [
                "d64cc8c2ec354d58",
                "79b5123eb596c231",
                "1ef7e2c062efdc65"
            ]
        ]
    },
    {
        "id": "3c894e41d7879532",
        "type": "inject",
        "z": "13170589.bf6fd2",
        "g": "7a56353afcae4d8d",
        "name": "Interval 1s",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "1",
        "crontab": "",
        "once": false,
        "onceDelay": "",
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 2430,
        "y": 620,
        "wires": [
            [
                "49e9750ee45101cd"
            ]
        ]
    },
    {
        "id": "5d71b5ec6d7a31be",
        "type": "function",
        "z": "13170589.bf6fd2",
        "g": "cc7d4f3d94349fc4",
        "name": "Read (registry)",
        "func": "// Obter o objeto registry do escopo global\nvar registry = global.get(\"registry\") || {};\n\nmsg.payload = {\n    idShortAsset: registry.functionGenerator.wave.type || '',\n};\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 3500,
        "y": 1400,
        "wires": [
            [
                "30134f7ad1dd7797"
            ]
        ]
    },
    {
        "id": "e34a5d1e38497f1d",
        "type": "inject",
        "z": "13170589.bf6fd2",
        "g": "67d58169ec97f73b",
        "name": "Interval 10s",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "10",
        "crontab": "",
        "once": true,
        "onceDelay": "4",
        "topic": "",
        "payload": "{}",
        "payloadType": "json",
        "x": 2430,
        "y": 340,
        "wires": [
            [
                "7bd54dc877b885bc"
            ]
        ]
    },
    {
        "id": "151013cdaadfd467",
        "type": "function",
        "z": "13170589.bf6fd2",
        "g": "67d58169ec97f73b",
        "name": "updateRegistry",
        "func": "// Get the global registry object\nvar registry = global.get(\"registry\") || {};\n\n// Determine which dropdown triggered the update\nvar dropdownType = msg.topic || '';\n\n// Update the registry based on the dropdown type\nswitch(dropdownType) {\n    case 'sensors':\n        registry.sensor = registry.sensor || {};\n        registry.sensor.aas = registry.sensor.aas || {};\n        registry.sensor.service = registry.sensor.service || {};\n        registry.sensor.aas.idShortAsset = msg.payload;\n        registry.sensor.service.name = msg.payload;\n        break;\n        \n    case 'controllers':\n        registry.controller = registry.controller || {};\n        registry.controller.aas = registry.controller.aas || {};\n        registry.controller.service = registry.controller.service || {};\n        registry.controller.aas.idShortAsset = msg.payload;\n        registry.controller.service.name = msg.payload;\n        break;\n        \n    case 'actuators':\n        registry.actuator = registry.actuator || {};\n        registry.actuator.aas = registry.actuator.aas || {};\n        registry.actuator.service = registry.actuator.service || {};\n        registry.actuator.aas.idShortAsset = msg.payload;\n        registry.actuator.service.name = msg.payload;\n        break;\n        \n    case 'valves':\n        registry.valve = registry.valve || {};\n        registry.valve.operationalRequirements = registry.valve.operationalRequirements || {};\n        registry.valve.operationalRequirements.proportionalValve = registry.valve.operationalRequirements.proportionalValve || {};\n        registry.valve.operationalRequirements.proportionalValve.aas = registry.valve.operationalRequirements.proportionalValve.aas || {};\n        registry.valve.operationalRequirements.proportionalValve.service = registry.valve.operationalRequirements.proportionalValve.service || {};\n        registry.valve.operationalRequirements.proportionalValve.aas.idShortAsset = msg.payload;\n        registry.valve.operationalRequirements.proportionalValve.service.name = msg.payload;\n        break;\n        \n    case 'functionGenerators':\n        registry.functionGenerator = registry.functionGenerator || {};\n        registry.functionGenerator.function = registry.functionGenerator.function || {};\n        registry.functionGenerator.function.name = msg.payload;\n        break;\n}\n\n// Update the global registry\nglobal.set(\"registry\", registry);\n\n// Return the message for further processing\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 3060,
        "y": 340,
        "wires": [
            []
        ]
    },
    {
        "id": "49e9750ee45101cd",
        "type": "function",
        "z": "13170589.bf6fd2",
        "g": "7a56353afcae4d8d",
        "name": "readRegistry",
        "func": "// Obter o objeto registry do escopo global\nvar registry = global.get(\"registry\") || {};\n\n// Criar objeto com todos os valores necessários\nmsg.payload = {\n    registry: {\n        sensor: {\n            aas: {\n                idShortAsset: registry.sensor?.aas?.idShortAsset || \"\"\n            }\n        },\n        controller: {\n            aas: {\n                idShortAsset: registry.controller?.aas?.idShortAsset || \"\"\n            }\n        },\n        actuator: {\n            aas: {\n                idShortAsset: registry.actuator?.aas?.idShortAsset || \"\"\n            }\n        },\n        valve: {\n            operationalRequirements: {\n                proportionalValve: {\n                    aas: {\n                        idShortAsset: registry.valve?.operationalRequirements?.proportionalValve?.aas?.idShortAsset || \"\"\n                    }\n                }\n            }\n        },\n        functionGenerator: {\n            function: {\n                name: registry.functionGenerator?.function?.name || \"\"\n            }\n        }\n    }\n};\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2610,
        "y": 620,
        "wires": [
            [
                "5f27993959f21033",
                "0e5de5c522088d6f",
                "9c91f98636748402",
                "c67a71bb5a4e2a72",
                "c6a8d69f2b824280"
            ]
        ]
    },
    {
        "id": "cd11c5de3c865ee0",
        "type": "inject",
        "z": "13170589.bf6fd2",
        "g": "7a56353afcae4d8d",
        "name": "Empty 1x",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "str",
        "x": 2620,
        "y": 700,
        "wires": [
            [
                "c6a8d69f2b824280"
            ]
        ]
    },
    {
        "id": "5c41090ed73a45f8",
        "type": "ui_template",
        "z": "13170589.bf6fd2",
        "g": "c4582519c05ee1ee",
        "group": "c917fc697a3b676d",
        "name": "Description",
        "order": 1,
        "width": 0,
        "height": 0,
        "format": "<div\n    style=\"font-family: Arial, sans-serif; color: #333; width: 100%; padding: 0 15px; box-sizing: border-box; display: flex; flex-direction: column; gap: 20px;\">\n\n    <div style=\"font-size: 1rem; line-height: 1.6;\">\n        <h3>API GATEWAY</h3>\n        <h4>Service Registry</h4>\n        <ul style=\"list-style-type: none; padding-left: 0;\">\n            <li>http://192.168.1.201:3005/api/~node/services</li>\n            <li>http://192.168.1.201:3005/api/~node/actions</li>\n        </ul>\n        \n        <h4>Services</h4>\n        <ul style=\"list-style-type: none; padding-left: 0;\">\n            <li>http://192.168.1.201:3005/api/service/action?params=value</li>\n            <li>http://192.168.1.201:3005/api/greeter/hello</li>\n            <li>http://192.168.1.201:3005/api/greeter/welcome?name=UNESP</li>\n        </ul>\n\n        <h4>Asset sensors</h4>\n        <div style=\"margin-left: 15px;\">\n            <h5 style=\"margin-bottom: 5px;\">Reading operations:</h5>\n            <ul style=\"list-style-type: none; padding-left: 0; margin-top: 0;\">\n                <li>• http://192.168.1.201:3005/api/pit129_daq/aas</li>\n                <li>• http://192.168.1.201:3005/api/pit129_daq/aas?idShortSubmodel=OperationalData&idShortSubmodelElement=Percentage&format=complete</li>\n                <li>• http://192.168.1.201:3005/api/pit129_daq/aas?idShortSubmodel=OperationalData&idShortSubmodelElement=Percentage&format=value</li>\n            </ul>\n        </div>\n\n        <h4>Asset actuators</h4>\n        <div style=\"margin-left: 15px;\">\n            <h5 style=\"margin-bottom: 5px;\">Reading operations:</h5>\n            <ul style=\"list-style-type: none; padding-left: 0; margin-top: 0;\">\n                <li>• http://192.168.1.201:3005/api/p1_daq/aas</li>\n                <li>• http://192.168.1.201:3005/api/p1_daq/aas?idShortSubmodel=OperationalData&idShortSubmodelElement=Percentage&format=complete</li>\n                <li>• http://192.168.1.201:3005/api/p1_daq/aas?idShortSubmodel=OperationalData&idShortSubmodelElement=Percentage&format=value</li>\n            </ul>\n            \n            <h5 style=\"margin-bottom: 5px;\">Writing operations:</h5>\n            <ul style=\"list-style-type: none; padding-left: 0; margin-top: 0;\">\n                <li>• http://192.168.1.201:3005/api/p1_daq/aas?idShortSubmodel=OperationalData&idShortSubmodelElement=Percentage&value=10</li>\n            </ul>\n        </div>\n\n        <h3>TRANSPORTERS</h3>\n        <h4>NATS</h4>\n        <ul style=\"list-style-type: none; padding-left: 0;\">\n            <li>nats://192.168.1.201:4222 </li> \n        </ul>    \n        \n        <h3>OPC UA</h3>\n\n        <h4>Sensors</h4>\n        <ul style=\"list-style-type: none; padding-left: 0;\">\n            <li>opc.tcp://192.168.1.111:26116/UA/fit116</li>\n            <li>opc.tcp://192.168.1.111:26118/UA/pit118</li>\n            <li>opc.tcp://192.168.1.111:26125/UA/lit125</li>\n            <li>opc.tcp://192.168.1.111:26129/UA/pit129</li>\n        </ul>\n\n        <h4>Controllers</h4>\n        <ul style=\"list-style-type: none; padding-left: 0;\">\n            <li>opc.tcp://192.168.1.101:24116/UA/fic116_pid4</li>\n            <li>opc.tcp://192.168.1.101:24119/UA/pic118_pid4</li> \n            <li>opc.tcp://192.168.1.101:24125/UA/lic125_pid4</li>\n            <li>opc.tcp://192.168.1.101:24129/UA/pic129_pid4</li>\n        </ul>\n\n        <h4>Actuators</h4>\n        <ul style=\"list-style-type: none; padding-left: 0;\">\n            <li>opc.tcp://192.168.1.114:26001/UA/p1</li>\n            <li>opc.tcp://192.168.1.114:26002/UA/p2</li>\n            <li>opc.tcp://192.168.1.114:26122/UA/lv122</li>\n        </ul>\n    </div>\n</div>",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": true,
        "templateScope": "local",
        "className": "",
        "x": 150,
        "y": 300,
        "wires": [
            []
        ]
    },
    {
        "id": "8ef7144b89148441",
        "type": "comment",
        "z": "13170589.bf6fd2",
        "g": "c4582519c05ee1ee",
        "name": "",
        "info": "",
        "x": 300,
        "y": 300,
        "wires": []
    },
    {
        "id": "d1be0363a648178c",
        "type": "debug",
        "z": "13170589.bf6fd2",
        "g": "8ebf985bfdd08116",
        "name": "debug 61",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 5360,
        "y": 660,
        "wires": []
    },
    {
        "id": "1d0dd5306b34b3f1",
        "type": "debug",
        "z": "13170589.bf6fd2",
        "g": "8e30bfbd13c6747d",
        "name": "debug 62",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 5180,
        "y": 480,
        "wires": []
    },
    {
        "id": "1e2b4ae0d8426bb5",
        "type": "function",
        "z": "3186fe8a8438c19e",
        "g": "c82377d569bfc0e6",
        "name": "Sinus wave - Generator",
        "func": "//Sine wave function calculation\nvar x = flow.get(\"My_arc001\") + ((Math.PI * 2)/300); // ===300 points (seconds) in the arc\nflow.set(\"My_arc001\", x)\nvar SinGen = Math.sin(x);  // === It varies from +1 to -1\nif (flow.get(\"My_arc001\") >= (Math.PI * 2)) { flow.set(\"My_arc001\", 0.0) };\n\n//Scaling [ Y-Y0 = m.(X-X0) ]\nvar VoutMax = 55;\nvar VoutMin = 15;\nvar AngCoef = 2 / (VoutMax - VoutMin);\nvar Vout = ((SinGen+1)/AngCoef) + VoutMin ;\n\n//var Vout = SinGen;\n\n//flow Var Level Setpoint definition\nflow.set(\"SinusSetpoint\", Vout);\nmsg.payload = Vout;\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "//O código adicionado aqui será executado uma vez\n// sempre que o nó for iniciado.\n\nflow.set(\"My_arc001\", 0.0); //Varies the number from 0 to Pi*2 (in rad mode)",
        "finalize": "",
        "libs": [],
        "x": 1070,
        "y": 440,
        "wires": [
            [
                "1bcc5e660497a843"
            ]
        ]
    },
    {
        "id": "1bcc5e660497a843",
        "type": "function",
        "z": "3186fe8a8438c19e",
        "g": "c82377d569bfc0e6",
        "name": "setpoint",
        "func": "flow.set(\"setpoint\", msg.payload);\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1580,
        "y": 480,
        "wires": [
            []
        ]
    },
    {
        "id": "13ccc657cadc4389",
        "type": "inject",
        "z": "3186fe8a8438c19e",
        "g": "c82377d569bfc0e6",
        "name": "",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "0.25",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "select_setpoint",
        "payloadType": "flow",
        "x": 500,
        "y": 480,
        "wires": [
            [
                "95087b386eb41403"
            ]
        ]
    },
    {
        "id": "1f6db106c4b87039",
        "type": "function",
        "z": "3186fe8a8438c19e",
        "g": "c82377d569bfc0e6",
        "name": "select_setpoint",
        "func": "flow.set(\"select_setpoint\", msg.payload);\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1560,
        "y": 600,
        "wires": [
            []
        ]
    },
    {
        "id": "95087b386eb41403",
        "type": "switch",
        "z": "3186fe8a8438c19e",
        "g": "c82377d569bfc0e6",
        "name": "",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "1",
                "vt": "num"
            },
            {
                "t": "eq",
                "v": "2",
                "vt": "num"
            },
            {
                "t": "eq",
                "v": "3",
                "vt": "num"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 3,
        "x": 730,
        "y": 480,
        "wires": [
            [
                "1e2b4ae0d8426bb5"
            ],
            [
                "fa144c2b379de645"
            ],
            [
                "b73d6381be838f3b"
            ]
        ]
    },
    {
        "id": "b73d6381be838f3b",
        "type": "function",
        "z": "3186fe8a8438c19e",
        "g": "c82377d569bfc0e6",
        "name": "Triangle wave - Generator   .",
        "func": "//Triangle wave function calculation\nvar VoutMin = 10;\nvar VoutMax = 55;\n// coef > 1, wave more steep\n// coef = 1, wave in 45 degrees\n// coef < 1, wave less steep\nvar coef = 0.20\nvar Vout = flow.get(\"tri\") + (flow.get(\"signal\")* coef);\nflow.set(\"tri\", Vout);\n\n//Definition if it count up or counts down\nif (Vout <= VoutMin) { flow.set(\"signal\", 1);}\n                else { ; }\nif (Vout >= VoutMax) { flow.set(\"signal\",-1);}\n                else { ; }              \n\nflow.set(\"TriangleSetpoint\", Vout);\nmsg.payload = Vout;\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "//O código adicionado aqui será executado uma vez\n// sempre que o nó for iniciado.\nvar VoutMin = 10;\nflow.set(\"tri\",VoutMin);\nflow.set(\"signal\", 1);",
        "finalize": "",
        "libs": [],
        "x": 1080,
        "y": 520,
        "wires": [
            [
                "1bcc5e660497a843"
            ]
        ]
    },
    {
        "id": "d0e032f351143311",
        "type": "ui_text",
        "z": "3186fe8a8438c19e",
        "g": "c82377d569bfc0e6",
        "group": "a1b80531659f1a39",
        "order": 2,
        "width": 0,
        "height": 0,
        "name": "",
        "label": "Select setpoint",
        "format": "{{msg.payload}}",
        "layout": "col-center",
        "className": "",
        "style": false,
        "font": "",
        "fontSize": 16,
        "color": "#000000",
        "x": 460,
        "y": 560,
        "wires": []
    },
    {
        "id": "144e27bb5b329efe",
        "type": "ui_dropdown",
        "z": "3186fe8a8438c19e",
        "g": "c82377d569bfc0e6",
        "name": "",
        "label": "",
        "tooltip": "",
        "place": "Select Setpoint",
        "group": "a1b80531659f1a39",
        "order": 3,
        "width": 0,
        "height": 0,
        "passthru": true,
        "multiple": false,
        "options": [
            {
                "label": "Sinus Setpoint",
                "value": 1,
                "type": "num"
            },
            {
                "label": "Fixed Setpoint",
                "value": 2,
                "type": "num"
            },
            {
                "label": "Triangle Setpoint",
                "value": 3,
                "type": "num"
            }
        ],
        "payload": "",
        "topic": "topic",
        "topicType": "msg",
        "className": "",
        "x": 440,
        "y": 600,
        "wires": [
            [
                "1f6db106c4b87039"
            ]
        ]
    },
    {
        "id": "fa144c2b379de645",
        "type": "function",
        "z": "3186fe8a8438c19e",
        "g": "c82377d569bfc0e6",
        "name": "Fixed setpoint",
        "func": "var setpoint = 50;\nmsg.payload = setpoint;\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "//O código adicionado aqui será executado uma vez\n// sempre que o nó for iniciado.\nvar VoutMin = 10;\nflow.set(\"tri\",VoutMin);\nflow.set(\"signal\", 1);",
        "finalize": "",
        "libs": [],
        "x": 1040,
        "y": 480,
        "wires": [
            [
                "1bcc5e660497a843"
            ]
        ]
    },
    {
        "id": "2a3a8a847d63dafe",
        "type": "inject",
        "z": "3186fe8a8438c19e",
        "g": "20ea7f9d62b59c56",
        "name": "SE Percentage",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "0.3",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 500,
        "y": 720,
        "wires": [
            [
                "41a67ea982fa9d44"
            ]
        ]
    },
    {
        "id": "41a67ea982fa9d44",
        "type": "OpcUa-Item",
        "z": "3186fe8a8438c19e",
        "g": "20ea7f9d62b59c56",
        "item": "br=/Objects/AASROOT/pit129_daq/OperationalData/Percentage/Value",
        "datatype": "Double",
        "value": "",
        "name": "",
        "x": 740,
        "y": 720,
        "wires": [
            [
                "b84c1b35efec8802"
            ]
        ]
    },
    {
        "id": "b84c1b35efec8802",
        "type": "OpcUa-Client",
        "z": "3186fe8a8438c19e",
        "g": "20ea7f9d62b59c56",
        "endpoint": "9883401a98aa8537",
        "action": "read",
        "deadbandtype": "a",
        "deadbandvalue": 1,
        "time": 10,
        "timeUnit": "s",
        "certificate": "n",
        "localfile": "",
        "localkeyfile": "",
        "securitymode": "None",
        "securitypolicy": "None",
        "useTransport": false,
        "maxChunkCount": 1,
        "maxMessageSize": 8192,
        "receiveBufferSize": 8192,
        "sendBufferSize": 8192,
        "name": "Read",
        "x": 890,
        "y": 720,
        "wires": [
            [
                "8204b71c514190b4"
            ],
            []
        ]
    },
    {
        "id": "96324f6dc3cb5d91",
        "type": "function",
        "z": "3186fe8a8438c19e",
        "g": "20ea7f9d62b59c56",
        "name": "pid4 parameters",
        "func": "// Verifica se \"Eneable\" é igual a 1\nif (flow.get(\"Eneable\") !== 1) {\n    return null; // Não faz nada e interrompe a execução\n}\n// Obtenção dos valores das variáveis de fluxo e conversão para números\nvar ti = parseFloat(flow.get(\"ti\"));\nvar td = parseFloat(flow.get(\"td\"));\nvar kp = parseFloat(flow.get(\"kp\"));\nvar pv = parseFloat(flow.get(\"pic129_daq\"));\nvar setpoint = parseFloat(flow.get(\"setpoint\"));\nvar error = parseFloat(flow.get(\"error\"));\nvar integrative = parseFloat(flow.get(\"integrative\"));\nvar manipulatedVariable = parseFloat(flow.get(\"manipulateVariable\"));\nvar time = parseFloat(flow.get(\"time\"));\n\nmsg.payload = {\n    \"idShortSubmodel\": \"OperationalData\",\n    \"idShortSubmodelElement\": \"Parameters\",\n    \"value\": {\n        \"ti\": ti,\n        \"td\": td,\n        \"kp\": kp,\n        \"pv\": pv,\n        \"setpoint\": setpoint,\n        \"error\": error,\n        \"integrative\": integrative,\n        \"manipulatedVariable\": manipulatedVariable,\n        \"time\": time\n    }\n};\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 660,
        "y": 840,
        "wires": [
            [
                "c8260d5b46d871b5"
            ]
        ]
    },
    {
        "id": "733ef7492979a67e",
        "type": "function",
        "z": "3186fe8a8438c19e",
        "g": "20ea7f9d62b59c56",
        "name": "set flow varaibles",
        "func": "// Armazenar a variável global como número\nflow.set(\"manipulateVariable\", msg.payload.mv);\nflow.set(\"error\", msg.payload.error)\nflow.set(\"time\", msg.payload.time)\nflow.set(\"integrative\", msg.payload.integrative)\n\n\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1310,
        "y": 900,
        "wires": [
            [
                "2aae9482af04eca3"
            ]
        ]
    },
    {
        "id": "422c241a231dac9b",
        "type": "inject",
        "z": "3186fe8a8438c19e",
        "g": "20ea7f9d62b59c56",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "true",
        "payloadType": "bool",
        "x": 450,
        "y": 780,
        "wires": [
            [
                "3318a204d4e5be79"
            ]
        ]
    },
    {
        "id": "3318a204d4e5be79",
        "type": "function",
        "z": "3186fe8a8438c19e",
        "g": "20ea7f9d62b59c56",
        "name": "inicialize parameters ",
        "func": "// Verificar se msg.payload é um número válido\nif (msg.payload === true) {\n    // Se for undefined, null ou não for um número, definir Kp_3 como 0\n    flow.set(\"ti\", 0);\n    flow.set(\"td\", 0);\n    flow.set(\"kp\", 0);\n    flow.set(\"pv\", 0);\n    flow.set(\"setpoint\", 0);\n    flow.set(\"Error\", 0);\n    flow.set(\"integrative\", 0)\n    flow.set(\"ManipulateVariable\", 0);\n    flow.set(\"time\", 0);\n} \nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1540,
        "y": 780,
        "wires": [
            []
        ]
    },
    {
        "id": "08600164236156fc",
        "type": "inject",
        "z": "3186fe8a8438c19e",
        "g": "20ea7f9d62b59c56",
        "name": "SE Parameters",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "0.3",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 460,
        "y": 840,
        "wires": [
            [
                "96324f6dc3cb5d91"
            ]
        ]
    },
    {
        "id": "e40331861ff0ed42",
        "type": "OpcUa-Item",
        "z": "3186fe8a8438c19e",
        "g": "20ea7f9d62b59c56",
        "item": "ns=3;i=1477",
        "datatype": "String",
        "value": "",
        "name": "",
        "x": 1160,
        "y": 840,
        "wires": [
            [
                "d6b216d5f8234093"
            ]
        ]
    },
    {
        "id": "d6b216d5f8234093",
        "type": "OpcUa-Client",
        "z": "3186fe8a8438c19e",
        "g": "20ea7f9d62b59c56",
        "endpoint": "f23add3fd8d371dd",
        "action": "write",
        "deadbandtype": "a",
        "deadbandvalue": 1,
        "time": 10,
        "timeUnit": "s",
        "certificate": "n",
        "localfile": "",
        "localkeyfile": "",
        "securitymode": "None",
        "securitypolicy": "None",
        "useTransport": false,
        "maxChunkCount": 1,
        "maxMessageSize": 8192,
        "receiveBufferSize": 8192,
        "sendBufferSize": 8192,
        "name": "Write",
        "x": 1350,
        "y": 840,
        "wires": [
            [
                "a3988e125d704e63"
            ],
            []
        ]
    },
    {
        "id": "a3988e125d704e63",
        "type": "debug",
        "z": "3186fe8a8438c19e",
        "g": "20ea7f9d62b59c56",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1550,
        "y": 840,
        "wires": []
    },
    {
        "id": "8908e21813fa4b7c",
        "type": "OpcUa-Item",
        "z": "3186fe8a8438c19e",
        "g": "20ea7f9d62b59c56",
        "item": "  ns=3;i=1484",
        "datatype": "String",
        "value": "",
        "name": "",
        "x": 820,
        "y": 900,
        "wires": [
            [
                "49b252de8afea4b1"
            ]
        ]
    },
    {
        "id": "49b252de8afea4b1",
        "type": "OpcUa-Client",
        "z": "3186fe8a8438c19e",
        "g": "20ea7f9d62b59c56",
        "endpoint": "f23add3fd8d371dd",
        "action": "read",
        "deadbandtype": "a",
        "deadbandvalue": 1,
        "time": 10,
        "timeUnit": "s",
        "certificate": "n",
        "localfile": "",
        "localkeyfile": "",
        "securitymode": "None",
        "securitypolicy": "None",
        "useTransport": false,
        "maxChunkCount": 1,
        "maxMessageSize": 8192,
        "receiveBufferSize": 8192,
        "sendBufferSize": 8192,
        "name": "Read",
        "x": 970,
        "y": 900,
        "wires": [
            [
                "eba390ebef7c8eab"
            ],
            []
        ]
    },
    {
        "id": "eba390ebef7c8eab",
        "type": "function",
        "z": "3186fe8a8438c19e",
        "g": "20ea7f9d62b59c56",
        "name": "stringToJSON",
        "func": "\nlet data = msg.payload; // Assuming msg.payload contains the string \"{}\"\ntry {\n    msg.payload = JSON.parse(data); // Convert the string into a JSON object\n} catch (e) {\n    node.error(\"Invalid JSON format: \" + e);\n}\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1120,
        "y": 900,
        "wires": [
            [
                "733ef7492979a67e"
            ]
        ]
    },
    {
        "id": "2aae9482af04eca3",
        "type": "debug",
        "z": "3186fe8a8438c19e",
        "g": "20ea7f9d62b59c56",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1550,
        "y": 900,
        "wires": []
    },
    {
        "id": "8204b71c514190b4",
        "type": "function",
        "z": "3186fe8a8438c19e",
        "g": "20ea7f9d62b59c56",
        "name": "flow pic129_daq",
        "func": "// Converter o valor de msg.payload para número (float)\nvar numericValue = parseFloat(msg.payload);\n\n// Armazenar a variável global como número\nflow.set(\"pic129_daq\", numericValue);\nmsg.payload = numericValue\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1120,
        "y": 720,
        "wires": [
            [
                "4031435cd43ed9d9"
            ]
        ]
    },
    {
        "id": "e1392b2d49e5c648",
        "type": "ui_chart",
        "z": "3186fe8a8438c19e",
        "g": "42194546ce20401d",
        "name": "",
        "group": "babde70eca34e3fd",
        "order": 1,
        "width": 12,
        "height": 6,
        "label": "SetPoint x Process variable",
        "chartType": "line",
        "legend": "true",
        "xformat": "auto",
        "interpolate": "linear",
        "nodata": "",
        "dot": false,
        "ymin": "0",
        "ymax": "100",
        "removeOlder": "3",
        "removeOlderPoints": "",
        "removeOlderUnit": "60",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#00ff4c",
            "#00d5ff",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "className": "",
        "x": 1520,
        "y": 1420,
        "wires": [
            []
        ]
    },
    {
        "id": "96446b636567bda1",
        "type": "inject",
        "z": "3186fe8a8438c19e",
        "g": "42194546ce20401d",
        "name": "One second cyclical request",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "1",
        "crontab": "",
        "once": false,
        "onceDelay": "1",
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 520,
        "y": 1400,
        "wires": [
            [
                "be090862dd2e6eba",
                "fdacd01fbf159102",
                "481a89ce9c9e7f18",
                "1262ed0cbb07c26f",
                "0c65255027a95eca"
            ]
        ]
    },
    {
        "id": "2ac7c6c5b77322ce",
        "type": "ui_chart",
        "z": "3186fe8a8438c19e",
        "g": "42194546ce20401d",
        "name": "",
        "group": "babde70eca34e3fd",
        "order": 2,
        "width": 12,
        "height": 6,
        "label": "Manipulated variable",
        "chartType": "line",
        "legend": "true",
        "xformat": "auto",
        "interpolate": "linear",
        "nodata": "",
        "dot": false,
        "ymin": "-20",
        "ymax": "100",
        "removeOlder": "3",
        "removeOlderPoints": "",
        "removeOlderUnit": "60",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#fbff00",
            "#ff0000",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "className": "",
        "x": 1540,
        "y": 1500,
        "wires": [
            []
        ]
    },
    {
        "id": "9617969c835c7a2d",
        "type": "ui_text",
        "z": "3186fe8a8438c19e",
        "g": "42194546ce20401d",
        "group": "a1b80531659f1a39",
        "order": 10,
        "width": 3,
        "height": 1,
        "name": "",
        "label": "Td",
        "format": "{{msg.payload}}",
        "layout": "col-center",
        "className": "",
        "style": true,
        "font": "Times New Roman,Times,serif",
        "fontSize": "20",
        "color": "#469daf",
        "x": 1590,
        "y": 1280,
        "wires": []
    },
    {
        "id": "4adb4b3c22ec980f",
        "type": "ui_text",
        "z": "3186fe8a8438c19e",
        "g": "42194546ce20401d",
        "group": "a1b80531659f1a39",
        "order": 7,
        "width": 3,
        "height": 1,
        "name": "",
        "label": "kp",
        "format": "{{msg.payload}}",
        "layout": "col-center",
        "className": "",
        "style": true,
        "font": "",
        "fontSize": "20",
        "color": "#469daf",
        "x": 1590,
        "y": 1320,
        "wires": []
    },
    {
        "id": "4923490849b3e9b1",
        "type": "ui_text",
        "z": "3186fe8a8438c19e",
        "g": "42194546ce20401d",
        "group": "a1b80531659f1a39",
        "order": 13,
        "width": 3,
        "height": 1,
        "name": "",
        "label": "Ti",
        "format": "{{msg.payload}}",
        "layout": "col-center",
        "className": "",
        "style": true,
        "font": "",
        "fontSize": "20",
        "color": "#469daf",
        "x": 1590,
        "y": 1360,
        "wires": []
    },
    {
        "id": "be090862dd2e6eba",
        "type": "function",
        "z": "3186fe8a8438c19e",
        "g": "42194546ce20401d",
        "name": "Read pid params",
        "func": "// Recuperar as variáveis globais\nvar ti = flow.get(\"ti\");\nvar kp = flow.get(\"kp\");\nvar td = flow.get(\"td\");\n\n// Criar mensagens para cada saída\nvar msg1 = { payload: td };\nvar msg2 = { payload: kp };\nvar msg3 = { payload: ti };\n\n\n// Retornar as mensagens para as respectivas saídas\nreturn [msg1, msg2, msg3];",
        "outputs": 3,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1090,
        "y": 1320,
        "wires": [
            [
                "9617969c835c7a2d"
            ],
            [
                "4adb4b3c22ec980f"
            ],
            [
                "4923490849b3e9b1"
            ]
        ]
    },
    {
        "id": "fdacd01fbf159102",
        "type": "function",
        "z": "3186fe8a8438c19e",
        "g": "42194546ce20401d",
        "name": "setpoint",
        "func": "// Recuperar as variáveis globais\nvar setpoint = flow.get(\"setpoint\")\nmsg.payload = setpoint;\nmsg.topic = \"setpoint\";\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1060,
        "y": 1400,
        "wires": [
            [
                "e1392b2d49e5c648"
            ]
        ]
    },
    {
        "id": "481a89ce9c9e7f18",
        "type": "function",
        "z": "3186fe8a8438c19e",
        "g": "42194546ce20401d",
        "name": "ProcessVariable",
        "func": "// Recuperar as variáveis globais\nvar pv = flow.get(\"pic129_daq\")\nmsg.payload = pv;\nmsg.topic = \"Process Variable\";\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1080,
        "y": 1440,
        "wires": [
            [
                "e1392b2d49e5c648"
            ]
        ]
    },
    {
        "id": "1262ed0cbb07c26f",
        "type": "function",
        "z": "3186fe8a8438c19e",
        "g": "42194546ce20401d",
        "name": "ManipulateVariable",
        "func": "// Recuperar as variáveis globais\nvar mv = flow.get(\"manipulateVariable\")\nmsg.payload = mv;\nmsg.topic = \"Manipulate Variable\";\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1090,
        "y": 1520,
        "wires": [
            [
                "2ac7c6c5b77322ce"
            ]
        ]
    },
    {
        "id": "0c65255027a95eca",
        "type": "function",
        "z": "3186fe8a8438c19e",
        "g": "42194546ce20401d",
        "name": "Error",
        "func": "// Recuperar as variáveis globais\nvar error = flow.get(\"error\")\nmsg.payload = error;\nmsg.topic = \"Error\";\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1050,
        "y": 1480,
        "wires": [
            [
                "2ac7c6c5b77322ce"
            ]
        ]
    },
    {
        "id": "d2dad8bdb1f9588a",
        "type": "ui_numeric",
        "z": "3186fe8a8438c19e",
        "g": "9307bc4b6a9e086b",
        "name": "",
        "label": "Kp",
        "tooltip": "",
        "group": "a1b80531659f1a39",
        "order": 6,
        "width": 3,
        "height": 1,
        "wrap": false,
        "passthru": true,
        "topic": "topic",
        "topicType": "msg",
        "format": "{{value}}",
        "min": 0,
        "max": "30",
        "step": "0.1",
        "className": "",
        "x": 910,
        "y": 1720,
        "wires": [
            [
                "c2c772182d161172"
            ]
        ]
    },
    {
        "id": "c2c772182d161172",
        "type": "function",
        "z": "3186fe8a8438c19e",
        "g": "9307bc4b6a9e086b",
        "name": "kp",
        "func": "flow.set(\"kp\", msg.payload);\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1590,
        "y": 1680,
        "wires": [
            []
        ]
    },
    {
        "id": "7c04a5f494860b6d",
        "type": "ui_numeric",
        "z": "3186fe8a8438c19e",
        "g": "9307bc4b6a9e086b",
        "name": "",
        "label": "Td",
        "tooltip": "",
        "group": "a1b80531659f1a39",
        "order": 9,
        "width": 3,
        "height": 1,
        "wrap": false,
        "passthru": true,
        "topic": "topic",
        "topicType": "msg",
        "format": "{{value}}",
        "min": 0,
        "max": "30",
        "step": "0.1",
        "className": "",
        "x": 910,
        "y": 1800,
        "wires": [
            [
                "6242602c82eb43fd"
            ]
        ]
    },
    {
        "id": "6242602c82eb43fd",
        "type": "function",
        "z": "3186fe8a8438c19e",
        "g": "9307bc4b6a9e086b",
        "name": "td",
        "func": "flow.set(\"td\", msg.payload);\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1590,
        "y": 1760,
        "wires": [
            []
        ]
    },
    {
        "id": "9d9e8a6c7947961a",
        "type": "function",
        "z": "3186fe8a8438c19e",
        "g": "9307bc4b6a9e086b",
        "name": "ti",
        "func": "flow.set(\"ti\", msg.payload);\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1590,
        "y": 1840,
        "wires": [
            []
        ]
    },
    {
        "id": "bbdf86baa115940b",
        "type": "ui_numeric",
        "z": "3186fe8a8438c19e",
        "g": "9307bc4b6a9e086b",
        "name": "",
        "label": "Ti",
        "tooltip": "",
        "group": "a1b80531659f1a39",
        "order": 12,
        "width": 3,
        "height": 1,
        "wrap": false,
        "passthru": true,
        "topic": "topic",
        "topicType": "msg",
        "format": "{{value}}",
        "min": 0,
        "max": 10,
        "step": "0.1",
        "className": "",
        "x": 910,
        "y": 1900,
        "wires": [
            [
                "9d9e8a6c7947961a"
            ]
        ]
    },
    {
        "id": "c9db8691e018507f",
        "type": "ui_text",
        "z": "3186fe8a8438c19e",
        "g": "9307bc4b6a9e086b",
        "group": "a1b80531659f1a39",
        "order": 4,
        "width": 0,
        "height": 0,
        "name": "",
        "label": "Select Pid 4.0 Paramas",
        "format": "{{msg.payload}}",
        "layout": "col-center",
        "className": "",
        "style": false,
        "font": "",
        "fontSize": 16,
        "color": "#000000",
        "x": 490,
        "y": 1640,
        "wires": []
    },
    {
        "id": "5522f67198f538f7",
        "type": "ui_button",
        "z": "3186fe8a8438c19e",
        "g": "9307bc4b6a9e086b",
        "name": "",
        "group": "a1b80531659f1a39",
        "order": 5,
        "width": 3,
        "height": 1,
        "passthru": false,
        "label": "Kp Standart",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "className": "",
        "icon": "",
        "payload": "0.5",
        "payloadType": "num",
        "topic": "topic",
        "topicType": "msg",
        "x": 450,
        "y": 1680,
        "wires": [
            [
                "d2dad8bdb1f9588a",
                "c2c772182d161172"
            ]
        ]
    },
    {
        "id": "3967de6a0b3ac9c9",
        "type": "ui_button",
        "z": "3186fe8a8438c19e",
        "g": "9307bc4b6a9e086b",
        "name": "",
        "group": "a1b80531659f1a39",
        "order": 8,
        "width": 3,
        "height": 1,
        "passthru": false,
        "label": "Td Standart",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "className": "",
        "icon": "",
        "payload": "0.1",
        "payloadType": "num",
        "topic": "topic",
        "topicType": "msg",
        "x": 450,
        "y": 1760,
        "wires": [
            [
                "7c04a5f494860b6d",
                "6242602c82eb43fd"
            ]
        ]
    },
    {
        "id": "9d9d754eb55e2883",
        "type": "ui_button",
        "z": "3186fe8a8438c19e",
        "g": "9307bc4b6a9e086b",
        "name": "",
        "group": "a1b80531659f1a39",
        "order": 11,
        "width": 3,
        "height": 1,
        "passthru": false,
        "label": "Ti Standart",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "className": "",
        "icon": "",
        "payload": "2",
        "payloadType": "num",
        "topic": "topic",
        "topicType": "msg",
        "x": 450,
        "y": 1840,
        "wires": [
            [
                "bbdf86baa115940b",
                "9d9e8a6c7947961a"
            ]
        ]
    },
    {
        "id": "4031435cd43ed9d9",
        "type": "ui_gauge",
        "z": "3186fe8a8438c19e",
        "g": "20ea7f9d62b59c56",
        "name": "",
        "group": "a1b80531659f1a39",
        "order": 1,
        "width": 9,
        "height": 5,
        "gtype": "compass",
        "title": "Pic 129",
        "label": "%",
        "format": "{{payload}}",
        "min": 0,
        "max": "100",
        "colors": [
            "#00b500",
            "#e6e600",
            "#ca3838"
        ],
        "seg1": "",
        "seg2": "",
        "diff": false,
        "className": "",
        "x": 1580,
        "y": 720,
        "wires": []
    },
    {
        "id": "a06a912bc2441a0f",
        "type": "inject",
        "z": "3186fe8a8438c19e",
        "g": "20ea7f9d62b59c56",
        "name": "SE Payload",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "0.3",
        "crontab": "",
        "once": false,
        "onceDelay": "",
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 470,
        "y": 900,
        "wires": [
            [
                "95caecea4774b867"
            ]
        ]
    },
    {
        "id": "c2e575ee3a561480",
        "type": "ui_button",
        "z": "3186fe8a8438c19e",
        "g": "09d1acf6f48a5eab",
        "name": "",
        "group": "a1b80531659f1a39",
        "order": 14,
        "width": 3,
        "height": 1,
        "passthru": false,
        "label": "ON",
        "tooltip": "",
        "color": "",
        "bgcolor": "green",
        "className": "Button_ON",
        "icon": "",
        "payload": "true",
        "payloadType": "bool",
        "topic": "topic",
        "topicType": "msg",
        "x": 390,
        "y": 220,
        "wires": [
            [
                "757785e74aec083b"
            ]
        ]
    },
    {
        "id": "322a23f36baaf504",
        "type": "ui_button",
        "z": "3186fe8a8438c19e",
        "g": "09d1acf6f48a5eab",
        "name": "",
        "group": "a1b80531659f1a39",
        "order": 15,
        "width": 3,
        "height": 1,
        "passthru": false,
        "label": "OFF",
        "tooltip": "",
        "color": "",
        "bgcolor": "red",
        "className": "Button_OFF",
        "icon": "",
        "payload": "false",
        "payloadType": "bool",
        "topic": "topic",
        "topicType": "msg",
        "x": 390,
        "y": 260,
        "wires": [
            [
                "c89eb081a9f1cc69",
                "757785e74aec083b"
            ]
        ]
    },
    {
        "id": "c05cb219b409d73c",
        "type": "ui_switch",
        "z": "3186fe8a8438c19e",
        "g": "09d1acf6f48a5eab",
        "name": "",
        "label": "",
        "tooltip": "",
        "group": "a1b80531659f1a39",
        "order": 16,
        "width": 3,
        "height": 1,
        "passthru": true,
        "decouple": "false",
        "topic": "topic",
        "topicType": "msg",
        "style": "",
        "onvalue": "true",
        "onvalueType": "bool",
        "onicon": "send",
        "oncolor": "green",
        "offvalue": "false",
        "offvalueType": "bool",
        "officon": "",
        "offcolor": "red",
        "animate": false,
        "className": "switch",
        "x": 1550,
        "y": 320,
        "wires": [
            []
        ]
    },
    {
        "id": "757785e74aec083b",
        "type": "function",
        "z": "3186fe8a8438c19e",
        "g": "09d1acf6f48a5eab",
        "name": "Flow Eneable",
        "func": "     if  (msg.payload === true) {\n         flow.set(\"Eneable\", 1)\n         msg.payload = \"ativado\"\n         return msg;\n\n      } else {\n         flow.set(\"Eneable\", 0)\n         msg.payload = \"desativado\"\n         return msg;\n      }\n   ",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 640,
        "y": 260,
        "wires": [
            [
                "6a723b6fa7561cfe"
            ]
        ]
    },
    {
        "id": "c89eb081a9f1cc69",
        "type": "function",
        "z": "3186fe8a8438c19e",
        "g": "09d1acf6f48a5eab",
        "name": "Enable OFF",
        "func": "for (let i = 0; i < 3; i++) {\n        msg.payload = 0;\n        node.send(msg); // Envia a mensagem somente se a condição for atendida\n}\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 630,
        "y": 220,
        "wires": [
            [
                "7a7f871a0d629403"
            ]
        ]
    },
    {
        "id": "6a723b6fa7561cfe",
        "type": "debug",
        "z": "3186fe8a8438c19e",
        "g": "09d1acf6f48a5eab",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1510,
        "y": 260,
        "wires": []
    },
    {
        "id": "db8d090def42652f",
        "type": "inject",
        "z": "3186fe8a8438c19e",
        "g": "09d1acf6f48a5eab",
        "name": "Trigger [enable]",
        "props": [
            {
                "p": "enable",
                "v": "Eneable",
                "vt": "flow"
            }
        ],
        "repeat": "0.5",
        "crontab": "",
        "once": false,
        "onceDelay": "",
        "topic": "",
        "x": 450,
        "y": 320,
        "wires": [
            [
                "1741fe6dd7c0b8b0"
            ]
        ]
    },
    {
        "id": "1741fe6dd7c0b8b0",
        "type": "function",
        "z": "3186fe8a8438c19e",
        "g": "09d1acf6f48a5eab",
        "name": "Trigger [enable]",
        "func": " if(msg.enable == 1){\n   msg.payload = true\n   return msg;\n }else{\n    msg.payload = false\n    return msg;\n }",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 640,
        "y": 320,
        "wires": [
            [
                "c05cb219b409d73c"
            ]
        ]
    },
    {
        "id": "35362db110e5bcce",
        "type": "debug",
        "z": "3186fe8a8438c19e",
        "g": "09d1acf6f48a5eab",
        "name": "debug 48",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1520,
        "y": 220,
        "wires": []
    },
    {
        "id": "7b545a69e2b6427b",
        "type": "function",
        "z": "3186fe8a8438c19e",
        "g": "20ea7f9d62b59c56",
        "name": "Enable",
        "func": "// Verificar se \"Eneable\" é igual a 1\nif (flow.get(\"Eneable\") !== 1) {\n    return null; // Não faz nada se \"Eneable\" não for 1\n} else {\n    var manipulateVariable = flow.get(\"manipulateVariable\");\n    msg.payload = manipulateVariable;\n    return msg;\n}",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 800,
        "y": 960,
        "wires": [
            [
                "2b12218d72e4befd",
                "8b97d6c8dbe27925"
            ]
        ]
    },
    {
        "id": "8a821c77a01b68f6",
        "type": "inject",
        "z": "3186fe8a8438c19e",
        "g": "20ea7f9d62b59c56",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "0.3",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 500,
        "y": 960,
        "wires": [
            [
                "7b545a69e2b6427b"
            ]
        ]
    },
    {
        "id": "7d9c7181e456205c",
        "type": "debug",
        "z": "3186fe8a8438c19e",
        "g": "20ea7f9d62b59c56",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1550,
        "y": 960,
        "wires": []
    },
    {
        "id": "c8260d5b46d871b5",
        "type": "function",
        "z": "3186fe8a8438c19e",
        "g": "20ea7f9d62b59c56",
        "name": "value",
        "func": "// Função para extração apenas do value\n// Obtemos o payload recebido na mensagem\nconst inputPayload = msg.payload;\n\n// Verificamos se o campo \"value\" existe no payload\nif (inputPayload && inputPayload.value) {\n    // Definimos o novo payload com o campo \"value\"\n    msg.payload = inputPayload.value;\n} else {\n    // Se \"value\" não existe, retornamos uma mensagem de erro no payload\n    msg.payload = { error: \"Campo 'value' não encontrado no payload.\" };\n}\n\n// Retornamos a mensagem modificada\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 810,
        "y": 840,
        "wires": [
            [
                "a04618cddd8846f7"
            ]
        ]
    },
    {
        "id": "a04618cddd8846f7",
        "type": "function",
        "z": "3186fe8a8438c19e",
        "g": "20ea7f9d62b59c56",
        "name": "JSONTostring",
        "func": "let data = msg.payload; // Assuming msg.payload contains the JSON object\ntry {\n    msg.payload = JSON.stringify(data); // Convert the JSON object into a string\n} catch (e) {\n    node.error(\"Invalid JSON object: \" + e);\n}\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 960,
        "y": 840,
        "wires": [
            [
                "e40331861ff0ed42",
                "30266b36e8b3a225"
            ]
        ]
    },
    {
        "id": "98f42ddfa0d30ca2",
        "type": "OpcUa-Client",
        "z": "3186fe8a8438c19e",
        "g": "20ea7f9d62b59c56",
        "endpoint": "c9722999d7a6ef78",
        "action": "write",
        "deadbandtype": "a",
        "deadbandvalue": 1,
        "time": 10,
        "timeUnit": "s",
        "certificate": "n",
        "localfile": "",
        "localkeyfile": "",
        "securitymode": "None",
        "securitypolicy": "None",
        "useTransport": false,
        "maxChunkCount": 1,
        "maxMessageSize": 8192,
        "receiveBufferSize": 8192,
        "sendBufferSize": 8192,
        "name": "Write",
        "x": 1270,
        "y": 960,
        "wires": [
            [
                "7d9c7181e456205c"
            ],
            []
        ]
    },
    {
        "id": "2b12218d72e4befd",
        "type": "OpcUa-Item",
        "z": "3186fe8a8438c19e",
        "g": "20ea7f9d62b59c56",
        "item": "ns=3;i=458",
        "datatype": "Double",
        "value": "",
        "name": "",
        "x": 1120,
        "y": 960,
        "wires": [
            [
                "98f42ddfa0d30ca2"
            ]
        ]
    },
    {
        "id": "95caecea4774b867",
        "type": "function",
        "z": "3186fe8a8438c19e",
        "g": "20ea7f9d62b59c56",
        "name": "Enable",
        "func": "// Verificar se \"Eneable\" é igual a 1\nif (flow.get(\"Eneable\") !== 1) {\n    return null; // Não faz nada se \"Eneable\" não for 1\n} else {\nreturn msg;\n}",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 640,
        "y": 900,
        "wires": [
            [
                "8908e21813fa4b7c"
            ]
        ]
    },
    {
        "id": "6aaf346c7fd9a251",
        "type": "OpcUa-Client",
        "z": "3186fe8a8438c19e",
        "g": "09d1acf6f48a5eab",
        "endpoint": "c9722999d7a6ef78",
        "action": "write",
        "deadbandtype": "a",
        "deadbandvalue": 1,
        "time": 10,
        "timeUnit": "s",
        "certificate": "n",
        "localfile": "",
        "localkeyfile": "",
        "securitymode": "None",
        "securitypolicy": "None",
        "useTransport": false,
        "maxChunkCount": 1,
        "maxMessageSize": 8192,
        "receiveBufferSize": 8192,
        "sendBufferSize": 8192,
        "name": "Write",
        "x": 1130,
        "y": 220,
        "wires": [
            [
                "35362db110e5bcce"
            ],
            []
        ]
    },
    {
        "id": "7a7f871a0d629403",
        "type": "OpcUa-Item",
        "z": "3186fe8a8438c19e",
        "g": "09d1acf6f48a5eab",
        "item": "ns=3;i=458",
        "datatype": "Double",
        "value": "",
        "name": "",
        "x": 980,
        "y": 220,
        "wires": [
            [
                "6aaf346c7fd9a251"
            ]
        ]
    },
    {
        "id": "f26f375586c46d29",
        "type": "OpcUa-Browser",
        "z": "3186fe8a8438c19e",
        "g": "097f3bfdd982dd15",
        "endpoint": "9883401a98aa8537",
        "item": "",
        "datatype": "",
        "topic": "",
        "items": [],
        "name": "",
        "x": 2030,
        "y": 1020,
        "wires": [
            [
                "74ab13a5dfa0e043"
            ]
        ]
    },
    {
        "id": "74ab13a5dfa0e043",
        "type": "debug",
        "z": "3186fe8a8438c19e",
        "g": "097f3bfdd982dd15",
        "name": "debug 49",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 2280,
        "y": 1040,
        "wires": []
    },
    {
        "id": "85bd4de45377406c",
        "type": "OpcUa-Discovery",
        "z": "3186fe8a8438c19e",
        "g": "097f3bfdd982dd15",
        "name": "",
        "x": 2030,
        "y": 940,
        "wires": [
            [
                "5ed3a0713dfffc8a"
            ]
        ]
    },
    {
        "id": "5ed3a0713dfffc8a",
        "type": "debug",
        "z": "3186fe8a8438c19e",
        "g": "097f3bfdd982dd15",
        "name": "debug 50",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 2210,
        "y": 960,
        "wires": []
    },
    {
        "id": "30266b36e8b3a225",
        "type": "debug",
        "z": "3186fe8a8438c19e",
        "g": "20ea7f9d62b59c56",
        "name": "debug 58",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1080,
        "y": 800,
        "wires": []
    },
    {
        "id": "8b97d6c8dbe27925",
        "type": "debug",
        "z": "3186fe8a8438c19e",
        "g": "097f3bfdd982dd15",
        "name": "debug 63",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1160,
        "y": 1060,
        "wires": []
    },
    {
        "id": "eed744cdf6fff310",
        "type": "OpcUa-Item",
        "z": "3186fe8a8438c19e",
        "g": "097f3bfdd982dd15",
        "item": "br=/Objects/AASROOT/pic118_pid4/OperationalData/Payload/Value",
        "datatype": "String",
        "value": "",
        "name": "",
        "x": 760,
        "y": 1060,
        "wires": [
            []
        ]
    },
    {
        "id": "bdfc02e7309f6b39",
        "type": "moleculer-DAQ_AI_I",
        "z": "c8c940f0f7546447",
        "broker": "63ebd62b2640f3f7",
        "name": "",
        "topic": "",
        "options": "{}",
        "ident": "1",
        "pv": "Channel_1",
        "stack": "0",
        "x": 580,
        "y": 400,
        "wires": [
            [
                "calc_response"
            ]
        ]
    },
    {
        "id": "inject_start",
        "type": "inject",
        "z": "c8c940f0f7546447",
        "name": "Iniciar",
        "props": [
            {
                "p": "enable",
                "v": "1",
                "vt": "num"
            }
        ],
        "repeat": "1",
        "crontab": "",
        "once": false,
        "onceDelay": "0.5",
        "topic": "",
        "x": 160,
        "y": 400,
        "wires": [
            [
                "store_start"
            ]
        ]
    },
    {
        "id": "store_start",
        "type": "function",
        "z": "c8c940f0f7546447",
        "name": "Salvar timestamp inicial",
        "func": "msg.startTime = Date.now();\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 370,
        "y": 400,
        "wires": [
            [
                "bdfc02e7309f6b39"
            ]
        ]
    },
    {
        "id": "calc_response",
        "type": "function",
        "z": "c8c940f0f7546447",
        "name": "Calcular tempo e média",
        "func": "// Inicializa o array se necessário\nif (!flow.get(\"tempos_Sensor\")) {\n    flow.set(\"tempos_Sensor\", []);\n}\n\nlet tempos_Sensor = flow.get(\"tempos_Sensor\");\nlet tempo = Date.now() - msg.startTime;\ntempos_Sensor.push(tempo);\nflow.set(\"tempos_Sensor\", tempos_Sensor);\n\n// Quando atingir 300 amostras, calcula a média e o desvio padrão\nif (tempos_Sensor.length >= 300) {\n    // Cálculo da média\n    let soma = tempos_Sensor.reduce((a, b) => a + b, 0);\n    let media = soma / tempos_Sensor.length;\n\n    // Cálculo do desvio padrão\n    let variancia = tempos_Sensor.reduce((acc, val) => {\n        return acc + Math.pow(val - media, 2);\n    }, 0) / tempos_Sensor.length;\n\n    let desvioPadrao = Math.sqrt(variancia);\n\n    msg.payload = `Serviço de Sensor: Média (300 amostras): ${media.toFixed(2)} ms Desvio padrão: ${desvioPadrao.toFixed(2)} ms`;\n\n    // Limpa o array para a próxima rodada\n    flow.set(\"tempos_Sensor\", []);\n    return msg;\n} else {\n    return null;\n}\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 910,
        "y": 400,
        "wires": [
            [
                "debug_output"
            ]
        ]
    },
    {
        "id": "debug_output",
        "type": "debug",
        "z": "c8c940f0f7546447",
        "name": "Média Final Sensor",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1170,
        "y": 400,
        "wires": []
    },
    {
        "id": "8cd51c8041465b33",
        "type": "inject",
        "z": "c8c940f0f7546447",
        "name": "Iniciar",
        "props": [
            {
                "p": "enable",
                "v": "1",
                "vt": "num"
            },
            {
                "p": "setpoint",
                "v": "50",
                "vt": "num"
            },
            {
                "p": "pv",
                "v": "1",
                "vt": "num"
            },
            {
                "p": "td",
                "v": "1",
                "vt": "num"
            },
            {
                "p": "ti",
                "v": "1",
                "vt": "num"
            },
            {
                "p": "kp",
                "v": "1",
                "vt": "num"
            }
        ],
        "repeat": "1",
        "crontab": "",
        "once": false,
        "onceDelay": "0.5",
        "topic": "",
        "x": 160,
        "y": 620,
        "wires": [
            [
                "37b3e2e702050bb3"
            ]
        ]
    },
    {
        "id": "37b3e2e702050bb3",
        "type": "function",
        "z": "c8c940f0f7546447",
        "name": "Salvar timestamp inicial",
        "func": "msg.startTime = Date.now();\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 370,
        "y": 620,
        "wires": [
            [
                "b143c719413b38c1"
            ]
        ]
    },
    {
        "id": "b143c719413b38c1",
        "type": "moleculer-PID4",
        "z": "c8c940f0f7546447",
        "broker": "63ebd62b2640f3f7",
        "name": "",
        "topic": "",
        "options": "{}",
        "spdyn": "{}",
        "ident": "1",
        "pv": "",
        "setpoint": "",
        "loopControl": "control-mesh-32.pidplus",
        "x": 570,
        "y": 620,
        "wires": [
            [
                "6d1ff069f6677574"
            ],
            []
        ]
    },
    {
        "id": "6d1ff069f6677574",
        "type": "function",
        "z": "c8c940f0f7546447",
        "name": "Calcular tempo e média",
        "func": "// Inicializa o array se necessário\nif (!flow.get(\"tempos_Controlador\")) {\n    flow.set(\"tempos_Controlador\", []);\n}\n\nlet tempos_Controlador = flow.get(\"tempos_Controlador\");\nlet tempo = Date.now() - msg.startTime;\ntempos_Controlador.push(tempo);\nflow.set(\"tempos_Controlador\", tempos_Controlador);\n\n// Quando atingir 300 amostras, calcula a média e o desvio padrão\nif (tempos_Controlador.length >= 300) {\n    // Cálculo da média\n    let soma = tempos_Controlador.reduce((a, b) => a + b, 0);\n    let media = soma / tempos_Controlador.length;\n\n    // Cálculo do desvio padrão\n    let variancia = tempos_Controlador.reduce((acc, val) => {\n        return acc + Math.pow(val - media, 2);\n    }, 0) / tempos_Controlador.length;\n\n    let desvioPadrao = Math.sqrt(variancia);\n\n    msg.payload = `Serviço de Controle: Média (300 amostras): ${media.toFixed(2)} ms Desvio padrão: ${desvioPadrao.toFixed(2)} ms`;\n\n    // Limpa o array para a próxima rodada\n    flow.set(\"tempos_Controlador\", []);\n    return msg;\n} else {\n    return null;\n}\n\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 910,
        "y": 600,
        "wires": [
            [
                "72b8768212c1f6f3"
            ]
        ]
    },
    {
        "id": "72b8768212c1f6f3",
        "type": "debug",
        "z": "c8c940f0f7546447",
        "name": "Média Final Contolador",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1190,
        "y": 600,
        "wires": []
    },
    {
        "id": "f2f3f7ac2e9c670e",
        "type": "inject",
        "z": "c8c940f0f7546447",
        "name": "Iniciar",
        "props": [
            {
                "p": "enable",
                "v": "1",
                "vt": "num"
            },
            {
                "p": "mv",
                "v": "0",
                "vt": "num"
            }
        ],
        "repeat": "1",
        "crontab": "",
        "once": false,
        "onceDelay": "0.5",
        "topic": "",
        "x": 160,
        "y": 500,
        "wires": [
            [
                "425f33239a6d5e4d"
            ]
        ]
    },
    {
        "id": "425f33239a6d5e4d",
        "type": "function",
        "z": "c8c940f0f7546447",
        "name": "Salvar timestamp inicial",
        "func": "msg.startTime = Date.now();\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 370,
        "y": 500,
        "wires": [
            [
                "fbd2e287bf35b318"
            ]
        ]
    },
    {
        "id": "0f53185c8f400340",
        "type": "function",
        "z": "c8c940f0f7546447",
        "name": "Calcular tempo e média",
        "func": "// Inicializa o array se necessário\nif (!flow.get(\"tempos_Atuador\")) {\n    flow.set(\"tempos_Atuador\", []);\n}\n\nlet tempos_Atuador = flow.get(\"tempos_Atuador\");\nlet tempo = Date.now() - msg.startTime;\ntempos_Atuador.push(tempo);\nflow.set(\"tempos_Atuador\", tempos_Atuador);\n\n// Quando atingir 300 amostras, calcula a média e o desvio padrão\nif (tempos_Atuador.length >= 300) {\n    // Cálculo da média\n    let soma = tempos_Atuador.reduce((a, b) => a + b, 0);\n    let media = soma / tempos_Atuador.length;\n\n    // Cálculo do desvio padrão\n    let variancia = tempos_Atuador.reduce((acc, val) => {\n        return acc + Math.pow(val - media, 2);\n    }, 0) / tempos_Atuador.length;\n\n    let desvioPadrao = Math.sqrt(variancia);\n\n    msg.payload = `Serviço de Atuador: Média (300 amostras): ${media.toFixed(2)} ms Desvio padrão: ${desvioPadrao.toFixed(2)} ms`;\n\n    // Limpa o array para a próxima rodada\n    flow.set(\"tempos_Atuador\", []);\n    return msg;\n} else {\n    return null;\n}\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 910,
        "y": 500,
        "wires": [
            [
                "ec92077ec66c50f7"
            ]
        ]
    },
    {
        "id": "ec92077ec66c50f7",
        "type": "debug",
        "z": "c8c940f0f7546447",
        "name": "Média Final Atuador",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1180,
        "y": 500,
        "wires": []
    },
    {
        "id": "fbd2e287bf35b318",
        "type": "moleculer-DAQ_AO_U_WT",
        "z": "c8c940f0f7546447",
        "broker": "63ebd62b2640f3f7",
        "name": "",
        "topic": "",
        "options": "{}",
        "ident": "1",
        "out": "Channel_2",
        "stack": "0",
        "x": 610,
        "y": 500,
        "wires": [
            [
                "0f53185c8f400340"
            ]
        ]
    },
    {
        "id": "962fb3101bbfd945",
        "type": "function",
        "z": "c8c940f0f7546447",
        "name": "Salvar timestamp inicial",
        "func": "msg.startTime = Date.now();\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 370,
        "y": 760,
        "wires": [
            [
                "59d731305abb2b39"
            ]
        ]
    },
    {
        "id": "59d731305abb2b39",
        "type": "moleculer-DAQ_AI_I",
        "z": "c8c940f0f7546447",
        "broker": "63ebd62b2640f3f7",
        "name": "",
        "topic": "",
        "options": "{}",
        "ident": "2",
        "pv": "Channel_1",
        "stack": "0",
        "x": 580,
        "y": 760,
        "wires": [
            [
                "177440552de673db"
            ]
        ]
    },
    {
        "id": "177440552de673db",
        "type": "function",
        "z": "c8c940f0f7546447",
        "name": "Pid Params",
        "func": "msg.setpoint = 50\nmsg.kp = 1\nmsg.ti = 1\nmsg.td = 1\nmsg.pv = msg.payload;\nmsg.eneable = 1;\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 870,
        "y": 760,
        "wires": [
            [
                "39ab2615792f2ef3"
            ]
        ]
    },
    {
        "id": "88a9db3703a65071",
        "type": "inject",
        "z": "c8c940f0f7546447",
        "name": "Iniciar",
        "props": [
            {
                "p": "enable",
                "v": "1",
                "vt": "num"
            }
        ],
        "repeat": "1",
        "crontab": "",
        "once": false,
        "onceDelay": "0.5",
        "topic": "",
        "x": 160,
        "y": 760,
        "wires": [
            [
                "962fb3101bbfd945"
            ]
        ]
    },
    {
        "id": "be6416c7d4e1dff5",
        "type": "inject",
        "z": "c8c940f0f7546447",
        "name": "Iniciar",
        "props": [
            {
                "p": "enable",
                "v": "1",
                "vt": "num"
            }
        ],
        "repeat": "1",
        "crontab": "",
        "once": false,
        "onceDelay": "0.5",
        "topic": "",
        "x": 160,
        "y": 300,
        "wires": [
            [
                "f69c1dd7c49641c3"
            ]
        ]
    },
    {
        "id": "f69c1dd7c49641c3",
        "type": "function",
        "z": "c8c940f0f7546447",
        "name": "Salvar timestamp inicial",
        "func": "msg.startTime = Date.now();\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 370,
        "y": 300,
        "wires": [
            [
                "8bf645cea12f42af"
            ]
        ]
    },
    {
        "id": "8bf645cea12f42af",
        "type": "function",
        "z": "c8c940f0f7546447",
        "name": "Calcular tempo e média",
        "func": "// Inicializa o array se necessário\nif (!flow.get(\"tempos\")) {\n    flow.set(\"tempos\", []);\n}\n\nlet tempos = flow.get(\"tempos\");\nlet tempo = Date.now() - msg.startTime;\ntempos.push(tempo);\nflow.set(\"tempos\", tempos);\n\n// Quando atingir 300 amostras, calcula a média e o desvio padrão\nif (tempos.length >= 300) {\n    // Cálculo da média\n    let soma = tempos.reduce((a, b) => a + b, 0);\n    let media = soma / tempos.length;\n\n    // Cálculo do desvio padrão\n    let variancia = tempos.reduce((acc, val) => {\n        return acc + Math.pow(val - media, 2);\n    }, 0) / tempos.length;\n\n    let desvioPadrao = Math.sqrt(variancia);\n\n    msg.payload = `Node-red: Média (300 amostras): ${media.toFixed(2)} ms Desvio padrão: ${desvioPadrao.toFixed(2)} ms`;\n\n    // Limpa o array para a próxima rodada\n    flow.set(\"tempos\", []);\n    return msg;\n} else {\n    return null;\n}\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 630,
        "y": 300,
        "wires": [
            [
                "59da6ac78b879b14"
            ]
        ]
    },
    {
        "id": "59da6ac78b879b14",
        "type": "debug",
        "z": "c8c940f0f7546447",
        "name": "Média FinaL Node-red",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 900,
        "y": 300,
        "wires": []
    },
    {
        "id": "9319bdf86132067c",
        "type": "inject",
        "z": "c8c940f0f7546447",
        "name": "Iniciar",
        "props": [
            {
                "p": "enable",
                "v": "1",
                "vt": "num"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": "0.5",
        "topic": "",
        "x": 150,
        "y": 220,
        "wires": [
            [
                "9368a880d7ebc286"
            ]
        ]
    },
    {
        "id": "9368a880d7ebc286",
        "type": "function",
        "z": "c8c940f0f7546447",
        "name": "Limpar vetor tempo",
        "func": "flow.set(\"tempos\", []);\nflow.set(\"tempos_Sensor\", []);\nflow.set(\"tempos_Atuador\", []);\nflow.set(\"tempos_Controlador\", []);\nflow.set(\"tempos_malha\", []);\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 350,
        "y": 220,
        "wires": [
            []
        ]
    },
    {
        "id": "39ab2615792f2ef3",
        "type": "moleculer-PID4",
        "z": "c8c940f0f7546447",
        "broker": "63ebd62b2640f3f7",
        "name": "",
        "topic": "",
        "options": "{}",
        "spdyn": "{}",
        "ident": "2",
        "pv": "",
        "setpoint": "",
        "loopControl": "control-mesh-31.pidplus",
        "x": 1030,
        "y": 760,
        "wires": [
            [
                "d8b64c2804f35dc5"
            ],
            [
                "cee003049fcaa6c5"
            ]
        ]
    },
    {
        "id": "d8b64c2804f35dc5",
        "type": "moleculer-DAQ_AI_I",
        "z": "c8c940f0f7546447",
        "broker": "63ebd62b2640f3f7",
        "name": "",
        "topic": "",
        "options": "{}",
        "ident": "2",
        "pv": "Channel_1",
        "stack": "0",
        "x": 1180,
        "y": 720,
        "wires": [
            [
                "5fbfbc6979caf2ba"
            ]
        ]
    },
    {
        "id": "5fbfbc6979caf2ba",
        "type": "function",
        "z": "c8c940f0f7546447",
        "name": "Calcular tempo e média",
        "func": "// Inicializa o array se necessário\nif (!flow.get(\"tempos_malha\")) {\n    flow.set(\"tempos_malha\", []);\n}\n\nlet tempos_malha = flow.get(\"tempos_malha\");\nlet tempo = Date.now() - msg.startTime;\ntempos_malha.push(tempo);\nflow.set(\"tempos_malha\", tempos_malha);\n\n// Quando atingir 300 amostras, calcula a média e o desvio padrão\nif (tempos_malha.length >= 300) {\n    // Cálculo da média\n    let soma = tempos_malha.reduce((a, b) => a + b, 0);\n    let media = soma / tempos_malha.length;\n\n    // Cálculo do desvio padrão\n    let variancia = tempos_malha.reduce((acc, val) => {\n        return acc + Math.pow(val - media, 2);\n    }, 0) / tempos_malha.length;\n\n    let desvioPadrao = Math.sqrt(variancia);\n\n    msg.payload = `Malha: Média (300 amostras): ${media.toFixed(2)} ms Desvio padrão: ${desvioPadrao.toFixed(2)} ms`;\n\n    // Limpa o array para a próxima rodada\n    flow.set(\"tempos_malha\", []);\n    return msg;\n} else {\n    return null;\n}\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1410,
        "y": 720,
        "wires": [
            [
                "7642f6be530c21c7"
            ]
        ]
    },
    {
        "id": "7642f6be530c21c7",
        "type": "debug",
        "z": "c8c940f0f7546447",
        "name": "Média Final Malha",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1670,
        "y": 720,
        "wires": []
    },
    {
        "id": "cee003049fcaa6c5",
        "type": "debug",
        "z": "c8c940f0f7546447",
        "name": "debug 55",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1180,
        "y": 780,
        "wires": []
    },
    {
        "id": "47540566cb5c3c11",
        "type": "function",
        "z": "3fc007a97f3fcca5",
        "g": "6b11f1b1853e2e50",
        "name": "Function ADD",
        "func": "let response = Number(msg.payload.a) + Number(msg.payload.b);\nmsg.payload = response;\nnode.send([null,null,msg]);\nmsg.emit('test.emit',\"OK\");\nmsg.broadcast('test.bcast',\"OK\")\n\nmsg.call('math.sub',{a:9,b:2},{meta:{y:33}}).then((data)=>{\n    msg.payload = data\n    node.send([null,msg])\n}).catch((err)=>{\n    node.error(err, msg)\n})\n\n\nmsg.call('$none.actions').then((data)=>{\n    msg.payload = data\n    node.send([null,msg])\n}).catch((err)=>{\n    node.error(err, msg)\n})\n\nreturn [msg]; // or node.send([msg])",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 560,
        "y": 120,
        "wires": [
            [
                "c67d9c6f9a6c507f",
                "7f12e643ee9d1a7f"
            ],
            [
                "fab5901c699f22fc"
            ]
        ]
    },
    {
        "id": "7f12e643ee9d1a7f",
        "type": "debug",
        "z": "3fc007a97f3fcca5",
        "g": "6b11f1b1853e2e50",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "x": 810,
        "y": 120,
        "wires": []
    },
    {
        "id": "8a2a8be6994dadef",
        "type": "catch",
        "z": "3fc007a97f3fcca5",
        "g": "6b11f1b1853e2e50",
        "name": "Catch Call Error",
        "scope": [
            "47540566cb5c3c11",
            "484cdfe1b4c20b15"
        ],
        "uncaught": false,
        "x": 620,
        "y": 320,
        "wires": [
            [
                "99f47b8a43ef7bb3"
            ]
        ]
    },
    {
        "id": "99f47b8a43ef7bb3",
        "type": "debug",
        "z": "3fc007a97f3fcca5",
        "g": "6b11f1b1853e2e50",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "x": 810,
        "y": 320,
        "wires": []
    },
    {
        "id": "484cdfe1b4c20b15",
        "type": "function",
        "z": "3fc007a97f3fcca5",
        "g": "6b11f1b1853e2e50",
        "name": "Function SUB",
        "func": "let response = Number(msg.payload.a) - Number(msg.payload.b);\nmsg.payload = response;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 560,
        "y": 160,
        "wires": [
            [
                "6665d0fb4870e7bf",
                "5f04824559ad1f86"
            ]
        ]
    },
    {
        "id": "6665d0fb4870e7bf",
        "type": "debug",
        "z": "3fc007a97f3fcca5",
        "g": "6b11f1b1853e2e50",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "x": 810,
        "y": 280,
        "wires": []
    },
    {
        "id": "fab5901c699f22fc",
        "type": "debug",
        "z": "3fc007a97f3fcca5",
        "g": "6b11f1b1853e2e50",
        "name": "Msg Call inside function",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "x": 870,
        "y": 200,
        "wires": []
    },
    {
        "id": "04ad6fa779221d04",
        "type": "moleculer-request-action",
        "z": "3fc007a97f3fcca5",
        "g": "6b11f1b1853e2e50",
        "broker": "15fdc347.1238cd",
        "service": "f36570e8cebef9b3",
        "name": "Math Add",
        "topic": "add",
        "x": 400,
        "y": 120,
        "wires": [
            [
                "47540566cb5c3c11"
            ]
        ]
    },
    {
        "id": "ed3253ebdeeaa87b",
        "type": "moleculer-request-action",
        "z": "3fc007a97f3fcca5",
        "g": "6b11f1b1853e2e50",
        "broker": "15fdc347.1238cd",
        "service": "f36570e8cebef9b3",
        "name": "Math Sub",
        "topic": "sub",
        "x": 400,
        "y": 160,
        "wires": [
            [
                "484cdfe1b4c20b15"
            ]
        ]
    },
    {
        "id": "c67d9c6f9a6c507f",
        "type": "moleculer-response-action",
        "z": "3fc007a97f3fcca5",
        "g": "6b11f1b1853e2e50",
        "name": "",
        "x": 820,
        "y": 160,
        "wires": []
    },
    {
        "id": "5f04824559ad1f86",
        "type": "moleculer-response-action",
        "z": "3fc007a97f3fcca5",
        "g": "6b11f1b1853e2e50",
        "name": "",
        "x": 820,
        "y": 240,
        "wires": []
    },
    {
        "id": "d4c502ae254526bd",
        "type": "debug",
        "z": "3fc007a97f3fcca5",
        "g": "4faf1c149c06ecec",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "x": 910,
        "y": 420,
        "wires": []
    },
    {
        "id": "e25ea02a601577a9",
        "type": "debug",
        "z": "3fc007a97f3fcca5",
        "g": "4faf1c149c06ecec",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "x": 910,
        "y": 460,
        "wires": []
    },
    {
        "id": "9c34c19b0486caf0",
        "type": "moleculer-event",
        "z": "3fc007a97f3fcca5",
        "g": "4faf1c149c06ecec",
        "broker": "15fdc347.1238cd",
        "service": "f36570e8cebef9b3",
        "name": "",
        "topic": "test.emit",
        "group": "",
        "x": 400,
        "y": 420,
        "wires": [
            [
                "d4c502ae254526bd"
            ]
        ]
    },
    {
        "id": "d70c45e646e78d5d",
        "type": "moleculer-event",
        "z": "3fc007a97f3fcca5",
        "g": "4faf1c149c06ecec",
        "broker": "15fdc347.1238cd",
        "service": "f36570e8cebef9b3",
        "name": "",
        "topic": "test.bcast",
        "group": "",
        "x": 400,
        "y": 460,
        "wires": [
            [
                "e25ea02a601577a9"
            ]
        ]
    },
    {
        "id": "851fc21af8ec6155",
        "type": "inject",
        "z": "3fc007a97f3fcca5",
        "g": "be0bca10a2032aab",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            },
            {
                "p": "options",
                "v": "{\"meta\":{\"z\":1}}",
                "vt": "json"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "{\"a\":2,\"b\":3}",
        "payloadType": "json",
        "x": 430,
        "y": 560,
        "wires": [
            [
                "167db923cc2c8f0c"
            ]
        ]
    },
    {
        "id": "c2db5d2bd7d0babc",
        "type": "debug",
        "z": "3fc007a97f3fcca5",
        "g": "be0bca10a2032aab",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "x": 910,
        "y": 560,
        "wires": []
    },
    {
        "id": "30bc2d47b63b9bb8",
        "type": "inject",
        "z": "3fc007a97f3fcca5",
        "g": "be0bca10a2032aab",
        "name": "Wrong Data",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "{\"a\":\"wrong data\",\"b\":3}",
        "payloadType": "json",
        "x": 430,
        "y": 680,
        "wires": [
            [
                "5734ee36fa12ff2b"
            ]
        ]
    },
    {
        "id": "04990d379a0718d2",
        "type": "debug",
        "z": "3fc007a97f3fcca5",
        "g": "be0bca10a2032aab",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "x": 910,
        "y": 600,
        "wires": []
    },
    {
        "id": "3234db09f574863a",
        "type": "catch",
        "z": "3fc007a97f3fcca5",
        "g": "be0bca10a2032aab",
        "name": "",
        "scope": [
            "5734ee36fa12ff2b"
        ],
        "uncaught": false,
        "x": 630,
        "y": 640,
        "wires": [
            [
                "fcdef2416bd9839a"
            ]
        ]
    },
    {
        "id": "0e20bd94f879cf82",
        "type": "inject",
        "z": "3fc007a97f3fcca5",
        "g": "be0bca10a2032aab",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "{\"a\":6,\"b\":3}",
        "payloadType": "json",
        "x": 430,
        "y": 600,
        "wires": [
            [
                "5734ee36fa12ff2b"
            ]
        ]
    },
    {
        "id": "fcdef2416bd9839a",
        "type": "debug",
        "z": "3fc007a97f3fcca5",
        "g": "be0bca10a2032aab",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "x": 890,
        "y": 640,
        "wires": []
    },
    {
        "id": "beaa76e71c7c78fe",
        "type": "inject",
        "z": "3fc007a97f3fcca5",
        "g": "be0bca10a2032aab",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "{\"a\":\"5\",\"b\":3}",
        "payloadType": "json",
        "x": 430,
        "y": 640,
        "wires": [
            [
                "5734ee36fa12ff2b"
            ]
        ]
    },
    {
        "id": "167db923cc2c8f0c",
        "type": "moleculer-call",
        "z": "3fc007a97f3fcca5",
        "g": "be0bca10a2032aab",
        "broker": "15fdc347.1238cd",
        "name": "",
        "topic": "math.add",
        "options": "{}",
        "x": 620,
        "y": 560,
        "wires": [
            [
                "c2db5d2bd7d0babc"
            ]
        ]
    },
    {
        "id": "5734ee36fa12ff2b",
        "type": "moleculer-call",
        "z": "3fc007a97f3fcca5",
        "g": "be0bca10a2032aab",
        "broker": "15fdc347.1238cd",
        "name": "",
        "topic": "math.sub",
        "options": "{}",
        "x": 620,
        "y": 600,
        "wires": [
            [
                "04990d379a0718d2"
            ]
        ]
    },
    {
        "id": "a3ab5cebb324e655",
        "type": "debug",
        "z": "3fc007a97f3fcca5",
        "g": "86b433e968f1e72f",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1830,
        "y": 300,
        "wires": []
    },
    {
        "id": "1a3fe053bc2fe382",
        "type": "moleculer-call",
        "z": "3fc007a97f3fcca5",
        "g": "86b433e968f1e72f",
        "broker": "15fdc347.1238cd",
        "name": "",
        "topic": "fit116_daq.aas",
        "options": "{}",
        "x": 1320,
        "y": 300,
        "wires": [
            [
                "bcbfa1f541a4dc2d"
            ]
        ]
    },
    {
        "id": "e262cbc7852730e8",
        "type": "OpcUa-Item",
        "z": "3fc007a97f3fcca5",
        "g": "86b433e968f1e72f",
        "item": "br=/Objects/AASROOT/fit116_daq/OperationalData/Percentage/Value",
        "datatype": "Double",
        "value": "",
        "name": "",
        "x": 1320,
        "y": 340,
        "wires": [
            [
                "f7fd3ef0ba124f09"
            ]
        ]
    },
    {
        "id": "f7fd3ef0ba124f09",
        "type": "OpcUa-Client",
        "z": "3fc007a97f3fcca5",
        "g": "86b433e968f1e72f",
        "endpoint": "b95983c7eb59384c",
        "action": "read",
        "deadbandtype": "a",
        "deadbandvalue": 1,
        "time": 10,
        "timeUnit": "s",
        "certificate": "n",
        "localfile": "",
        "localkeyfile": "",
        "securitymode": "None",
        "securitypolicy": "None",
        "useTransport": false,
        "maxChunkCount": 1,
        "maxMessageSize": 8192,
        "receiveBufferSize": 8192,
        "sendBufferSize": 8192,
        "name": "Read",
        "x": 1470,
        "y": 340,
        "wires": [
            [
                "15edd7bb75949605"
            ],
            []
        ]
    },
    {
        "id": "bbfd9fda02784d23",
        "type": "debug",
        "z": "3fc007a97f3fcca5",
        "g": "86b433e968f1e72f",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1830,
        "y": 340,
        "wires": []
    },
    {
        "id": "b80282ed7af97883",
        "type": "link in",
        "z": "3fc007a97f3fcca5",
        "g": "86b433e968f1e72f",
        "name": "link in 1",
        "links": [
            "a4871c336b52cd1b"
        ],
        "x": 1175,
        "y": 300,
        "wires": [
            [
                "1a3fe053bc2fe382",
                "e262cbc7852730e8"
            ]
        ]
    },
    {
        "id": "15edd7bb75949605",
        "type": "function",
        "z": "3fc007a97f3fcca5",
        "g": "86b433e968f1e72f",
        "name": "stringToJSON",
        "func": "\nlet data = msg.payload; // Assuming msg.payload contains the string \"{}\"\ntry {\n    msg.payload = JSON.parse(data); // Convert the string into a JSON object\n} catch (e) {\n    node.error(\"Invalid JSON format: \" + e);\n}\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1620,
        "y": 340,
        "wires": [
            [
                "bbfd9fda02784d23"
            ]
        ]
    },
    {
        "id": "bcbfa1f541a4dc2d",
        "type": "function",
        "z": "3fc007a97f3fcca5",
        "g": "86b433e968f1e72f",
        "name": "stringToJSON",
        "func": "\nlet data = msg.payload; // Assuming msg.payload contains the string \"{}\"\ntry {\n    msg.payload = JSON.parse(data); // Convert the string into a JSON object\n} catch (e) {\n    node.error(\"Invalid JSON format: \" + e);\n}\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1620,
        "y": 300,
        "wires": [
            [
                "a3ab5cebb324e655"
            ]
        ]
    },
    {
        "id": "7bcd84a2f207bd76",
        "type": "debug",
        "z": "3fc007a97f3fcca5",
        "g": "c5188b705be51128",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1830,
        "y": 580,
        "wires": []
    },
    {
        "id": "7a4d63f5ea371ea2",
        "type": "moleculer-call",
        "z": "3fc007a97f3fcca5",
        "g": "c5188b705be51128",
        "broker": "15fdc347.1238cd",
        "name": "",
        "topic": "pit118_daq.aas",
        "options": "{}",
        "x": 1320,
        "y": 580,
        "wires": [
            [
                "c69679dc43232103"
            ]
        ]
    },
    {
        "id": "4d741ce692889a96",
        "type": "OpcUa-Item",
        "z": "3fc007a97f3fcca5",
        "g": "c5188b705be51128",
        "item": "br=/Objects/AASROOT/pit118_daq/OperationalData/Percentage/Value",
        "datatype": "Double",
        "value": "",
        "name": "",
        "x": 1320,
        "y": 620,
        "wires": [
            [
                "85bdb033e765f167"
            ]
        ]
    },
    {
        "id": "85bdb033e765f167",
        "type": "OpcUa-Client",
        "z": "3fc007a97f3fcca5",
        "g": "c5188b705be51128",
        "endpoint": "8c2ad77a986bc998",
        "action": "read",
        "deadbandtype": "a",
        "deadbandvalue": 1,
        "time": 10,
        "timeUnit": "s",
        "certificate": "n",
        "localfile": "",
        "localkeyfile": "",
        "securitymode": "None",
        "securitypolicy": "None",
        "useTransport": false,
        "maxChunkCount": 1,
        "maxMessageSize": 8192,
        "receiveBufferSize": 8192,
        "sendBufferSize": 8192,
        "name": "Read",
        "x": 1470,
        "y": 620,
        "wires": [
            [
                "6cc5beb8670a26b0"
            ],
            []
        ]
    },
    {
        "id": "bb514569f9f9411b",
        "type": "debug",
        "z": "3fc007a97f3fcca5",
        "g": "c5188b705be51128",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1830,
        "y": 620,
        "wires": []
    },
    {
        "id": "65cfec9f3eef380f",
        "type": "link in",
        "z": "3fc007a97f3fcca5",
        "g": "c5188b705be51128",
        "name": "link in 3",
        "links": [
            "a4871c336b52cd1b"
        ],
        "x": 1175,
        "y": 580,
        "wires": [
            [
                "7a4d63f5ea371ea2",
                "4d741ce692889a96"
            ]
        ]
    },
    {
        "id": "c69679dc43232103",
        "type": "function",
        "z": "3fc007a97f3fcca5",
        "g": "c5188b705be51128",
        "name": "stringToJSON",
        "func": "\nlet data = msg.payload; // Assuming msg.payload contains the string \"{}\"\ntry {\n    msg.payload = JSON.parse(data); // Convert the string into a JSON object\n} catch (e) {\n    node.error(\"Invalid JSON format: \" + e);\n}\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1620,
        "y": 580,
        "wires": [
            [
                "7bcd84a2f207bd76"
            ]
        ]
    },
    {
        "id": "6cc5beb8670a26b0",
        "type": "function",
        "z": "3fc007a97f3fcca5",
        "g": "c5188b705be51128",
        "name": "stringToJSON",
        "func": "\nlet data = msg.payload; // Assuming msg.payload contains the string \"{}\"\ntry {\n    msg.payload = JSON.parse(data); // Convert the string into a JSON object\n} catch (e) {\n    node.error(\"Invalid JSON format: \" + e);\n}\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1620,
        "y": 620,
        "wires": [
            [
                "bb514569f9f9411b"
            ]
        ]
    },
    {
        "id": "a52f2dce3e55d46a",
        "type": "debug",
        "z": "3fc007a97f3fcca5",
        "g": "123adc3b4fd1f435",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1830,
        "y": 720,
        "wires": []
    },
    {
        "id": "7acb6ce4e368fcb9",
        "type": "moleculer-call",
        "z": "3fc007a97f3fcca5",
        "g": "123adc3b4fd1f435",
        "broker": "15fdc347.1238cd",
        "name": "",
        "topic": "pit129_daq.aas",
        "options": "{}",
        "x": 1320,
        "y": 720,
        "wires": [
            [
                "97c8e6236d117388"
            ]
        ]
    },
    {
        "id": "9c4b8e8022f6359e",
        "type": "OpcUa-Item",
        "z": "3fc007a97f3fcca5",
        "g": "123adc3b4fd1f435",
        "item": "br=/Objects/AASROOT/pit129_daq/OperationalData/Percentage/Value",
        "datatype": "Double",
        "value": "",
        "name": "",
        "x": 1320,
        "y": 760,
        "wires": [
            [
                "ebdf8558b43954e6"
            ]
        ]
    },
    {
        "id": "ebdf8558b43954e6",
        "type": "OpcUa-Client",
        "z": "3fc007a97f3fcca5",
        "g": "123adc3b4fd1f435",
        "endpoint": "9883401a98aa8537",
        "action": "read",
        "deadbandtype": "a",
        "deadbandvalue": 1,
        "time": 10,
        "timeUnit": "s",
        "certificate": "n",
        "localfile": "",
        "localkeyfile": "",
        "securitymode": "None",
        "securitypolicy": "None",
        "useTransport": false,
        "maxChunkCount": 1,
        "maxMessageSize": 8192,
        "receiveBufferSize": 8192,
        "sendBufferSize": 8192,
        "name": "Read",
        "x": 1470,
        "y": 760,
        "wires": [
            [
                "6226cc4a8994eddb"
            ],
            []
        ]
    },
    {
        "id": "09a0e8be12ba43ef",
        "type": "debug",
        "z": "3fc007a97f3fcca5",
        "g": "123adc3b4fd1f435",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1830,
        "y": 760,
        "wires": []
    },
    {
        "id": "67f16077b427e378",
        "type": "link in",
        "z": "3fc007a97f3fcca5",
        "g": "123adc3b4fd1f435",
        "name": "link in 4",
        "links": [
            "a4871c336b52cd1b"
        ],
        "x": 1175,
        "y": 720,
        "wires": [
            [
                "7acb6ce4e368fcb9",
                "9c4b8e8022f6359e"
            ]
        ]
    },
    {
        "id": "97c8e6236d117388",
        "type": "function",
        "z": "3fc007a97f3fcca5",
        "g": "123adc3b4fd1f435",
        "name": "stringToJSON",
        "func": "\nlet data = msg.payload; // Assuming msg.payload contains the string \"{}\"\ntry {\n    msg.payload = JSON.parse(data); // Convert the string into a JSON object\n} catch (e) {\n    node.error(\"Invalid JSON format: \" + e);\n}\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1620,
        "y": 720,
        "wires": [
            [
                "a52f2dce3e55d46a"
            ]
        ]
    },
    {
        "id": "6226cc4a8994eddb",
        "type": "function",
        "z": "3fc007a97f3fcca5",
        "g": "123adc3b4fd1f435",
        "name": "stringToJSON",
        "func": "\nlet data = msg.payload; // Assuming msg.payload contains the string \"{}\"\ntry {\n    msg.payload = JSON.parse(data); // Convert the string into a JSON object\n} catch (e) {\n    node.error(\"Invalid JSON format: \" + e);\n}\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1620,
        "y": 760,
        "wires": [
            [
                "09a0e8be12ba43ef"
            ]
        ]
    },
    {
        "id": "6d0069400c6233c5",
        "type": "debug",
        "z": "3fc007a97f3fcca5",
        "g": "a1a0dd3fa15bb567",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1830,
        "y": 440,
        "wires": []
    },
    {
        "id": "98b053f7732b95b7",
        "type": "moleculer-call",
        "z": "3fc007a97f3fcca5",
        "g": "a1a0dd3fa15bb567",
        "broker": "15fdc347.1238cd",
        "name": "",
        "topic": "lit125_daq.aas",
        "options": "{}",
        "x": 1320,
        "y": 440,
        "wires": [
            [
                "d404084ff019414f"
            ]
        ]
    },
    {
        "id": "7ffff11fdc84c547",
        "type": "OpcUa-Item",
        "z": "3fc007a97f3fcca5",
        "g": "a1a0dd3fa15bb567",
        "item": "br=/Objects/AASROOT/lit125_daq/OperationalData/Percentage/Value",
        "datatype": "Double",
        "value": "",
        "name": "",
        "x": 1320,
        "y": 480,
        "wires": [
            [
                "a540bf68ca3c9f74"
            ]
        ]
    },
    {
        "id": "a540bf68ca3c9f74",
        "type": "OpcUa-Client",
        "z": "3fc007a97f3fcca5",
        "g": "a1a0dd3fa15bb567",
        "endpoint": "f0f78b51406b5649",
        "action": "read",
        "deadbandtype": "a",
        "deadbandvalue": 1,
        "time": 10,
        "timeUnit": "s",
        "certificate": "n",
        "localfile": "",
        "localkeyfile": "",
        "securitymode": "None",
        "securitypolicy": "None",
        "useTransport": false,
        "maxChunkCount": 1,
        "maxMessageSize": 8192,
        "receiveBufferSize": 8192,
        "sendBufferSize": 8192,
        "name": "Read",
        "x": 1470,
        "y": 480,
        "wires": [
            [
                "8c98b68e14c07813"
            ],
            []
        ]
    },
    {
        "id": "00b22c6d6516a1af",
        "type": "debug",
        "z": "3fc007a97f3fcca5",
        "g": "a1a0dd3fa15bb567",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1830,
        "y": 480,
        "wires": []
    },
    {
        "id": "d50137e3560249bc",
        "type": "link in",
        "z": "3fc007a97f3fcca5",
        "g": "a1a0dd3fa15bb567",
        "name": "link in 2",
        "links": [
            "a4871c336b52cd1b"
        ],
        "x": 1175,
        "y": 440,
        "wires": [
            [
                "98b053f7732b95b7",
                "7ffff11fdc84c547"
            ]
        ]
    },
    {
        "id": "d404084ff019414f",
        "type": "function",
        "z": "3fc007a97f3fcca5",
        "g": "a1a0dd3fa15bb567",
        "name": "stringToJSON",
        "func": "\nlet data = msg.payload; // Assuming msg.payload contains the string \"{}\"\ntry {\n    msg.payload = JSON.parse(data); // Convert the string into a JSON object\n} catch (e) {\n    node.error(\"Invalid JSON format: \" + e);\n}\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1620,
        "y": 440,
        "wires": [
            [
                "6d0069400c6233c5"
            ]
        ]
    },
    {
        "id": "8c98b68e14c07813",
        "type": "function",
        "z": "3fc007a97f3fcca5",
        "g": "a1a0dd3fa15bb567",
        "name": "stringToJSON",
        "func": "\nlet data = msg.payload; // Assuming msg.payload contains the string \"{}\"\ntry {\n    msg.payload = JSON.parse(data); // Convert the string into a JSON object\n} catch (e) {\n    node.error(\"Invalid JSON format: \" + e);\n}\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1620,
        "y": 480,
        "wires": [
            [
                "00b22c6d6516a1af"
            ]
        ]
    },
    {
        "id": "e6ddca00b67b6a8c",
        "type": "inject",
        "z": "3fc007a97f3fcca5",
        "g": "a246b85c05ca84e8",
        "name": "SE Percentage  Read",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "{\"idShortSubmodel\":\"OperationalData\", \"idShortSubmodelElement\":\"Percentage\", \"format\":\"value\"}",
        "payloadType": "json",
        "x": 1280,
        "y": 200,
        "wires": [
            [
                "a4871c336b52cd1b"
            ]
        ]
    },
    {
        "id": "a4871c336b52cd1b",
        "type": "link out",
        "z": "3fc007a97f3fcca5",
        "g": "a246b85c05ca84e8",
        "name": "link out 1",
        "mode": "link",
        "links": [
            "65cfec9f3eef380f",
            "67f16077b427e378",
            "b80282ed7af97883",
            "d50137e3560249bc"
        ],
        "x": 1905,
        "y": 200,
        "wires": []
    },
    {
        "id": "45d628aaf8e37523",
        "type": "debug",
        "z": "3fc007a97f3fcca5",
        "g": "b355f8f0cdc6368e",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1830,
        "y": 1540,
        "wires": []
    },
    {
        "id": "8d737a82ea9f855a",
        "type": "moleculer-call",
        "z": "3fc007a97f3fcca5",
        "g": "b355f8f0cdc6368e",
        "broker": "15fdc347.1238cd",
        "name": "",
        "topic": "pic118_pid4.aas",
        "options": "{}",
        "x": 1360,
        "y": 1540,
        "wires": [
            [
                "45d628aaf8e37523"
            ]
        ]
    },
    {
        "id": "9a217f97216cc0d8",
        "type": "OpcUa-Client",
        "z": "3fc007a97f3fcca5",
        "g": "b355f8f0cdc6368e",
        "endpoint": "f23add3fd8d371dd",
        "action": "write",
        "deadbandtype": "a",
        "deadbandvalue": 1,
        "time": 10,
        "timeUnit": "s",
        "certificate": "n",
        "localfile": "",
        "localkeyfile": "",
        "securitymode": "None",
        "securitypolicy": "None",
        "useTransport": false,
        "maxChunkCount": 1,
        "maxMessageSize": 8192,
        "receiveBufferSize": 8192,
        "sendBufferSize": 8192,
        "name": "Write",
        "x": 1490,
        "y": 1660,
        "wires": [
            [
                "7b9a8ff45f6e6717"
            ],
            []
        ]
    },
    {
        "id": "c4e2d8ca292c8345",
        "type": "OpcUa-Client",
        "z": "3fc007a97f3fcca5",
        "g": "b355f8f0cdc6368e",
        "endpoint": "f23add3fd8d371dd",
        "action": "read",
        "deadbandtype": "a",
        "deadbandvalue": 1,
        "time": 10,
        "timeUnit": "s",
        "certificate": "n",
        "localfile": "",
        "localkeyfile": "",
        "securitymode": "None",
        "securitypolicy": "None",
        "useTransport": false,
        "maxChunkCount": 1,
        "maxMessageSize": 8192,
        "receiveBufferSize": 8192,
        "sendBufferSize": 8192,
        "name": "Read",
        "x": 1490,
        "y": 1580,
        "wires": [
            [
                "f1e69d5e3913b2c6"
            ],
            []
        ]
    },
    {
        "id": "d0694abdc8b665cd",
        "type": "debug",
        "z": "3fc007a97f3fcca5",
        "g": "b355f8f0cdc6368e",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1830,
        "y": 1580,
        "wires": []
    },
    {
        "id": "7b9a8ff45f6e6717",
        "type": "debug",
        "z": "3fc007a97f3fcca5",
        "g": "b355f8f0cdc6368e",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1830,
        "y": 1660,
        "wires": []
    },
    {
        "id": "edd41cc39dd5bd80",
        "type": "link in",
        "z": "3fc007a97f3fcca5",
        "g": "b355f8f0cdc6368e",
        "name": "link in 11",
        "links": [
            "ed8edd484b31cf79"
        ],
        "x": 1185,
        "y": 1540,
        "wires": [
            [
                "8d737a82ea9f855a",
                "aa8afa287a7f9282"
            ]
        ]
    },
    {
        "id": "8b705dd33a868f5a",
        "type": "link in",
        "z": "3fc007a97f3fcca5",
        "g": "b355f8f0cdc6368e",
        "name": "link in 15",
        "links": [
            "5abaf0460158fb41"
        ],
        "x": 1185,
        "y": 1660,
        "wires": [
            [
                "2d8811a128a5e961"
            ]
        ]
    },
    {
        "id": "f1e69d5e3913b2c6",
        "type": "function",
        "z": "3fc007a97f3fcca5",
        "g": "b355f8f0cdc6368e",
        "name": "stringToJSON",
        "func": "\nlet data = msg.payload; // Assuming msg.payload contains the string \"{}\"\ntry {\n    msg.payload = JSON.parse(data); // Convert the string into a JSON object\n} catch (e) {\n    node.error(\"Invalid JSON format: \" + e);\n}\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1640,
        "y": 1580,
        "wires": [
            [
                "d0694abdc8b665cd"
            ]
        ]
    },
    {
        "id": "2d8811a128a5e961",
        "type": "OpcUa-Item",
        "z": "3fc007a97f3fcca5",
        "g": "b355f8f0cdc6368e",
        "item": "ns=3;i=1477",
        "datatype": "String",
        "value": "",
        "name": "",
        "x": 1340,
        "y": 1660,
        "wires": [
            [
                "9a217f97216cc0d8"
            ]
        ]
    },
    {
        "id": "f5e21fe5f5c0a6b5",
        "type": "OpcUa-Item",
        "z": "3fc007a97f3fcca5",
        "g": "b355f8f0cdc6368e",
        "item": "br=/Objects/AASROOT/pic118_pid4/OperationalData/Payload/Value",
        "datatype": "String",
        "value": "",
        "name": "",
        "x": 1340,
        "y": 1620,
        "wires": [
            [
                "c4e2d8ca292c8345"
            ]
        ]
    },
    {
        "id": "aa8afa287a7f9282",
        "type": "OpcUa-Item",
        "z": "3fc007a97f3fcca5",
        "g": "b355f8f0cdc6368e",
        "item": "br=/Objects/AASROOT/pic118_pid4/OperationalData/Parameters/Value",
        "datatype": "String",
        "value": "",
        "name": "",
        "x": 1340,
        "y": 1580,
        "wires": [
            [
                "c4e2d8ca292c8345"
            ]
        ]
    },
    {
        "id": "26e66892d1e9d6b9",
        "type": "link in",
        "z": "3fc007a97f3fcca5",
        "g": "b355f8f0cdc6368e",
        "name": "link in 25",
        "links": [
            "3e4499d3f96e6c0a"
        ],
        "x": 1185,
        "y": 1600,
        "wires": [
            [
                "8d737a82ea9f855a",
                "f5e21fe5f5c0a6b5"
            ]
        ]
    },
    {
        "id": "999ae822f753f2dc",
        "type": "debug",
        "z": "3fc007a97f3fcca5",
        "g": "e627e9b93a667142",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1830,
        "y": 1760,
        "wires": []
    },
    {
        "id": "7e39ed17a289c713",
        "type": "moleculer-call",
        "z": "3fc007a97f3fcca5",
        "g": "e627e9b93a667142",
        "broker": "15fdc347.1238cd",
        "name": "",
        "topic": "pic129_pid4.aas",
        "options": "{}",
        "x": 1360,
        "y": 1760,
        "wires": [
            [
                "999ae822f753f2dc"
            ]
        ]
    },
    {
        "id": "9ffe2ae34de97f42",
        "type": "OpcUa-Client",
        "z": "3fc007a97f3fcca5",
        "g": "e627e9b93a667142",
        "endpoint": "69ae20a702e2e3d7",
        "action": "write",
        "deadbandtype": "a",
        "deadbandvalue": 1,
        "time": 10,
        "timeUnit": "s",
        "certificate": "n",
        "localfile": "",
        "localkeyfile": "",
        "securitymode": "None",
        "securitypolicy": "None",
        "useTransport": false,
        "maxChunkCount": 1,
        "maxMessageSize": 8192,
        "receiveBufferSize": 8192,
        "sendBufferSize": 8192,
        "name": "Write",
        "x": 1490,
        "y": 1880,
        "wires": [
            [
                "318f3b8d2a785b06"
            ],
            []
        ]
    },
    {
        "id": "bd24c98d18261f60",
        "type": "OpcUa-Client",
        "z": "3fc007a97f3fcca5",
        "g": "e627e9b93a667142",
        "endpoint": "69ae20a702e2e3d7",
        "action": "read",
        "deadbandtype": "a",
        "deadbandvalue": 1,
        "time": 10,
        "timeUnit": "s",
        "certificate": "n",
        "localfile": "",
        "localkeyfile": "",
        "securitymode": "None",
        "securitypolicy": "None",
        "useTransport": false,
        "maxChunkCount": 1,
        "maxMessageSize": 8192,
        "receiveBufferSize": 8192,
        "sendBufferSize": 8192,
        "name": "Read",
        "x": 1490,
        "y": 1800,
        "wires": [
            [
                "d7161f014d99babd"
            ],
            []
        ]
    },
    {
        "id": "e456020e2c467112",
        "type": "debug",
        "z": "3fc007a97f3fcca5",
        "g": "e627e9b93a667142",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1830,
        "y": 1800,
        "wires": []
    },
    {
        "id": "318f3b8d2a785b06",
        "type": "debug",
        "z": "3fc007a97f3fcca5",
        "g": "e627e9b93a667142",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1830,
        "y": 1880,
        "wires": []
    },
    {
        "id": "61876e95e7207fb5",
        "type": "link in",
        "z": "3fc007a97f3fcca5",
        "g": "e627e9b93a667142",
        "name": "link in 12",
        "links": [
            "ed8edd484b31cf79"
        ],
        "x": 1185,
        "y": 1760,
        "wires": [
            [
                "7e39ed17a289c713",
                "0795d6dd46cc9edb"
            ]
        ]
    },
    {
        "id": "a9485ba2e0d40364",
        "type": "link in",
        "z": "3fc007a97f3fcca5",
        "g": "e627e9b93a667142",
        "name": "link in 16",
        "links": [
            "5abaf0460158fb41"
        ],
        "x": 1185,
        "y": 1880,
        "wires": [
            [
                "7559ca650bc4bbf0"
            ]
        ]
    },
    {
        "id": "d7161f014d99babd",
        "type": "function",
        "z": "3fc007a97f3fcca5",
        "g": "e627e9b93a667142",
        "name": "stringToJSON",
        "func": "\nlet data = msg.payload; // Assuming msg.payload contains the string \"{}\"\ntry {\n    msg.payload = JSON.parse(data); // Convert the string into a JSON object\n} catch (e) {\n    node.error(\"Invalid JSON format: \" + e);\n}\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1640,
        "y": 1800,
        "wires": [
            [
                "e456020e2c467112"
            ]
        ]
    },
    {
        "id": "7559ca650bc4bbf0",
        "type": "OpcUa-Item",
        "z": "3fc007a97f3fcca5",
        "g": "e627e9b93a667142",
        "item": "ns=3;i=1477",
        "datatype": "String",
        "value": "",
        "name": "",
        "x": 1340,
        "y": 1880,
        "wires": [
            [
                "9ffe2ae34de97f42"
            ]
        ]
    },
    {
        "id": "49ba2e8fbbba90e0",
        "type": "OpcUa-Item",
        "z": "3fc007a97f3fcca5",
        "g": "e627e9b93a667142",
        "item": "br=/Objects/AASROOT/pic129_pid4/OperationalData/Payload/Value",
        "datatype": "String",
        "value": "",
        "name": "",
        "x": 1340,
        "y": 1840,
        "wires": [
            [
                "bd24c98d18261f60"
            ]
        ]
    },
    {
        "id": "0795d6dd46cc9edb",
        "type": "OpcUa-Item",
        "z": "3fc007a97f3fcca5",
        "g": "e627e9b93a667142",
        "item": "br=/Objects/AASROOT/pic129_pid4/OperationalData/Parameters/Value",
        "datatype": "String",
        "value": "",
        "name": "",
        "x": 1340,
        "y": 1800,
        "wires": [
            [
                "bd24c98d18261f60"
            ]
        ]
    },
    {
        "id": "56d84aee8531e620",
        "type": "link in",
        "z": "3fc007a97f3fcca5",
        "g": "e627e9b93a667142",
        "name": "link in 26",
        "links": [
            "3e4499d3f96e6c0a"
        ],
        "x": 1185,
        "y": 1820,
        "wires": [
            [
                "7e39ed17a289c713",
                "49ba2e8fbbba90e0"
            ]
        ]
    },
    {
        "id": "36cf0199d85f8dfe",
        "type": "debug",
        "z": "3fc007a97f3fcca5",
        "g": "7ced3cc227448344",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1830,
        "y": 1320,
        "wires": []
    },
    {
        "id": "b65d9d6acbcb4808",
        "type": "moleculer-call",
        "z": "3fc007a97f3fcca5",
        "g": "7ced3cc227448344",
        "broker": "15fdc347.1238cd",
        "name": "",
        "topic": "lic125_pid4.aas",
        "options": "{}",
        "x": 1360,
        "y": 1320,
        "wires": [
            [
                "36cf0199d85f8dfe"
            ]
        ]
    },
    {
        "id": "40f354b28fe90aca",
        "type": "OpcUa-Client",
        "z": "3fc007a97f3fcca5",
        "g": "7ced3cc227448344",
        "endpoint": "69ae20a702e2e3d7",
        "action": "write",
        "deadbandtype": "a",
        "deadbandvalue": 1,
        "time": 10,
        "timeUnit": "s",
        "certificate": "n",
        "localfile": "",
        "localkeyfile": "",
        "securitymode": "None",
        "securitypolicy": "None",
        "useTransport": false,
        "maxChunkCount": 1,
        "maxMessageSize": 8192,
        "receiveBufferSize": 8192,
        "sendBufferSize": 8192,
        "name": "Write",
        "x": 1490,
        "y": 1440,
        "wires": [
            [
                "a7c779508cc1ca2a"
            ],
            []
        ]
    },
    {
        "id": "765950b493331159",
        "type": "OpcUa-Client",
        "z": "3fc007a97f3fcca5",
        "g": "7ced3cc227448344",
        "endpoint": "55ef72f70b1594bd",
        "action": "read",
        "deadbandtype": "a",
        "deadbandvalue": 1,
        "time": 10,
        "timeUnit": "s",
        "certificate": "n",
        "localfile": "",
        "localkeyfile": "",
        "securitymode": "None",
        "securitypolicy": "None",
        "useTransport": false,
        "maxChunkCount": 1,
        "maxMessageSize": 8192,
        "receiveBufferSize": 8192,
        "sendBufferSize": 8192,
        "name": "Read",
        "x": 1490,
        "y": 1360,
        "wires": [
            [
                "a35e5f49b202c3e2"
            ],
            []
        ]
    },
    {
        "id": "4cc0b9203fcc87fd",
        "type": "debug",
        "z": "3fc007a97f3fcca5",
        "g": "7ced3cc227448344",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1830,
        "y": 1360,
        "wires": []
    },
    {
        "id": "a7c779508cc1ca2a",
        "type": "debug",
        "z": "3fc007a97f3fcca5",
        "g": "7ced3cc227448344",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1830,
        "y": 1440,
        "wires": []
    },
    {
        "id": "d926efdcf342b0c7",
        "type": "link in",
        "z": "3fc007a97f3fcca5",
        "g": "7ced3cc227448344",
        "name": "link in 10",
        "links": [
            "ed8edd484b31cf79"
        ],
        "x": 1185,
        "y": 1320,
        "wires": [
            [
                "b65d9d6acbcb4808",
                "a9e56338f5f52957"
            ]
        ]
    },
    {
        "id": "a8cccf8e5ead5dc8",
        "type": "link in",
        "z": "3fc007a97f3fcca5",
        "g": "7ced3cc227448344",
        "name": "link in 14",
        "links": [
            "5abaf0460158fb41"
        ],
        "x": 1185,
        "y": 1440,
        "wires": [
            [
                "bb2c83232b8f14da"
            ]
        ]
    },
    {
        "id": "a35e5f49b202c3e2",
        "type": "function",
        "z": "3fc007a97f3fcca5",
        "g": "7ced3cc227448344",
        "name": "stringToJSON",
        "func": "\nlet data = msg.payload; // Assuming msg.payload contains the string \"{}\"\ntry {\n    msg.payload = JSON.parse(data); // Convert the string into a JSON object\n} catch (e) {\n    node.error(\"Invalid JSON format: \" + e);\n}\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1640,
        "y": 1360,
        "wires": [
            [
                "4cc0b9203fcc87fd"
            ]
        ]
    },
    {
        "id": "bb2c83232b8f14da",
        "type": "OpcUa-Item",
        "z": "3fc007a97f3fcca5",
        "g": "7ced3cc227448344",
        "item": "ns=3;i=1477",
        "datatype": "String",
        "value": "",
        "name": "",
        "x": 1340,
        "y": 1440,
        "wires": [
            [
                "40f354b28fe90aca"
            ]
        ]
    },
    {
        "id": "0f42495d00134d6c",
        "type": "OpcUa-Item",
        "z": "3fc007a97f3fcca5",
        "g": "7ced3cc227448344",
        "item": "br=/Objects/AASROOT/lic125_pid4/OperationalData/Payload/Value",
        "datatype": "String",
        "value": "",
        "name": "",
        "x": 1340,
        "y": 1400,
        "wires": [
            [
                "765950b493331159"
            ]
        ]
    },
    {
        "id": "a9e56338f5f52957",
        "type": "OpcUa-Item",
        "z": "3fc007a97f3fcca5",
        "g": "7ced3cc227448344",
        "item": "br=/Objects/AASROOT/lic125_pid4/OperationalData/Parameters/Value",
        "datatype": "String",
        "value": "",
        "name": "",
        "x": 1340,
        "y": 1360,
        "wires": [
            [
                "765950b493331159"
            ]
        ]
    },
    {
        "id": "09a49ed1b83e9afd",
        "type": "link in",
        "z": "3fc007a97f3fcca5",
        "g": "7ced3cc227448344",
        "name": "link in 24",
        "links": [
            "3e4499d3f96e6c0a"
        ],
        "x": 1185,
        "y": 1380,
        "wires": [
            [
                "b65d9d6acbcb4808",
                "0f42495d00134d6c"
            ]
        ]
    },
    {
        "id": "3a8faa3646db71a0",
        "type": "debug",
        "z": "3fc007a97f3fcca5",
        "g": "01e8d789c86f0e85",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1830,
        "y": 1100,
        "wires": []
    },
    {
        "id": "3efb4e9af642e438",
        "type": "moleculer-call",
        "z": "3fc007a97f3fcca5",
        "g": "01e8d789c86f0e85",
        "broker": "15fdc347.1238cd",
        "name": "",
        "topic": "fic116_pid4.aas",
        "options": "{}",
        "x": 1348,
        "y": 1101,
        "wires": [
            [
                "3a8faa3646db71a0"
            ]
        ]
    },
    {
        "id": "af07c0c409b22a48",
        "type": "OpcUa-Client",
        "z": "3fc007a97f3fcca5",
        "g": "01e8d789c86f0e85",
        "endpoint": "3bfe3760a65a6fe2",
        "action": "write",
        "deadbandtype": "a",
        "deadbandvalue": 1,
        "time": 10,
        "timeUnit": "s",
        "certificate": "n",
        "localfile": "",
        "localkeyfile": "",
        "securitymode": "None",
        "securitypolicy": "None",
        "useTransport": false,
        "maxChunkCount": 1,
        "maxMessageSize": 8192,
        "receiveBufferSize": 8192,
        "sendBufferSize": 8192,
        "name": "Write",
        "x": 1490,
        "y": 1220,
        "wires": [
            [
                "f68a3257444e477e"
            ],
            []
        ]
    },
    {
        "id": "eb3772419ee7581d",
        "type": "OpcUa-Client",
        "z": "3fc007a97f3fcca5",
        "g": "01e8d789c86f0e85",
        "endpoint": "3bfe3760a65a6fe2",
        "action": "read",
        "deadbandtype": "a",
        "deadbandvalue": 1,
        "time": 10,
        "timeUnit": "s",
        "certificate": "n",
        "localfile": "",
        "localkeyfile": "",
        "securitymode": "None",
        "securitypolicy": "None",
        "useTransport": false,
        "maxChunkCount": 1,
        "maxMessageSize": 8192,
        "receiveBufferSize": 8192,
        "sendBufferSize": 8192,
        "name": "Read",
        "x": 1490,
        "y": 1140,
        "wires": [
            [
                "736e87da93e6d529"
            ],
            []
        ]
    },
    {
        "id": "f4606b31ee737304",
        "type": "debug",
        "z": "3fc007a97f3fcca5",
        "g": "01e8d789c86f0e85",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1830,
        "y": 1140,
        "wires": []
    },
    {
        "id": "f68a3257444e477e",
        "type": "debug",
        "z": "3fc007a97f3fcca5",
        "g": "01e8d789c86f0e85",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1830,
        "y": 1220,
        "wires": []
    },
    {
        "id": "79d478e4049d6ea0",
        "type": "link in",
        "z": "3fc007a97f3fcca5",
        "g": "01e8d789c86f0e85",
        "name": "link in 9",
        "links": [
            "ed8edd484b31cf79"
        ],
        "x": 1185,
        "y": 1100,
        "wires": [
            [
                "3efb4e9af642e438",
                "0e65f1727461eca3"
            ]
        ]
    },
    {
        "id": "043b3ea8d6499e7c",
        "type": "link in",
        "z": "3fc007a97f3fcca5",
        "g": "01e8d789c86f0e85",
        "name": "link in 13",
        "links": [
            "5abaf0460158fb41"
        ],
        "x": 1185,
        "y": 1220,
        "wires": [
            [
                "0e64508046a4b84c"
            ]
        ]
    },
    {
        "id": "736e87da93e6d529",
        "type": "function",
        "z": "3fc007a97f3fcca5",
        "g": "01e8d789c86f0e85",
        "name": "stringToJSON",
        "func": "\nlet data = msg.payload; // Assuming msg.payload contains the string \"{}\"\ntry {\n    msg.payload = JSON.parse(data); // Convert the string into a JSON object\n} catch (e) {\n    node.error(\"Invalid JSON format: \" + e);\n}\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1640,
        "y": 1140,
        "wires": [
            [
                "f4606b31ee737304"
            ]
        ]
    },
    {
        "id": "0e64508046a4b84c",
        "type": "OpcUa-Item",
        "z": "3fc007a97f3fcca5",
        "g": "01e8d789c86f0e85",
        "item": "ns=3;i=1477",
        "datatype": "String",
        "value": "",
        "name": "",
        "x": 1340,
        "y": 1220,
        "wires": [
            [
                "af07c0c409b22a48"
            ]
        ]
    },
    {
        "id": "0e65f1727461eca3",
        "type": "OpcUa-Item",
        "z": "3fc007a97f3fcca5",
        "g": "01e8d789c86f0e85",
        "item": "br=/Objects/AASROOT/fic116_pid4/OperationalData/Parameters/Value",
        "datatype": "String",
        "value": "",
        "name": "",
        "x": 1340,
        "y": 1140,
        "wires": [
            [
                "eb3772419ee7581d"
            ]
        ]
    },
    {
        "id": "d69163abdb5bfd15",
        "type": "OpcUa-Item",
        "z": "3fc007a97f3fcca5",
        "g": "01e8d789c86f0e85",
        "item": "br=/Objects/AASROOT/fic116_pid4/OperationalData/Payload/Value",
        "datatype": "String",
        "value": "",
        "name": "",
        "x": 1340,
        "y": 1180,
        "wires": [
            [
                "eb3772419ee7581d"
            ]
        ]
    },
    {
        "id": "4eef495e27ef6364",
        "type": "link in",
        "z": "3fc007a97f3fcca5",
        "g": "01e8d789c86f0e85",
        "name": "link in 23",
        "links": [
            "3e4499d3f96e6c0a"
        ],
        "x": 1185,
        "y": 1140,
        "wires": [
            [
                "d69163abdb5bfd15",
                "3efb4e9af642e438"
            ]
        ]
    },
    {
        "id": "9eb47faf11225e6f",
        "type": "inject",
        "z": "3fc007a97f3fcca5",
        "g": "e9f305c45419e4aa",
        "name": "SE Parameters Read",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "{\"idShortSubmodel\":\"OperationalData\",\"idShortSubmodelElement\":\"Parameters\",\"format\":\"value\"}",
        "payloadType": "json",
        "x": 1300,
        "y": 920,
        "wires": [
            [
                "ed8edd484b31cf79"
            ]
        ]
    },
    {
        "id": "da3a1b01843c2a45",
        "type": "inject",
        "z": "3fc007a97f3fcca5",
        "g": "e9f305c45419e4aa",
        "name": "SE Parameters { } Write",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "{\"idShortSubmodel\":\"OperationalData\",\"idShortSubmodelElement\":\"Parameters\",\"value\":{\"ti\":0.14,\"td\":0.16,\"kp\":2.22,\"pv\":30,\"setpoint\":40.6,\"error\":0.35,\"integrative\":0.24,\"manipulatedVariable\":60,\"time\":0}}",
        "payloadType": "json",
        "x": 1300,
        "y": 1000,
        "wires": [
            [
                "ceac3ca0c30c7a28",
                "ed8edd484b31cf79"
            ]
        ]
    },
    {
        "id": "e60c2ff9ebb13357",
        "type": "inject",
        "z": "3fc007a97f3fcca5",
        "g": "e9f305c45419e4aa",
        "name": "SE Payload Read",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "{\"idShortSubmodel\":\"OperationalData\",\"idShortSubmodelElement\":\"Payload\",\"format\":\"value\"}",
        "payloadType": "json",
        "x": 1290,
        "y": 960,
        "wires": [
            [
                "3e4499d3f96e6c0a"
            ]
        ]
    },
    {
        "id": "ed8edd484b31cf79",
        "type": "link out",
        "z": "3fc007a97f3fcca5",
        "g": "e9f305c45419e4aa",
        "name": "link out 3",
        "mode": "link",
        "links": [
            "79d478e4049d6ea0",
            "d926efdcf342b0c7",
            "edd41cc39dd5bd80",
            "61876e95e7207fb5"
        ],
        "x": 1495,
        "y": 920,
        "wires": []
    },
    {
        "id": "ceac3ca0c30c7a28",
        "type": "function",
        "z": "3fc007a97f3fcca5",
        "g": "e9f305c45419e4aa",
        "name": "value",
        "func": "// Função para extração apenas do value\n// Obtemos o payload recebido na mensagem\nconst inputPayload = msg.payload;\n\n// Verificamos se o campo \"value\" existe no payload\nif (inputPayload && inputPayload.value) {\n    // Definimos o novo payload com o campo \"value\"\n    msg.payload = inputPayload.value;\n} else {\n    // Se \"value\" não existe, retornamos uma mensagem de erro no payload\n    msg.payload = { error: \"Campo 'value' não encontrado no payload.\" };\n}\n\n// Retornamos a mensagem modificada\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1610,
        "y": 1000,
        "wires": [
            [
                "1af2705a8efdc663"
            ]
        ]
    },
    {
        "id": "5abaf0460158fb41",
        "type": "link out",
        "z": "3fc007a97f3fcca5",
        "g": "e9f305c45419e4aa",
        "name": "link out 4",
        "mode": "link",
        "links": [
            "043b3ea8d6499e7c",
            "8b705dd33a868f5a",
            "a8cccf8e5ead5dc8",
            "a9485ba2e0d40364"
        ],
        "x": 1905,
        "y": 1000,
        "wires": []
    },
    {
        "id": "1af2705a8efdc663",
        "type": "function",
        "z": "3fc007a97f3fcca5",
        "g": "e9f305c45419e4aa",
        "name": "JSONTostring",
        "func": "let data = msg.payload; // Assuming msg.payload contains the JSON object\ntry {\n    msg.payload = JSON.stringify(data); // Convert the JSON object into a string\n} catch (e) {\n    node.error(\"Invalid JSON object: \" + e);\n}\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1780,
        "y": 1000,
        "wires": [
            [
                "5abaf0460158fb41"
            ]
        ]
    },
    {
        "id": "3e4499d3f96e6c0a",
        "type": "link out",
        "z": "3fc007a97f3fcca5",
        "g": "e9f305c45419e4aa",
        "name": "link out 7",
        "mode": "link",
        "links": [
            "4eef495e27ef6364",
            "09a49ed1b83e9afd",
            "26e66892d1e9d6b9",
            "56d84aee8531e620"
        ],
        "x": 1905,
        "y": 960,
        "wires": []
    },
    {
        "id": "eff39aabd40ed5ca",
        "type": "comment",
        "z": "3fc007a97f3fcca5",
        "g": "92873329bc006b1f",
        "name": "",
        "info": "",
        "x": 1200,
        "y": 80,
        "wires": []
    },
    {
        "id": "e11d97bb28623586",
        "type": "comment",
        "z": "3fc007a97f3fcca5",
        "g": "24e10c133b467af2",
        "name": "",
        "info": "",
        "x": 1380,
        "y": 80,
        "wires": []
    },
    {
        "id": "4efe4dac33e0d43e",
        "type": "comment",
        "z": "3fc007a97f3fcca5",
        "g": "66db1ca4c7b21fca",
        "name": "",
        "info": "",
        "x": 1560,
        "y": 80,
        "wires": []
    },
    {
        "id": "32a021e7d248f409",
        "type": "debug",
        "z": "3fc007a97f3fcca5",
        "g": "201e1c1595fbf5df",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1830,
        "y": 2580,
        "wires": []
    },
    {
        "id": "1e276f522f2d0b73",
        "type": "moleculer-call",
        "z": "3fc007a97f3fcca5",
        "g": "201e1c1595fbf5df",
        "broker": "15fdc347.1238cd",
        "name": "",
        "topic": "p2_daq.aas",
        "options": "{}",
        "x": 1310,
        "y": 2580,
        "wires": [
            [
                "7bae1b4be882b965"
            ]
        ]
    },
    {
        "id": "93fb0e00bce1217e",
        "type": "OpcUa-Client",
        "z": "3fc007a97f3fcca5",
        "g": "201e1c1595fbf5df",
        "endpoint": "a8686de49781f383",
        "action": "write",
        "deadbandtype": "a",
        "deadbandvalue": 1,
        "time": 10,
        "timeUnit": "s",
        "certificate": "n",
        "localfile": "",
        "localkeyfile": "",
        "securitymode": "None",
        "securitypolicy": "None",
        "useTransport": false,
        "maxChunkCount": 1,
        "maxMessageSize": 8192,
        "receiveBufferSize": 8192,
        "sendBufferSize": 8192,
        "name": "Write",
        "x": 1470,
        "y": 2660,
        "wires": [
            [
                "a75ad76936649a0b"
            ],
            []
        ]
    },
    {
        "id": "272f4f2463a218cf",
        "type": "OpcUa-Client",
        "z": "3fc007a97f3fcca5",
        "g": "201e1c1595fbf5df",
        "endpoint": "a8686de49781f383",
        "action": "read",
        "deadbandtype": "a",
        "deadbandvalue": 1,
        "time": 10,
        "timeUnit": "s",
        "certificate": "n",
        "localfile": "",
        "localkeyfile": "",
        "securitymode": "None",
        "securitypolicy": "None",
        "useTransport": false,
        "maxChunkCount": 1,
        "maxMessageSize": 8192,
        "receiveBufferSize": 8192,
        "sendBufferSize": 8192,
        "name": "Read",
        "x": 1470,
        "y": 2620,
        "wires": [
            [
                "3b9adde6c6d8f536"
            ],
            []
        ]
    },
    {
        "id": "e52f55999be4eaf1",
        "type": "OpcUa-Item",
        "z": "3fc007a97f3fcca5",
        "g": "201e1c1595fbf5df",
        "item": "br=/Objects/AASROOT/p2_daq/OperationalData/Percentage/Value",
        "datatype": "Boolean",
        "value": "",
        "name": "",
        "x": 1320,
        "y": 2620,
        "wires": [
            [
                "272f4f2463a218cf"
            ]
        ]
    },
    {
        "id": "1e7e9c58e5b5b99b",
        "type": "OpcUa-Item",
        "z": "3fc007a97f3fcca5",
        "g": "201e1c1595fbf5df",
        "item": "ns=3;i=469",
        "datatype": "Double",
        "value": "",
        "name": "",
        "x": 1320,
        "y": 2660,
        "wires": [
            [
                "93fb0e00bce1217e"
            ]
        ]
    },
    {
        "id": "d5992a6562ed78dc",
        "type": "debug",
        "z": "3fc007a97f3fcca5",
        "g": "201e1c1595fbf5df",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1830,
        "y": 2620,
        "wires": []
    },
    {
        "id": "a75ad76936649a0b",
        "type": "debug",
        "z": "3fc007a97f3fcca5",
        "g": "201e1c1595fbf5df",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1830,
        "y": 2660,
        "wires": []
    },
    {
        "id": "4444dcd93c141c79",
        "type": "link in",
        "z": "3fc007a97f3fcca5",
        "g": "201e1c1595fbf5df",
        "name": "link in 19",
        "links": [
            "f13cccee1d2b8d99"
        ],
        "x": 1195,
        "y": 2580,
        "wires": [
            [
                "1e276f522f2d0b73",
                "e52f55999be4eaf1"
            ]
        ]
    },
    {
        "id": "e2f37d4809fafdf0",
        "type": "link in",
        "z": "3fc007a97f3fcca5",
        "g": "201e1c1595fbf5df",
        "name": "link in 22",
        "links": [
            "fa5d76120f1921bb"
        ],
        "x": 1195,
        "y": 2660,
        "wires": [
            [
                "1e7e9c58e5b5b99b"
            ]
        ]
    },
    {
        "id": "7bae1b4be882b965",
        "type": "function",
        "z": "3fc007a97f3fcca5",
        "g": "201e1c1595fbf5df",
        "name": "stringToJSON",
        "func": "\nlet data = msg.payload; // Assuming msg.payload contains the string \"{}\"\ntry {\n    msg.payload = JSON.parse(data); // Convert the string into a JSON object\n} catch (e) {\n    node.error(\"Invalid JSON format: \" + e);\n}\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1620,
        "y": 2580,
        "wires": [
            [
                "32a021e7d248f409"
            ]
        ]
    },
    {
        "id": "3b9adde6c6d8f536",
        "type": "function",
        "z": "3fc007a97f3fcca5",
        "g": "201e1c1595fbf5df",
        "name": "stringToJSON",
        "func": "\nlet data = msg.payload; // Assuming msg.payload contains the string \"{}\"\ntry {\n    msg.payload = JSON.parse(data); // Convert the string into a JSON object\n} catch (e) {\n    node.error(\"Invalid JSON format: \" + e);\n}\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1620,
        "y": 2620,
        "wires": [
            [
                "d5992a6562ed78dc"
            ]
        ]
    },
    {
        "id": "50e11ba2db8986a0",
        "type": "debug",
        "z": "3fc007a97f3fcca5",
        "g": "676a1694ceb3ecfc",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1830,
        "y": 2400,
        "wires": []
    },
    {
        "id": "df6c6ed78f215052",
        "type": "moleculer-call",
        "z": "3fc007a97f3fcca5",
        "g": "676a1694ceb3ecfc",
        "broker": "15fdc347.1238cd",
        "name": "",
        "topic": "p1_daq.aas",
        "options": "{}",
        "x": 1310,
        "y": 2400,
        "wires": [
            [
                "6cea46db468a3459"
            ]
        ]
    },
    {
        "id": "783e4e4437c57c5a",
        "type": "OpcUa-Client",
        "z": "3fc007a97f3fcca5",
        "g": "676a1694ceb3ecfc",
        "endpoint": "c9722999d7a6ef78",
        "action": "write",
        "deadbandtype": "a",
        "deadbandvalue": 1,
        "time": 10,
        "timeUnit": "s",
        "certificate": "n",
        "localfile": "",
        "localkeyfile": "",
        "securitymode": "None",
        "securitypolicy": "None",
        "useTransport": false,
        "maxChunkCount": 1,
        "maxMessageSize": 8192,
        "receiveBufferSize": 8192,
        "sendBufferSize": 8192,
        "name": "Write",
        "x": 1470,
        "y": 2480,
        "wires": [
            [
                "1e700bf269933de6"
            ],
            []
        ]
    },
    {
        "id": "7518c8ddb6b35be3",
        "type": "OpcUa-Client",
        "z": "3fc007a97f3fcca5",
        "g": "676a1694ceb3ecfc",
        "endpoint": "c9722999d7a6ef78",
        "action": "read",
        "deadbandtype": "a",
        "deadbandvalue": 1,
        "time": 10,
        "timeUnit": "s",
        "certificate": "n",
        "localfile": "",
        "localkeyfile": "",
        "securitymode": "None",
        "securitypolicy": "None",
        "useTransport": false,
        "maxChunkCount": 1,
        "maxMessageSize": 8192,
        "receiveBufferSize": 8192,
        "sendBufferSize": 8192,
        "name": "Read",
        "x": 1470,
        "y": 2440,
        "wires": [
            [
                "7062190cbb433128"
            ],
            []
        ]
    },
    {
        "id": "f8dec8c1931819d6",
        "type": "OpcUa-Item",
        "z": "3fc007a97f3fcca5",
        "g": "676a1694ceb3ecfc",
        "item": "br=/Objects/AASROOT/p1_daq/OperationalData/Percentage/Value",
        "datatype": "Double",
        "value": "",
        "name": "",
        "x": 1320,
        "y": 2440,
        "wires": [
            [
                "7518c8ddb6b35be3"
            ]
        ]
    },
    {
        "id": "6be8f2695d1aea8e",
        "type": "OpcUa-Item",
        "z": "3fc007a97f3fcca5",
        "g": "676a1694ceb3ecfc",
        "item": "ns=3;i=458",
        "datatype": "Double",
        "value": "",
        "name": "",
        "x": 1320,
        "y": 2480,
        "wires": [
            [
                "783e4e4437c57c5a"
            ]
        ]
    },
    {
        "id": "97c97b6abfbc6d6d",
        "type": "debug",
        "z": "3fc007a97f3fcca5",
        "g": "676a1694ceb3ecfc",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1830,
        "y": 2440,
        "wires": []
    },
    {
        "id": "1e700bf269933de6",
        "type": "debug",
        "z": "3fc007a97f3fcca5",
        "g": "676a1694ceb3ecfc",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1830,
        "y": 2480,
        "wires": []
    },
    {
        "id": "090542ad6c1e1e40",
        "type": "link in",
        "z": "3fc007a97f3fcca5",
        "g": "676a1694ceb3ecfc",
        "name": "link in 18",
        "links": [
            "f13cccee1d2b8d99"
        ],
        "x": 1195,
        "y": 2400,
        "wires": [
            [
                "df6c6ed78f215052",
                "f8dec8c1931819d6"
            ]
        ]
    },
    {
        "id": "85331b9146cb28fd",
        "type": "link in",
        "z": "3fc007a97f3fcca5",
        "g": "676a1694ceb3ecfc",
        "name": "link in 21",
        "links": [
            "fa5d76120f1921bb"
        ],
        "x": 1195,
        "y": 2480,
        "wires": [
            [
                "6be8f2695d1aea8e"
            ]
        ]
    },
    {
        "id": "6cea46db468a3459",
        "type": "function",
        "z": "3fc007a97f3fcca5",
        "g": "676a1694ceb3ecfc",
        "name": "stringToJSON",
        "func": "\nlet data = msg.payload; // Assuming msg.payload contains the string \"{}\"\ntry {\n    msg.payload = JSON.parse(data); // Convert the string into a JSON object\n} catch (e) {\n    node.error(\"Invalid JSON format: \" + e);\n}\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1620,
        "y": 2400,
        "wires": [
            [
                "50e11ba2db8986a0"
            ]
        ]
    },
    {
        "id": "7062190cbb433128",
        "type": "function",
        "z": "3fc007a97f3fcca5",
        "g": "676a1694ceb3ecfc",
        "name": "stringToJSON",
        "func": "\nlet data = msg.payload; // Assuming msg.payload contains the string \"{}\"\ntry {\n    msg.payload = JSON.parse(data); // Convert the string into a JSON object\n} catch (e) {\n    node.error(\"Invalid JSON format: \" + e);\n}\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1620,
        "y": 2440,
        "wires": [
            [
                "97c97b6abfbc6d6d"
            ]
        ]
    },
    {
        "id": "213c47e0168c51ab",
        "type": "debug",
        "z": "3fc007a97f3fcca5",
        "g": "ec4ee5ab3682f7b0",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1830,
        "y": 2220,
        "wires": []
    },
    {
        "id": "46cee5b9921e506c",
        "type": "moleculer-call",
        "z": "3fc007a97f3fcca5",
        "g": "ec4ee5ab3682f7b0",
        "broker": "15fdc347.1238cd",
        "name": "",
        "topic": "lv122_daq.aas",
        "options": "{}",
        "x": 1313,
        "y": 2221,
        "wires": [
            [
                "574e6acbe22728e6"
            ]
        ]
    },
    {
        "id": "e467f6a824d90178",
        "type": "OpcUa-Client",
        "z": "3fc007a97f3fcca5",
        "g": "ec4ee5ab3682f7b0",
        "endpoint": "1ec1c3d4b52fa3ed",
        "action": "write",
        "deadbandtype": "a",
        "deadbandvalue": 1,
        "time": 10,
        "timeUnit": "s",
        "certificate": "n",
        "localfile": "",
        "localkeyfile": "",
        "securitymode": "None",
        "securitypolicy": "None",
        "useTransport": false,
        "maxChunkCount": 1,
        "maxMessageSize": 8192,
        "receiveBufferSize": 8192,
        "sendBufferSize": 8192,
        "name": "Write",
        "x": 1463,
        "y": 2301,
        "wires": [
            [
                "e971c5ef48384a0a"
            ],
            []
        ]
    },
    {
        "id": "490c64b724de2a02",
        "type": "OpcUa-Client",
        "z": "3fc007a97f3fcca5",
        "g": "ec4ee5ab3682f7b0",
        "endpoint": "1ec1c3d4b52fa3ed",
        "action": "read",
        "deadbandtype": "a",
        "deadbandvalue": 1,
        "time": 10,
        "timeUnit": "s",
        "certificate": "n",
        "localfile": "",
        "localkeyfile": "",
        "securitymode": "None",
        "securitypolicy": "None",
        "useTransport": false,
        "maxChunkCount": 1,
        "maxMessageSize": 8192,
        "receiveBufferSize": 8192,
        "sendBufferSize": 8192,
        "name": "Read",
        "x": 1463,
        "y": 2261,
        "wires": [
            [
                "9fa81050df739df1"
            ],
            []
        ]
    },
    {
        "id": "5875606f3ff33119",
        "type": "OpcUa-Item",
        "z": "3fc007a97f3fcca5",
        "g": "ec4ee5ab3682f7b0",
        "item": "br=/Objects/AASROOT/lv122_daq/OperationalData/Percentage/Value",
        "datatype": "Boolean",
        "value": "",
        "name": "",
        "x": 1313,
        "y": 2261,
        "wires": [
            [
                "490c64b724de2a02"
            ]
        ]
    },
    {
        "id": "a1058cf037b1d84c",
        "type": "OpcUa-Item",
        "z": "3fc007a97f3fcca5",
        "g": "ec4ee5ab3682f7b0",
        "item": "ns=3;i=478",
        "datatype": "Double",
        "value": "",
        "name": "",
        "x": 1313,
        "y": 2301,
        "wires": [
            [
                "e467f6a824d90178"
            ]
        ]
    },
    {
        "id": "9f20969052c68b47",
        "type": "debug",
        "z": "3fc007a97f3fcca5",
        "g": "ec4ee5ab3682f7b0",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1830,
        "y": 2260,
        "wires": []
    },
    {
        "id": "e971c5ef48384a0a",
        "type": "debug",
        "z": "3fc007a97f3fcca5",
        "g": "ec4ee5ab3682f7b0",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1830,
        "y": 2300,
        "wires": []
    },
    {
        "id": "bbc36c753c8107c5",
        "type": "link in",
        "z": "3fc007a97f3fcca5",
        "g": "ec4ee5ab3682f7b0",
        "name": "link in 17",
        "links": [
            "f13cccee1d2b8d99"
        ],
        "x": 1195,
        "y": 2220,
        "wires": [
            [
                "46cee5b9921e506c",
                "5875606f3ff33119"
            ]
        ]
    },
    {
        "id": "ad79275b74ba6dd2",
        "type": "link in",
        "z": "3fc007a97f3fcca5",
        "g": "ec4ee5ab3682f7b0",
        "name": "link in 20",
        "links": [
            "fa5d76120f1921bb"
        ],
        "x": 1195,
        "y": 2300,
        "wires": [
            [
                "a1058cf037b1d84c"
            ]
        ]
    },
    {
        "id": "9fa81050df739df1",
        "type": "function",
        "z": "3fc007a97f3fcca5",
        "g": "ec4ee5ab3682f7b0",
        "name": "stringToJSON",
        "func": "\nlet data = msg.payload; // Assuming msg.payload contains the string \"{}\"\ntry {\n    msg.payload = JSON.parse(data); // Convert the string into a JSON object\n} catch (e) {\n    node.error(\"Invalid JSON format: \" + e);\n}\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1620,
        "y": 2260,
        "wires": [
            [
                "9f20969052c68b47"
            ]
        ]
    },
    {
        "id": "574e6acbe22728e6",
        "type": "function",
        "z": "3fc007a97f3fcca5",
        "g": "ec4ee5ab3682f7b0",
        "name": "stringToJSON",
        "func": "\nlet data = msg.payload; // Assuming msg.payload contains the string \"{}\"\ntry {\n    msg.payload = JSON.parse(data); // Convert the string into a JSON object\n} catch (e) {\n    node.error(\"Invalid JSON format: \" + e);\n}\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1620,
        "y": 2220,
        "wires": [
            [
                "213c47e0168c51ab"
            ]
        ]
    },
    {
        "id": "f13cccee1d2b8d99",
        "type": "link out",
        "z": "3fc007a97f3fcca5",
        "g": "846b42adf77c2e58",
        "name": "link out 5",
        "mode": "link",
        "links": [
            "bbc36c753c8107c5",
            "090542ad6c1e1e40",
            "4444dcd93c141c79"
        ],
        "x": 1515,
        "y": 2040,
        "wires": []
    },
    {
        "id": "87f8ad70f05eb4dc",
        "type": "inject",
        "z": "3fc007a97f3fcca5",
        "g": "846b42adf77c2e58",
        "name": "SE Percentage  Read",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "{\"idShortSubmodel\":\"OperationalData\",\"idShortSubmodelElement\":\"Percentage\",\"format\":\"value\"}",
        "payloadType": "json",
        "x": 1300,
        "y": 2040,
        "wires": [
            [
                "f13cccee1d2b8d99"
            ]
        ]
    },
    {
        "id": "63fc3e34398fb7f5",
        "type": "inject",
        "z": "3fc007a97f3fcca5",
        "g": "846b42adf77c2e58",
        "name": "SE Percentage 100 Write",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "{\"idShortSubmodel\":\"OperationalData\",\"idShortSubmodelElement\":\"Percentage\",\"value\":\"100.00\"}",
        "payloadType": "json",
        "x": 1310,
        "y": 2120,
        "wires": [
            [
                "f13cccee1d2b8d99",
                "613f19ad104062dc"
            ]
        ]
    },
    {
        "id": "6b11b2d32fa1e0f5",
        "type": "inject",
        "z": "3fc007a97f3fcca5",
        "g": "846b42adf77c2e58",
        "name": "SE Percentage 0 Write",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "{\"idShortSubmodel\":\"OperationalData\",\"idShortSubmodelElement\":\"Percentage\",\"value\":\"00.00\"}",
        "payloadType": "json",
        "x": 1300,
        "y": 2080,
        "wires": [
            [
                "f13cccee1d2b8d99",
                "613f19ad104062dc"
            ]
        ]
    },
    {
        "id": "613f19ad104062dc",
        "type": "function",
        "z": "3fc007a97f3fcca5",
        "g": "846b42adf77c2e58",
        "name": "value",
        "func": "// Função para extração apenas do value\n// Obtemos o payload recebido na mensagem\nconst inputPayload = msg.payload;\n\n// Verificamos se o campo \"value\" existe no payload\nif (inputPayload && inputPayload.value) {\n    // Definimos o novo payload com o campo \"value\"\n    msg.payload = inputPayload.value;\n} else {\n    // Se \"value\" não existe, retornamos uma mensagem de erro no payload\n    msg.payload = { error: \"Campo 'value' não encontrado no payload.\" };\n}\n\n// Retornamos a mensagem modificada\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1590,
        "y": 2080,
        "wires": [
            [
                "fa5d76120f1921bb"
            ]
        ]
    },
    {
        "id": "fa5d76120f1921bb",
        "type": "link out",
        "z": "3fc007a97f3fcca5",
        "g": "846b42adf77c2e58",
        "name": "link out 6",
        "mode": "link",
        "links": [
            "ad79275b74ba6dd2",
            "85331b9146cb28fd",
            "e2f37d4809fafdf0"
        ],
        "x": 1905,
        "y": 2080,
        "wires": []
    },
    {
        "id": "83358c6d1cc7a629",
        "type": "OpcUa-Browser",
        "z": "3fc007a97f3fcca5",
        "g": "39a13906941267e9",
        "endpoint": "fe727be26f2ef6db",
        "item": "",
        "datatype": "",
        "topic": "",
        "items": [],
        "name": "OPC Client Namespace Browse",
        "x": 2490,
        "y": 240,
        "wires": [
            [
                "ef3c651bc795ec61",
                "c51686df6e9d2bbb",
                "d89dbcb7ac4dfc8d"
            ]
        ]
    },
    {
        "id": "701758bf4bdb57f6",
        "type": "inject",
        "z": "3fc007a97f3fcca5",
        "g": "39a13906941267e9",
        "name": "Get Base Folder Structure",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": "0.3",
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 2220,
        "y": 240,
        "wires": [
            [
                "83358c6d1cc7a629"
            ]
        ]
    },
    {
        "id": "ef3c651bc795ec61",
        "type": "change",
        "z": "3fc007a97f3fcca5",
        "g": "39a13906941267e9",
        "name": "Simulation Folder",
        "rules": [
            {
                "t": "set",
                "p": "Objects.Simulation.nodeId",
                "pt": "flow",
                "to": "payload[2].item.nodeId",
                "tot": "msg"
            },
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "payload[2].item.browseName.name",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 2770,
        "y": 180,
        "wires": [
            [
                "afc84cf99adbe5dd"
            ]
        ]
    },
    {
        "id": "a1fc0d8271554baa",
        "type": "comment",
        "z": "3fc007a97f3fcca5",
        "g": "39a13906941267e9",
        "name": "Display on Dashboard",
        "info": "",
        "x": 3080,
        "y": 140,
        "wires": []
    },
    {
        "id": "c51686df6e9d2bbb",
        "type": "change",
        "z": "3fc007a97f3fcca5",
        "g": "39a13906941267e9",
        "name": "MyObjects Folder",
        "rules": [
            {
                "t": "set",
                "p": "Objects.MyObjects.nodeId",
                "pt": "flow",
                "to": "payload[4].item.nodeId",
                "tot": "msg"
            },
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "payload[4].item.browseName.name",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 2770,
        "y": 300,
        "wires": [
            [
                "8e34acd857ce0c47"
            ]
        ]
    },
    {
        "id": "d89dbcb7ac4dfc8d",
        "type": "change",
        "z": "3fc007a97f3fcca5",
        "g": "39a13906941267e9",
        "name": "StaticData Folder",
        "rules": [
            {
                "t": "set",
                "p": "Objects.StaticData.nodeId",
                "pt": "flow",
                "to": "payload[3].item.nodeId",
                "tot": "msg"
            },
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "payload[3].item.browseName.name",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 2770,
        "y": 240,
        "wires": [
            [
                "4418af6365ee4e77"
            ]
        ]
    },
    {
        "id": "b73b900787aa7d03",
        "type": "OpcUa-Browser",
        "z": "3fc007a97f3fcca5",
        "g": "39a13906941267e9",
        "endpoint": "93d9a210d21cf002",
        "item": "",
        "datatype": "",
        "topic": "",
        "items": [],
        "name": "OPC Client Namespace Browse",
        "x": 2490,
        "y": 400,
        "wires": [
            [
                "d2d45ea61f045df2",
                "a445d9d12b75d2d9"
            ]
        ]
    },
    {
        "id": "9ff77efb17cb09fa",
        "type": "inject",
        "z": "3fc007a97f3fcca5",
        "g": "39a13906941267e9",
        "name": "Get StaticData Folder Structure",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "v": "Objects.StaticData.nodeId",
                "vt": "flow"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": "0.3",
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 2210,
        "y": 400,
        "wires": [
            [
                "b73b900787aa7d03"
            ]
        ]
    },
    {
        "id": "d2d45ea61f045df2",
        "type": "change",
        "z": "3fc007a97f3fcca5",
        "g": "39a13906941267e9",
        "name": "AnalogItemArrays Folder",
        "rules": [
            {
                "t": "set",
                "p": "Objects.StaticData.AnalogItemArrays.nodeId",
                "pt": "flow",
                "to": "payload[1].item.nodeId",
                "tot": "msg"
            },
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "payload[1].item.browseName.name",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 2790,
        "y": 420,
        "wires": [
            [
                "668b6b24a5564f10"
            ]
        ]
    },
    {
        "id": "a445d9d12b75d2d9",
        "type": "change",
        "z": "3fc007a97f3fcca5",
        "g": "39a13906941267e9",
        "name": "StaticArrayVariables Folder",
        "rules": [
            {
                "t": "set",
                "p": "Objects.StaticData.StaticArrayVariables.nodeId",
                "pt": "flow",
                "to": "payload[6].item.nodeId",
                "tot": "msg"
            },
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "payload[6].item.browseName.name",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 2800,
        "y": 360,
        "wires": [
            [
                "24af649531d10c99"
            ]
        ]
    },
    {
        "id": "5f9473d98b321781",
        "type": "change",
        "z": "3fc007a97f3fcca5",
        "g": "39a13906941267e9",
        "name": "MyDevice Object",
        "rules": [
            {
                "t": "set",
                "p": "Objects.MyObjects.MyDevice.nodeId",
                "pt": "flow",
                "to": "payload[0].item.nodeId",
                "tot": "msg"
            },
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "payload[0].item.browseName.name",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 2770,
        "y": 480,
        "wires": [
            [
                "36124c0ea8745873"
            ]
        ]
    },
    {
        "id": "7617eaf963557234",
        "type": "inject",
        "z": "3fc007a97f3fcca5",
        "g": "39a13906941267e9",
        "name": "Get MyObjects Object Structure",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "v": "Objects.MyObjects.nodeId",
                "vt": "flow"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": "0.5",
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 2210,
        "y": 480,
        "wires": [
            [
                "ba0f730dd9f32afc"
            ]
        ]
    },
    {
        "id": "ba0f730dd9f32afc",
        "type": "OpcUa-Browser",
        "z": "3fc007a97f3fcca5",
        "g": "39a13906941267e9",
        "endpoint": "53f4394dbf12c6b7",
        "item": "",
        "datatype": "",
        "topic": "",
        "items": [],
        "name": "OPC Client Namespace Browse",
        "x": 2490,
        "y": 480,
        "wires": [
            [
                "5f9473d98b321781"
            ]
        ]
    },
    {
        "id": "e322d36fcd014a79",
        "type": "comment",
        "z": "3fc007a97f3fcca5",
        "g": "39a13906941267e9",
        "name": "Store & Parse nodeId & browseName",
        "info": "",
        "x": 2790,
        "y": 140,
        "wires": []
    },
    {
        "id": "048e4cb3c247b532",
        "type": "comment",
        "z": "3fc007a97f3fcca5",
        "g": "39a13906941267e9",
        "name": "Global Address Space Folder Browse",
        "info": "",
        "x": 2350,
        "y": 180,
        "wires": []
    },
    {
        "id": "afc84cf99adbe5dd",
        "type": "ui-template",
        "z": "3fc007a97f3fcca5",
        "g": "39a13906941267e9",
        "group": "ef9998baf5f61e8a",
        "page": "",
        "ui": "",
        "name": "Simulation",
        "order": 1,
        "width": 0,
        "height": 0,
        "head": "",
        "format": "<template>\n    <div class=\"inline-content\">\n        <p>Namespace 3</p>\n        <v-icon color=\"black\" icon=\"mdi-folder\" size=\"large\"></v-icon> \n    </div>\n</template>",
        "storeOutMessages": true,
        "passthru": true,
        "resendOnRefresh": true,
        "templateScope": "local",
        "className": "",
        "x": 3050,
        "y": 180,
        "wires": [
            []
        ]
    },
    {
        "id": "4418af6365ee4e77",
        "type": "ui-template",
        "z": "3fc007a97f3fcca5",
        "g": "39a13906941267e9",
        "group": "ef9998baf5f61e8a",
        "page": "",
        "ui": "",
        "name": "StaticData",
        "order": 2,
        "width": 0,
        "height": 0,
        "head": "",
        "format": "<template>\n    <div class=\"inline-content\">\n        <p>Namespace 5</p>\n        <v-icon color=\"black\" icon=\"mdi-folder-arrow-down\" size=\"large\"></v-icon> \n    </div>\n</template>",
        "storeOutMessages": true,
        "passthru": true,
        "resendOnRefresh": true,
        "templateScope": "local",
        "className": "",
        "x": 3050,
        "y": 240,
        "wires": [
            []
        ]
    },
    {
        "id": "8e34acd857ce0c47",
        "type": "ui-template",
        "z": "3fc007a97f3fcca5",
        "g": "39a13906941267e9",
        "group": "ef9998baf5f61e8a",
        "page": "",
        "ui": "",
        "name": "MyObjects",
        "order": 5,
        "width": 0,
        "height": 0,
        "head": "",
        "format": "<template>\n    <p>Namespace 6</p>\n    <div class=\"inline-content\">\n        <v-icon color=\"black\" icon=\"mdi-folder\" size=\"large\"></v-icon> \n    </div>\n</template>",
        "storeOutMessages": true,
        "passthru": true,
        "resendOnRefresh": true,
        "templateScope": "local",
        "className": "",
        "x": 3050,
        "y": 300,
        "wires": [
            []
        ]
    },
    {
        "id": "24af649531d10c99",
        "type": "ui-template",
        "z": "3fc007a97f3fcca5",
        "g": "39a13906941267e9",
        "group": "ef9998baf5f61e8a",
        "page": "",
        "ui": "",
        "name": "StaticArrayVariables",
        "order": 3,
        "width": 0,
        "height": 0,
        "head": "",
        "format": "<template>\n    <div class=\"d-flex align-center ml-3\">\n        <v-icon color=\"black\" icon=\"mdi-folder\" size=\"large\"></v-icon> \n    </div>\n</template>",
        "storeOutMessages": true,
        "passthru": true,
        "resendOnRefresh": true,
        "templateScope": "local",
        "className": "",
        "x": 3080,
        "y": 360,
        "wires": [
            []
        ]
    },
    {
        "id": "668b6b24a5564f10",
        "type": "ui-template",
        "z": "3fc007a97f3fcca5",
        "g": "39a13906941267e9",
        "group": "ef9998baf5f61e8a",
        "page": "",
        "ui": "",
        "name": "AnalogItemArrays",
        "order": 4,
        "width": 0,
        "height": 0,
        "head": "",
        "format": "<template>\n    <div class=\"d-flex align-center ml-3\">\n        <v-icon color=\"black\" icon=\"mdi-folder\" size=\"large\"></v-icon> \n    </div>\n</template>",
        "storeOutMessages": true,
        "passthru": true,
        "resendOnRefresh": true,
        "templateScope": "local",
        "className": "",
        "x": 3070,
        "y": 420,
        "wires": [
            []
        ]
    },
    {
        "id": "36124c0ea8745873",
        "type": "ui-template",
        "z": "3fc007a97f3fcca5",
        "g": "39a13906941267e9",
        "group": "ef9998baf5f61e8a",
        "page": "",
        "ui": "",
        "name": "MyDevice",
        "order": 6,
        "width": 0,
        "height": 0,
        "head": "",
        "format": "<template>\n    <div class=\"d-flex align-center ml-3\">\n        <v-icon color=\"black\" icon=\"mdi-folder\" size=\"large\"></v-icon> \n    </div>\n</template>",
        "storeOutMessages": true,
        "passthru": true,
        "resendOnRefresh": true,
        "templateScope": "local",
        "className": "",
        "x": 3040,
        "y": 480,
        "wires": [
            []
        ]
    },
    {
        "id": "734d301c2ef4605b",
        "type": "debug",
        "z": "3fc007a97f3fcca5",
        "g": "39a13906941267e9",
        "name": "debug 51",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 2540,
        "y": 320,
        "wires": []
    },
    {
        "id": "c5eee587.009a88",
        "type": "inject",
        "z": "3fc007a97f3fcca5",
        "g": "820910c38020760a",
        "name": "Test without Topic",
        "repeat": "",
        "crontab": "",
        "once": false,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 2140,
        "y": 760,
        "wires": [
            [
                "5f721d20.c74eb4"
            ]
        ]
    },
    {
        "id": "470a5816.70d2f8",
        "type": "debug",
        "z": "3fc007a97f3fcca5",
        "g": "820910c38020760a",
        "name": "Browse",
        "active": true,
        "console": "false",
        "complete": "payload",
        "x": 2770,
        "y": 760,
        "wires": []
    },
    {
        "id": "486b9c7f.892244",
        "type": "OpcUa-Item",
        "z": "3fc007a97f3fcca5",
        "g": "820910c38020760a",
        "item": "ns=2;s=1:PST-007-Alarm-Level@Training?VALUE",
        "datatype": "double",
        "value": "",
        "name": "",
        "x": 2390,
        "y": 860,
        "wires": [
            [
                "f0864f8a.10649"
            ]
        ]
    },
    {
        "id": "f0864f8a.10649",
        "type": "OpcUa-Client",
        "z": "3fc007a97f3fcca5",
        "g": "820910c38020760a",
        "endpoint": "7290d8b0.f713d8",
        "action": "read",
        "time": 10000,
        "name": "Read",
        "x": 2600,
        "y": 920,
        "wires": [
            [
                "6618ad86.b92174"
            ],
            []
        ]
    },
    {
        "id": "6618ad86.b92174",
        "type": "debug",
        "z": "3fc007a97f3fcca5",
        "g": "820910c38020760a",
        "name": "Read",
        "active": true,
        "console": "false",
        "complete": "payload",
        "x": 2760,
        "y": 920,
        "wires": []
    },
    {
        "id": "b54547b8.f84df8",
        "type": "inject",
        "z": "3fc007a97f3fcca5",
        "g": "820910c38020760a",
        "name": "Test read",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": "",
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 2170,
        "y": 920,
        "wires": [
            [
                "486b9c7f.892244",
                "777f4a48.793394",
                "a4fe7e50.10f4b",
                "ee44e61a.9ef058"
            ]
        ]
    },
    {
        "id": "13359d18.d43f23",
        "type": "OpcUa-Item",
        "z": "3fc007a97f3fcca5",
        "g": "820910c38020760a",
        "item": "ns=2;s=1:PST-007-Alarm-Level@Training?SETPOINT",
        "datatype": "Double",
        "value": "",
        "name": "",
        "x": 2390,
        "y": 1020,
        "wires": [
            [
                "7baea106.60165"
            ]
        ]
    },
    {
        "id": "7baea106.60165",
        "type": "OpcUa-Client",
        "z": "3fc007a97f3fcca5",
        "g": "820910c38020760a",
        "endpoint": "7290d8b0.f713d8",
        "action": "write",
        "deadbandvalue": "",
        "time": 10000,
        "localfile": "",
        "localkeyfile": "",
        "useTransport": false,
        "maxChunkCount": "",
        "maxMessageSize": "",
        "receiveBufferSize": "",
        "sendBufferSize": "",
        "name": "Write",
        "x": 2600,
        "y": 1020,
        "wires": [
            [
                "f90e6b13.52bad8"
            ],
            []
        ]
    },
    {
        "id": "f90e6b13.52bad8",
        "type": "debug",
        "z": "3fc007a97f3fcca5",
        "g": "820910c38020760a",
        "name": "Write",
        "active": true,
        "console": "false",
        "complete": "true",
        "x": 2760,
        "y": 1020,
        "wires": []
    },
    {
        "id": "fd381405.f82898",
        "type": "OpcUa-Client",
        "z": "3fc007a97f3fcca5",
        "g": "820910c38020760a",
        "endpoint": "7290d8b0.f713d8",
        "action": "subscribe",
        "time": "5",
        "timeUnit": "s",
        "name": "Subscribe",
        "x": 2590,
        "y": 820,
        "wires": [
            [
                "807f2a5b.9740c8"
            ],
            []
        ]
    },
    {
        "id": "807f2a5b.9740c8",
        "type": "debug",
        "z": "3fc007a97f3fcca5",
        "g": "820910c38020760a",
        "name": "Subs",
        "active": true,
        "console": "false",
        "complete": "payload",
        "x": 2760,
        "y": 820,
        "wires": []
    },
    {
        "id": "777f4a48.793394",
        "type": "OpcUa-Item",
        "z": "3fc007a97f3fcca5",
        "g": "820910c38020760a",
        "item": "ns=2;s=1:PST-007-Alarm-Level@Training?HIGH_SCALE",
        "datatype": "double",
        "value": "",
        "name": "",
        "x": 2390,
        "y": 900,
        "wires": [
            [
                "f0864f8a.10649"
            ]
        ]
    },
    {
        "id": "a4fe7e50.10f4b",
        "type": "OpcUa-Item",
        "z": "3fc007a97f3fcca5",
        "g": "820910c38020760a",
        "item": "ns=2;s=1:PST-007-Alarm-Level@Training?LOW_SCALE",
        "datatype": "double",
        "value": "",
        "name": "",
        "x": 2390,
        "y": 940,
        "wires": [
            [
                "f0864f8a.10649"
            ]
        ]
    },
    {
        "id": "51b76b2e.a38d14",
        "type": "OpcUa-Item",
        "z": "3fc007a97f3fcca5",
        "g": "820910c38020760a",
        "item": "ns=2;s=1:PST-007-Alarm-Level@Training?SETPOINT",
        "datatype": "double",
        "value": "4",
        "name": "",
        "x": 2390,
        "y": 820,
        "wires": [
            [
                "fd381405.f82898"
            ]
        ]
    },
    {
        "id": "633b6abc.947534",
        "type": "inject",
        "z": "3fc007a97f3fcca5",
        "g": "820910c38020760a",
        "name": "Test subs (250ms)",
        "repeat": "",
        "crontab": "",
        "once": false,
        "topic": "",
        "payload": "250",
        "payloadType": "num",
        "x": 2140,
        "y": 820,
        "wires": [
            [
                "51b76b2e.a38d14"
            ]
        ]
    },
    {
        "id": "38a57fd8.732b3",
        "type": "inject",
        "z": "3fc007a97f3fcca5",
        "g": "820910c38020760a",
        "name": "Test write 2.5",
        "props": [
            {
                "p": "payload",
                "v": " 2.5",
                "vt": "str"
            },
            {
                "p": "topic",
                "v": "",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "topic": "",
        "payload": " 2.5",
        "payloadType": "str",
        "x": 2160,
        "y": 1000,
        "wires": [
            [
                "13359d18.d43f23"
            ]
        ]
    },
    {
        "id": "32ebb557.602eea",
        "type": "inject",
        "z": "3fc007a97f3fcca5",
        "g": "820910c38020760a",
        "name": "Test write 3.5",
        "props": [
            {
                "p": "payload",
                "v": " 3.5",
                "vt": "str"
            },
            {
                "p": "topic",
                "v": "",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "topic": "",
        "payload": " 3.5",
        "payloadType": "string",
        "x": 2160,
        "y": 1040,
        "wires": [
            [
                "13359d18.d43f23"
            ]
        ]
    },
    {
        "id": "ee44e61a.9ef058",
        "type": "OpcUa-Item",
        "z": "3fc007a97f3fcca5",
        "g": "820910c38020760a",
        "item": "ns=2;s=1:PST-007-Alarm-Level@Training?SETPOINT",
        "datatype": "double",
        "value": "4",
        "name": "",
        "x": 2390,
        "y": 980,
        "wires": [
            [
                "f0864f8a.10649"
            ]
        ]
    },
    {
        "id": "f4dc2e15.d4872",
        "type": "OpcUa-Client",
        "z": "3fc007a97f3fcca5",
        "g": "820910c38020760a",
        "endpoint": "9883401a98aa8537",
        "action": "browse",
        "deadbandvalue": "",
        "time": 10000,
        "localfile": "",
        "localkeyfile": "",
        "useTransport": false,
        "maxChunkCount": "",
        "maxMessageSize": "",
        "receiveBufferSize": "",
        "sendBufferSize": "",
        "name": "Browse",
        "x": 2590,
        "y": 700,
        "wires": [
            [
                "8a361383.b5992"
            ],
            []
        ]
    },
    {
        "id": "17f810e6.2ef63f",
        "type": "inject",
        "z": "3fc007a97f3fcca5",
        "g": "820910c38020760a",
        "name": "Test with Topic",
        "repeat": "",
        "crontab": "",
        "once": false,
        "topic": "ns=2;s=0:IGSS Objects/Area/Cases/Diagram/Boiler@Cases/Template",
        "payload": "",
        "payloadType": "str",
        "x": 2150,
        "y": 700,
        "wires": [
            [
                "f4dc2e15.d4872"
            ]
        ]
    },
    {
        "id": "2dd2de5a.91ff52",
        "type": "debug",
        "z": "3fc007a97f3fcca5",
        "g": "820910c38020760a",
        "name": "Browse",
        "active": true,
        "console": "false",
        "complete": "payload",
        "x": 2950,
        "y": 700,
        "wires": []
    },
    {
        "id": "8a361383.b5992",
        "type": "template",
        "z": "3fc007a97f3fcca5",
        "g": "820910c38020760a",
        "name": "OpcUa-Item",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "[{\"id\":\"4b12ca9b.e7e184\",\"type\":\"OpcUa-Item\",\"item\":\"{{topic}}\",\"datatype\":\"opcua.DataType.Double\",\"value\":\"\",\"name\":\"{{browseName}}\",\"x\":251,\"y\":334,\"z\":\"30ffd2ee.59fdd6\",\"wires\":[[\"70dd1397.3c8e44\"]]}]",
        "x": 2780,
        "y": 700,
        "wires": [
            [
                "2dd2de5a.91ff52"
            ]
        ]
    },
    {
        "id": "5f721d20.c74eb4",
        "type": "OpcUa-Browser",
        "z": "3fc007a97f3fcca5",
        "g": "820910c38020760a",
        "endpoint": "9883401a98aa8537",
        "item": "",
        "datatype": "",
        "topic": "ns=2;s=0:IGSS Objects/(All)",
        "items": [],
        "name": "",
        "x": 2560,
        "y": 760,
        "wires": [
            [
                "470a5816.70d2f8"
            ]
        ]
    },
    {
        "id": "c15223dc9c7396b9",
        "type": "s7 in",
        "z": "3fc007a97f3fcca5",
        "g": "f8cde87e24e9a89e",
        "endpoint": "d85e110240fcd352",
        "mode": "all",
        "variable": "",
        "diff": false,
        "name": "",
        "x": 3230,
        "y": 1180,
        "wires": [
            [
                "0eeab11882791938"
            ]
        ]
    },
    {
        "id": "2db26d8437955a50",
        "type": "function",
        "z": "3fc007a97f3fcca5",
        "g": "f8cde87e24e9a89e",
        "name": "Finds Variable",
        "func": "var station = msg.station;\nvar variableClass = msg.variableClass;\nvar variable = msg.variable;\nvar topic = \"br=/Objects/AASROOT/\"+ station + \"/OperationalData/\" + variableClass + \"/\" + variable + \"/Value\";\nmsg = {\n    variable: msg.variable,\n    datatype: \"Boolean\",\n    topic: topic\n}\nreturn msg;\n\n// topic: \"br=/Objects/AASROOT/myStation1/Handling2/Feedback/Q_94_Claw_2_Cart/Value\"",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 3440,
        "y": 1380,
        "wires": [
            [
                "ab8bb6f55607d091"
            ]
        ]
    },
    {
        "id": "0eeab11882791938",
        "type": "trigger",
        "z": "3fc007a97f3fcca5",
        "g": "f8cde87e24e9a89e",
        "name": "",
        "op1": "",
        "op2": "0",
        "op1type": "pay",
        "op2type": "str",
        "duration": "0",
        "extend": false,
        "overrideDelay": false,
        "units": "ms",
        "reset": "",
        "bytopic": "all",
        "topic": "topic",
        "outputs": 1,
        "x": 3290,
        "y": 1220,
        "wires": [
            [
                "963163cddb981524"
            ]
        ]
    },
    {
        "id": "963163cddb981524",
        "type": "function",
        "z": "3fc007a97f3fcca5",
        "g": "f8cde87e24e9a89e",
        "name": "Creates List",
        "func": "// Obter o payload original\nlet payload = msg.payload;\n\n// Criar um novo objeto para armazenar as variáveis filtradas\nlet filteredPayload = {};\n\n// Filtrar apenas as variáveis que contém \"_80_\" no nome\nfor (let key in payload) {\n    if (key.match(/_8[0-9]_/)) {\n        filteredPayload[key] = payload[key];\n    }\n}\n\n// Definir o payload filtrado como a nova mensagem de saída\nmsg.payload = filteredPayload;\n\n// Retornar a mensagem\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 3310,
        "y": 1260,
        "wires": [
            [
                "f60bdffc19498bec"
            ]
        ]
    },
    {
        "id": "ab8bb6f55607d091",
        "type": "OpcUa-Client",
        "z": "3fc007a97f3fcca5",
        "g": "f8cde87e24e9a89e",
        "endpoint": "bdc48601.ebf958",
        "action": "read",
        "deadbandtype": "a",
        "deadbandvalue": 1,
        "time": 10,
        "timeUnit": "s",
        "certificate": "n",
        "localfile": "",
        "localkeyfile": "",
        "securitymode": "None",
        "securitypolicy": "None",
        "useTransport": false,
        "maxChunkCount": 1,
        "maxMessageSize": 8192,
        "receiveBufferSize": 8192,
        "sendBufferSize": 8192,
        "name": "OPC Client",
        "x": 3470,
        "y": 1420,
        "wires": [
            [
                "d165983abb272a8b"
            ],
            []
        ]
    },
    {
        "id": "e761456f07090d1f",
        "type": "OpcUa-Server",
        "z": "3fc007a97f3fcca5",
        "g": "f8cde87e24e9a89e",
        "port": "53881",
        "name": "OPC Server",
        "endpoint": "UA/nodeset",
        "users": "",
        "nodesetDir": "D:\\DOCS\\UNESP\\PFC\\AAS\\assets\\08_Distribution",
        "autoAcceptUnknownCertificate": true,
        "registerToDiscovery": false,
        "constructDefaultAddressSpace": false,
        "allowAnonymous": true,
        "endpointNone": true,
        "endpointSign": true,
        "endpointSignEncrypt": true,
        "endpointBasic128Rsa15": true,
        "endpointBasic256": true,
        "endpointBasic256Sha256": true,
        "maxNodesPerBrowse": 0,
        "maxNodesPerHistoryReadData": 0,
        "maxNodesPerHistoryReadEvents": 0,
        "maxNodesPerHistoryUpdateData": 0,
        "maxNodesPerRead": 0,
        "maxNodesPerWrite": 0,
        "maxNodesPerMethodCall": 0,
        "maxNodesPerRegisterNodes": 0,
        "maxNodesPerNodeManagement": 0,
        "maxMonitoredItemsPerCall": 0,
        "maxNodesPerHistoryUpdateEvents": 0,
        "maxNodesPerTranslateBrowsePathsToNodeIds": 0,
        "maxConnectionsPerEndpoint": 20,
        "maxMessageSize": 4096,
        "maxBufferSize": 4096,
        "maxSessions": 20,
        "x": 3320,
        "y": 1000,
        "wires": [
            [
                "ed3ac167c8f26f6b"
            ]
        ]
    },
    {
        "id": "f60bdffc19498bec",
        "type": "delay",
        "z": "3fc007a97f3fcca5",
        "g": "f8cde87e24e9a89e",
        "name": "6s delay",
        "pauseType": "delay",
        "timeout": "6",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 3340,
        "y": 1300,
        "wires": [
            [
                "208ec3c775e286b4"
            ]
        ]
    },
    {
        "id": "94ee81d8bcb81645",
        "type": "inject",
        "z": "3fc007a97f3fcca5",
        "g": "f8cde87e24e9a89e",
        "name": "Start",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 3250,
        "y": 1120,
        "wires": [
            [
                "415de57a32e1dc42"
            ]
        ]
    },
    {
        "id": "415de57a32e1dc42",
        "type": "function",
        "z": "3fc007a97f3fcca5",
        "g": "f8cde87e24e9a89e",
        "name": "Header",
        "func": "let csvHeader = \"Variable;Namespace;Identifier\\n\";  // Define o cabeçalho do CSV\nmsg.payload = csvHeader;  // Coloca o cabeçalho como a carga útil\nmsg.append = false;  // Sobrescreve o arquivo\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 3380,
        "y": 1120,
        "wires": [
            [
                "8783561b4d362182"
            ]
        ]
    },
    {
        "id": "8783561b4d362182",
        "type": "file",
        "z": "3fc007a97f3fcca5",
        "g": "f8cde87e24e9a89e",
        "name": "CSV File",
        "filename": "D:\\DOCS\\UNESP\\PFC\\AAS\\assets\\08_Distribution\\variable.csv",
        "filenameType": "str",
        "appendNewline": false,
        "createDir": true,
        "overwriteFile": "true",
        "encoding": "utf8",
        "x": 3520,
        "y": 1120,
        "wires": [
            []
        ]
    },
    {
        "id": "a8eac940989331e7",
        "type": "file",
        "z": "3fc007a97f3fcca5",
        "g": "f8cde87e24e9a89e",
        "name": "CSV File",
        "filename": "D:\\DOCS\\UNESP\\PFC\\AAS\\assets\\08_Distribution\\variable.csv",
        "filenameType": "str",
        "appendNewline": false,
        "createDir": false,
        "overwriteFile": "false",
        "encoding": "utf8",
        "x": 3680,
        "y": 1460,
        "wires": [
            []
        ]
    },
    {
        "id": "d165983abb272a8b",
        "type": "function",
        "z": "3fc007a97f3fcca5",
        "g": "f8cde87e24e9a89e",
        "name": "Return of query",
        "func": "let csvLine = `${msg.variable};${msg.topic}\\n`;  // Cria uma nova linha com os valores\nmsg.payload = csvLine;  // Coloca a linha CSV como a carga útil\nmsg.append = true;  // Adiciona ao final do arquivo, sem sobrescrever\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 3520,
        "y": 1460,
        "wires": [
            [
                "a8eac940989331e7"
            ]
        ]
    },
    {
        "id": "208ec3c775e286b4",
        "type": "function",
        "z": "3fc007a97f3fcca5",
        "g": "f8cde87e24e9a89e",
        "name": "Creates Classes",
        "func": "let variables = msg.payload;  // Assumindo que msg.payload é um array de variáveis\nvar station = \"Distribution_80\";\nvar variableClass = \"\";\n\nfor (let key in variables) {\n    if (variables.hasOwnProperty(key)) {\n        if (key.includes(\"I_\")) variableClass = \"Output\";\n        if (key.includes(\"O_\")) variableClass = \"Input\";\n        if (key.includes(\"F_\")) variableClass = \"Feedback\";\n        if (key.includes(\"C_\")) variableClass = \"Control\";\n        if (variableClass != \"\") node.send({ variable: key, variableClass: variableClass, station: station });  // Envia uma mensagem com a linha atual\n    }\n}\n\nreturn null;  // Finaliza o nó principal (não precisa enviar mais mensagens depois do loop)\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 3400,
        "y": 1340,
        "wires": [
            [
                "2db26d8437955a50"
            ]
        ]
    },
    {
        "id": "680b91065d0e3efd",
        "type": "file in",
        "z": "3fc007a97f3fcca5",
        "g": "f8cde87e24e9a89e",
        "name": "CSV File",
        "filename": "D:\\DOCS\\UNESP\\PFC\\AAS\\assets\\08_Distribution\\variable.csv",
        "filenameType": "str",
        "format": "utf8",
        "chunk": false,
        "sendError": false,
        "encoding": "utf8",
        "allProps": false,
        "x": 4060,
        "y": 1160,
        "wires": [
            [
                "f17642017f6486ca"
            ]
        ]
    },
    {
        "id": "f17642017f6486ca",
        "type": "function",
        "z": "3fc007a97f3fcca5",
        "g": "f8cde87e24e9a89e",
        "name": "Variable => ns;i",
        "func": "const csv = msg.payload;  // O conteúdo do CSV como string\nconst variable = msg.variable;  // A variável para buscar\n\nmsg.payload = {};\n\nconst lines = csv.trim().split('\\n');  // Divide o conteúdo em linhas e remove espaços extras\nconst header = lines.shift().split(';');  // Remove e divide o cabeçalho pelo delimitador ';'\n\nconst data = lines.map(line => {\n    const [Variable, Namespace, Identifier] = line.split(';').map(value => value.trim());\n    return { Variable, Namespace, Identifier };\n});\n\nfunction getNamespaceIdentifier(variable) {\n    const row = data.find(r => r.Variable === variable);\n    if (row) {\n        return `${row.Namespace};${row.Identifier}`;\n    }\n    return null;\n}\n\nmsg.id = getNamespaceIdentifier(variable);\n\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 4120,
        "y": 1200,
        "wires": [
            [
                "4abdbd26520559fa"
            ]
        ]
    },
    {
        "id": "8c6b208861b087c8",
        "type": "file in",
        "z": "3fc007a97f3fcca5",
        "g": "f8cde87e24e9a89e",
        "name": "CSV File",
        "filename": "D:\\DOCS\\UNESP\\PFC\\AAS\\assets\\08_Distribution\\variable.csv",
        "filenameType": "str",
        "format": "utf8",
        "chunk": false,
        "sendError": false,
        "encoding": "utf8",
        "allProps": false,
        "x": 4230,
        "y": 1460,
        "wires": [
            [
                "482a974c99d4bf0d"
            ]
        ]
    },
    {
        "id": "482a974c99d4bf0d",
        "type": "function",
        "z": "3fc007a97f3fcca5",
        "g": "f8cde87e24e9a89e",
        "name": "ns;i => Variable",
        "func": "const csv = msg.payload;  // O conteúdo do CSV como string\nconst namespaceIdentifier = msg.identifier;  // O Namespace;Identifier para buscar\n\nconst lines = csv.trim().split('\\n');  // Divide o conteúdo em linhas e remove espaços extras\nconst header = lines.shift().split(';');  // Remove e divide o cabeçalho pelo delimitador ';'\n\nconst data = lines.map(line => {\n    const [Variable, Namespace, Identifier] = line.split(';').map(value => value.trim());\n    return { Variable, Namespace, Identifier };\n});\n\nfunction getVariable(namespaceIdentifier) {\n    const [namespace, identifier] = namespaceIdentifier.split(';').map(value => value.trim());\n    const row = data.find(r => r.Namespace === namespace && r.Identifier === identifier);\n    if (row) {\n        return row.Variable;\n    }\n    return null;\n}\n\nmsg.topic = getVariable(namespaceIdentifier);\nmsg.payload = msg.value;\n\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 4390,
        "y": 1460,
        "wires": [
            [
                "c7542b90f412141e"
            ]
        ]
    },
    {
        "id": "6b897c609b1cdb50",
        "type": "s7 in",
        "z": "3fc007a97f3fcca5",
        "g": "f8cde87e24e9a89e",
        "endpoint": "d85e110240fcd352",
        "mode": "all-split",
        "variable": "",
        "diff": true,
        "name": "",
        "x": 3850,
        "y": 1000,
        "wires": [
            [
                "4cf57608b6e5cce5",
                "14761e64248e9aaa"
            ]
        ]
    },
    {
        "id": "4cf57608b6e5cce5",
        "type": "function",
        "z": "3fc007a97f3fcca5",
        "g": "f8cde87e24e9a89e",
        "name": "Filter for Distribution [80] ",
        "func": "// Obter o payload original\nlet payload = msg.payload;\nlet topic = msg.topic;\n\nif (topic.match(/_8[0-9]_/)) return msg;\nelse return null;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 4070,
        "y": 1000,
        "wires": [
            [
                "51f3b11902fd7e6c"
            ]
        ]
    },
    {
        "id": "4abdbd26520559fa",
        "type": "function",
        "z": "3fc007a97f3fcca5",
        "g": "f8cde87e24e9a89e",
        "name": "Change Variable Value",
        "func": "// Create a new payload object\nmsg.payload = msg.value;\nmsg.topic = msg.id;\n\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 4180,
        "y": 1240,
        "wires": [
            [
                "95e6116b06be6fea",
                "1aecb5504ca62dbc"
            ]
        ]
    },
    {
        "id": "95e6116b06be6fea",
        "type": "OpcUa-Client",
        "z": "3fc007a97f3fcca5",
        "g": "f8cde87e24e9a89e",
        "endpoint": "bdc48601.ebf958",
        "action": "write",
        "deadbandtype": "a",
        "deadbandvalue": 1,
        "time": 10,
        "timeUnit": "s",
        "certificate": "n",
        "localfile": "",
        "localkeyfile": "",
        "securitymode": "None",
        "securitypolicy": "None",
        "useTransport": false,
        "maxChunkCount": 1,
        "maxMessageSize": 8192,
        "receiveBufferSize": 8192,
        "sendBufferSize": 8192,
        "name": "",
        "x": 4400,
        "y": 1240,
        "wires": [
            [],
            []
        ]
    },
    {
        "id": "51f3b11902fd7e6c",
        "type": "link out",
        "z": "3fc007a97f3fcca5",
        "g": "f8cde87e24e9a89e",
        "name": "Dist_AAS_Read",
        "mode": "link",
        "links": [],
        "x": 4225,
        "y": 1000,
        "wires": []
    },
    {
        "id": "14761e64248e9aaa",
        "type": "function",
        "z": "3fc007a97f3fcca5",
        "g": "f8cde87e24e9a89e",
        "name": "Msg Adjustment",
        "func": "let variable = msg.topic;\nlet value = msg.payload;\n\nmsg = {};\n\nmsg = {variable: variable, value: value, datatype: \"Boolean\"};\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 4040,
        "y": 1120,
        "wires": [
            [
                "680b91065d0e3efd"
            ]
        ]
    },
    {
        "id": "704b8f64090d0146",
        "type": "link in",
        "z": "3fc007a97f3fcca5",
        "g": "f8cde87e24e9a89e",
        "name": "AAS_Write",
        "links": [],
        "x": 3905,
        "y": 1120,
        "wires": [
            [
                "14761e64248e9aaa"
            ]
        ]
    },
    {
        "id": "8f667e6c28468e1e",
        "type": "function",
        "z": "3fc007a97f3fcca5",
        "g": "f8cde87e24e9a89e",
        "name": "Msg Adjustment",
        "func": "msg.identifier = msg.payload.variableName;\nmsg.value = msg.payload.variableValue;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 4090,
        "y": 1460,
        "wires": [
            [
                "8c6b208861b087c8"
            ]
        ]
    },
    {
        "id": "ed3ac167c8f26f6b",
        "type": "link out",
        "z": "3fc007a97f3fcca5",
        "g": "f8cde87e24e9a89e",
        "name": "Server-Out",
        "mode": "link",
        "links": [
            "2627495adef67cc0"
        ],
        "x": 3425,
        "y": 1000,
        "wires": []
    },
    {
        "id": "2627495adef67cc0",
        "type": "link in",
        "z": "3fc007a97f3fcca5",
        "g": "f8cde87e24e9a89e",
        "name": "AAS_Translation_In",
        "links": [
            "ed3ac167c8f26f6b"
        ],
        "x": 3975,
        "y": 1460,
        "wires": [
            [
                "8f667e6c28468e1e"
            ]
        ]
    },
    {
        "id": "c7542b90f412141e",
        "type": "link out",
        "z": "3fc007a97f3fcca5",
        "g": "f8cde87e24e9a89e",
        "name": "AAS_Translate_Out",
        "mode": "link",
        "links": [],
        "x": 4505,
        "y": 1460,
        "wires": []
    },
    {
        "id": "42ee143dbb157c83",
        "type": "comment",
        "z": "3fc007a97f3fcca5",
        "g": "f8cde87e24e9a89e",
        "name": "CSV File",
        "info": "",
        "x": 3360,
        "y": 1080,
        "wires": []
    },
    {
        "id": "b0ee9faa44ca995b",
        "type": "comment",
        "z": "3fc007a97f3fcca5",
        "g": "f8cde87e24e9a89e",
        "name": "Reading PLC Variables",
        "info": "",
        "x": 4020,
        "y": 960,
        "wires": []
    },
    {
        "id": "8f73321eaaf18fb5",
        "type": "comment",
        "z": "3fc007a97f3fcca5",
        "g": "f8cde87e24e9a89e",
        "name": "Writing on PLC variables",
        "info": "",
        "x": 4070,
        "y": 1080,
        "wires": []
    },
    {
        "id": "25ee714a01f0ac66",
        "type": "comment",
        "z": "3fc007a97f3fcca5",
        "g": "f8cde87e24e9a89e",
        "name": "OPC-UA Variables Translation",
        "info": "",
        "x": 4290,
        "y": 1420,
        "wires": []
    },
    {
        "id": "e3e74a5a8ff27dcd",
        "type": "comment",
        "z": "3fc007a97f3fcca5",
        "g": "f8cde87e24e9a89e",
        "name": "OPC-UA Server",
        "info": "",
        "x": 3320,
        "y": 960,
        "wires": []
    },
    {
        "id": "1aecb5504ca62dbc",
        "type": "debug",
        "z": "3fc007a97f3fcca5",
        "g": "f8cde87e24e9a89e",
        "name": "debug 2",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 4380,
        "y": 1280,
        "wires": []
    },
    {
        "id": "5ed5ddf8a3920add",
        "type": "comment",
        "z": "3fc007a97f3fcca5",
        "g": "c188b764dd205f99",
        "name": "configuracao de valvulas",
        "info": "valvula controlada em 30\ne valvula mecanica em zero",
        "x": 3090,
        "y": 1660,
        "wires": []
    },
    {
        "id": "e84c9b1630519ebb",
        "type": "ui_button",
        "z": "3fc007a97f3fcca5",
        "g": "e12dad24f2e30dd7",
        "name": "",
        "group": "0dd7e1bf0b208734",
        "order": 16,
        "width": 4,
        "height": 1,
        "passthru": false,
        "label": "OFF",
        "tooltip": "",
        "color": "",
        "bgcolor": "red",
        "className": "Button_OFF",
        "icon": "",
        "payload": "false",
        "payloadType": "bool",
        "topic": "topic",
        "topicType": "msg",
        "x": 2350,
        "y": 1740,
        "wires": [
            [
                "efefe14ecf28779d",
                "e27cbfd3b3c0698e",
                "4abcbc41b2ea018b"
            ]
        ]
    },
    {
        "id": "26637ac156a4f327",
        "type": "ui_switch",
        "z": "3fc007a97f3fcca5",
        "g": "e12dad24f2e30dd7",
        "name": "",
        "label": "",
        "tooltip": "",
        "group": "0dd7e1bf0b208734",
        "order": 14,
        "width": 3,
        "height": 1,
        "passthru": true,
        "decouple": "false",
        "topic": "topic",
        "topicType": "msg",
        "style": "",
        "onvalue": "true",
        "onvalueType": "bool",
        "onicon": "send",
        "oncolor": "green",
        "offvalue": "false",
        "offvalueType": "bool",
        "officon": "",
        "offcolor": "red",
        "animate": false,
        "className": "switch",
        "x": 2730,
        "y": 1800,
        "wires": [
            []
        ]
    },
    {
        "id": "e27cbfd3b3c0698e",
        "type": "function",
        "z": "3fc007a97f3fcca5",
        "g": "e12dad24f2e30dd7",
        "name": "Flow Eneable",
        "func": "   if(global.get(\"M2\") == 1 || global.get(\"M1\") == 1){\n      flow.set(\"Eneable\",0) \n      msg.payload = \"desativado por outra malha\"\n      return msg;\n   }\n   else{\n      if  (msg.payload === true) {\n         flow.set(\"Eneable\", 1)\n         global.set(\"M3\", 1)\n         msg.payload = \"acionado\"\n         return msg;\n\n      } else {\n         flow.set(\"Eneable\", 0)\n         global.set(\"M3\", 0)\n         msg.payload = \"desativado\"\n         return msg;\n      }\n   }",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2640,
        "y": 1760,
        "wires": [
            [
                "8c0ae7a7c66042b1"
            ]
        ]
    },
    {
        "id": "efefe14ecf28779d",
        "type": "function",
        "z": "3fc007a97f3fcca5",
        "g": "e12dad24f2e30dd7",
        "name": "Enable OFF",
        "func": "for (let i = 0; i < 3; i++) {\n    if (msg.payload === false) {\n        msg.enable = 1;\n    } else {\n        msg.enable = 0;\n    }\n    \n    msg.mv = 0;\n    node.send(msg); // Envie a mensagem no final de cada iteração\n}",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2630,
        "y": 1720,
        "wires": [
            [
                "2c42739bbd909737"
            ]
        ]
    },
    {
        "id": "2c42739bbd909737",
        "type": "moleculer-DAQ_AO_U_WT",
        "z": "3fc007a97f3fcca5",
        "g": "e12dad24f2e30dd7",
        "broker": "63ebd62b2640f3f7",
        "name": "Pump 2",
        "topic": "",
        "options": "{}",
        "ident": "5",
        "out": "Channel_2",
        "stack": "0",
        "x": 2820,
        "y": 1720,
        "wires": [
            []
        ]
    },
    {
        "id": "8c0ae7a7c66042b1",
        "type": "debug",
        "z": "3fc007a97f3fcca5",
        "g": "e12dad24f2e30dd7",
        "name": "Line pressure",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 2820,
        "y": 1760,
        "wires": []
    },
    {
        "id": "7c298a3ca28f4a0e",
        "type": "inject",
        "z": "3fc007a97f3fcca5",
        "g": "e12dad24f2e30dd7",
        "name": "Trigger [enable]",
        "props": [
            {
                "p": "enable",
                "v": "Eneable",
                "vt": "flow"
            }
        ],
        "repeat": "0.5",
        "crontab": "",
        "once": false,
        "onceDelay": "",
        "topic": "",
        "x": 2370,
        "y": 1800,
        "wires": [
            [
                "13c790cf4c272916"
            ]
        ]
    },
    {
        "id": "13c790cf4c272916",
        "type": "function",
        "z": "3fc007a97f3fcca5",
        "g": "e12dad24f2e30dd7",
        "name": "",
        "func": " if(msg.enable == 1){\n   msg.payload = true\n   return msg;\n }else{\n    msg.payload = false\n    return msg;\n }",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2560,
        "y": 1800,
        "wires": [
            [
                "26637ac156a4f327"
            ]
        ]
    },
    {
        "id": "4abcbc41b2ea018b",
        "type": "function",
        "z": "3fc007a97f3fcca5",
        "g": "e12dad24f2e30dd7",
        "name": "Enable electro valve",
        "func": "for (let i = 0; i < 3; i++) {\n    if (msg.payload === true) {\n        msg.enable = 1;\n        msg.mv = 30;\n    } else {\n        msg.enable = 0;\n        msg.mv = 100;\n    }\n    \n   \n    node.send(msg); // Envie a mensagem no final de cada iteração\n}",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2620,
        "y": 1680,
        "wires": [
            [
                "6674b447332b4bc5"
            ]
        ]
    },
    {
        "id": "6674b447332b4bc5",
        "type": "moleculer-DAQ_AO_U_WT",
        "z": "3fc007a97f3fcca5",
        "g": "e12dad24f2e30dd7",
        "broker": "63ebd62b2640f3f7",
        "name": "Electro valve",
        "topic": "",
        "options": "{}",
        "ident": "5",
        "out": "Channel_3",
        "stack": "0",
        "x": 2830,
        "y": 1680,
        "wires": [
            []
        ]
    },
    {
        "id": "a452b82778014e86",
        "type": "ui_button",
        "z": "3fc007a97f3fcca5",
        "g": "81f3fdeef54d3b26",
        "name": "",
        "group": "0dd7e1bf0b208734",
        "order": 15,
        "width": 4,
        "height": 1,
        "passthru": false,
        "label": "ON",
        "tooltip": "",
        "color": "",
        "bgcolor": "green",
        "className": "Button_ON",
        "icon": "",
        "payload": "true",
        "payloadType": "bool",
        "topic": "topic",
        "topicType": "msg",
        "x": 2350,
        "y": 1700,
        "wires": [
            [
                "efefe14ecf28779d",
                "e27cbfd3b3c0698e",
                "4abcbc41b2ea018b"
            ]
        ]
    },
    {
        "id": "0ecb355e2ba80579",
        "type": "moleculer-PID4",
        "z": "3fc007a97f3fcca5",
        "g": "4480fb045a7f8d92",
        "broker": "63ebd62b2640f3f7",
        "name": "Line_pressure_CTRL_Loop",
        "topic": "",
        "options": "{}",
        "spdyn": "{}",
        "ident": "2",
        "pv": "",
        "setpoint": "",
        "loopControl": "pic129_pid4.pidplus",
        "x": 2480,
        "y": 1960,
        "wires": [
            [
                "8a3f461ddf5ee468"
            ],
            [
                "50d54d254aa0b5c3"
            ]
        ]
    },
    {
        "id": "50d54d254aa0b5c3",
        "type": "function",
        "z": "3fc007a97f3fcca5",
        "g": "4480fb045a7f8d92",
        "name": "Extract inputs from PID4.0/data",
        "func": "//Extract and individualize input variables from PID4.0/data\nflow.set(\"Ctrl.Loop3.proportionalConstant\", msg.payload.kp);\nflow.set(\"Ctrl.Loop3.integrative\", msg.payload.ti);\nflow.set(\"Ctrl.Loop3.derivative\", msg.payload.td);\nflow.set(\"Ctrl.Loop3.mv\", msg.payload.manipulatedVariable);\nflow.set(\"Ctrl.Loop3.error\", msg.payload.error);\nflow.set(\"setpoint3\", msg.payload.setpoint);\nflow.set(\"Ctrl.Loop3.pv\", msg.payload.pv);\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2790,
        "y": 1960,
        "wires": [
            []
        ]
    },
    {
        "id": "8a3f461ddf5ee468",
        "type": "moleculer-DAQ_AO_U_WT",
        "z": "3fc007a97f3fcca5",
        "g": "4480fb045a7f8d92",
        "broker": "63ebd62b2640f3f7",
        "name": "Pump 2",
        "topic": "",
        "options": "{}",
        "ident": "4",
        "out": "Channel_2",
        "stack": "0",
        "x": 2800,
        "y": 1920,
        "wires": [
            []
        ]
    },
    {
        "id": "2a57b6c569510a01",
        "type": "inject",
        "z": "3fc007a97f3fcca5",
        "g": "4480fb045a7f8d92",
        "name": "Trigger [enable, SP, PV, kp, td, ti]",
        "props": [
            {
                "p": "enable",
                "v": "Eneable",
                "vt": "flow"
            },
            {
                "p": "setpoint",
                "v": "Ctrl.Loop3.setpoint",
                "vt": "flow"
            },
            {
                "p": "pv",
                "v": "PIT118",
                "vt": "global"
            },
            {
                "p": "kp",
                "v": "Kp_3",
                "vt": "flow"
            },
            {
                "p": "td",
                "v": "Td_3",
                "vt": "flow"
            },
            {
                "p": "ti",
                "v": "Ti_3",
                "vt": "flow"
            }
        ],
        "repeat": "0.25",
        "crontab": "",
        "once": false,
        "onceDelay": "",
        "topic": "",
        "x": 2420,
        "y": 1900,
        "wires": [
            [
                "0ecb355e2ba80579"
            ]
        ]
    },
    {
        "id": "42b8d27ec63bada8",
        "type": "ui_chart",
        "z": "3fc007a97f3fcca5",
        "g": "f73bca4c7b3fa24a",
        "name": "",
        "group": "718989759ca7cebb",
        "order": 1,
        "width": 20,
        "height": 7,
        "label": "SetPoint x Process variable",
        "chartType": "line",
        "legend": "true",
        "xformat": "auto",
        "interpolate": "linear",
        "nodata": "",
        "dot": false,
        "ymin": "0",
        "ymax": "100",
        "removeOlder": "3",
        "removeOlderPoints": "",
        "removeOlderUnit": "60",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#00ff4c",
            "#00d5ff",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "className": "",
        "x": 3040,
        "y": 2300,
        "wires": [
            []
        ]
    },
    {
        "id": "a45b2a2a102a24d9",
        "type": "function",
        "z": "3fc007a97f3fcca5",
        "g": "f73bca4c7b3fa24a",
        "name": "GET.proportionalConstant",
        "func": "var local_proportionalConstant = flow.get(\"Ctrl.Loop3.proportionalConstant\");\nmsg.payload = local_proportionalConstant;\nreturn msg;\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2750,
        "y": 2140,
        "wires": [
            [
                "1c60aaf00905a1e1"
            ]
        ]
    },
    {
        "id": "d15ef6302fb52c0d",
        "type": "function",
        "z": "3fc007a97f3fcca5",
        "g": "f73bca4c7b3fa24a",
        "name": "GET.derivativeTimeInMs",
        "func": "var local_derivativeTimeInMs = flow.get(\"Ctrl.Loop3.derivative\");\nmsg.payload = local_derivativeTimeInMs;\nreturn msg;\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2750,
        "y": 2100,
        "wires": [
            [
                "a37bde095c692967"
            ]
        ]
    },
    {
        "id": "f532c38f90447c20",
        "type": "function",
        "z": "3fc007a97f3fcca5",
        "g": "f73bca4c7b3fa24a",
        "name": "GET.resetTimeInMs",
        "func": "var local_resetTimeInMs = flow.get(\"Ctrl.Loop3.integrative\");\nmsg.payload = local_resetTimeInMs;\nreturn msg;\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2730,
        "y": 2180,
        "wires": [
            [
                "1afe93092dc51211"
            ]
        ]
    },
    {
        "id": "a37bde095c692967",
        "type": "ui_text",
        "z": "3fc007a97f3fcca5",
        "g": "f73bca4c7b3fa24a",
        "group": "0dd7e1bf0b208734",
        "order": 10,
        "width": 5,
        "height": 1,
        "name": "",
        "label": "Td",
        "format": "{{msg.payload}}",
        "layout": "col-center",
        "className": "",
        "style": true,
        "font": "Times New Roman,Times,serif",
        "fontSize": "20",
        "color": "#469daf",
        "x": 2970,
        "y": 2100,
        "wires": []
    },
    {
        "id": "1c60aaf00905a1e1",
        "type": "ui_text",
        "z": "3fc007a97f3fcca5",
        "g": "f73bca4c7b3fa24a",
        "group": "0dd7e1bf0b208734",
        "order": 7,
        "width": 5,
        "height": 1,
        "name": "",
        "label": "kp",
        "format": "{{msg.payload}}",
        "layout": "col-center",
        "className": "",
        "style": true,
        "font": "",
        "fontSize": "20",
        "color": "#469daf",
        "x": 2970,
        "y": 2140,
        "wires": []
    },
    {
        "id": "1afe93092dc51211",
        "type": "ui_text",
        "z": "3fc007a97f3fcca5",
        "g": "f73bca4c7b3fa24a",
        "group": "0dd7e1bf0b208734",
        "order": 13,
        "width": 5,
        "height": 1,
        "name": "",
        "label": "Ti",
        "format": "{{msg.payload}}",
        "layout": "col-center",
        "className": "",
        "style": true,
        "font": "",
        "fontSize": "20",
        "color": "#469daf",
        "x": 2970,
        "y": 2180,
        "wires": []
    },
    {
        "id": "f1842a02f07c4d5a",
        "type": "inject",
        "z": "3fc007a97f3fcca5",
        "g": "f73bca4c7b3fa24a",
        "name": "One second cyclical request",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "1",
        "crontab": "",
        "once": false,
        "onceDelay": "1",
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 2400,
        "y": 2180,
        "wires": [
            [
                "d15ef6302fb52c0d",
                "a45b2a2a102a24d9",
                "f532c38f90447c20",
                "1e2cff52dbaaa463",
                "476c193aa2e5e17f",
                "df40d05c0b650acd",
                "d3f793525ba89886",
                "157fd467e3db1248"
            ]
        ]
    },
    {
        "id": "1e2cff52dbaaa463",
        "type": "function",
        "z": "3fc007a97f3fcca5",
        "g": "f73bca4c7b3fa24a",
        "name": "GET.PIT118",
        "func": "var local_PIT129 = global.get(\"PIT118\");\nmsg.payload = local_PIT129;\nreturn msg;\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2710,
        "y": 2060,
        "wires": [
            [
                "c5d7b4c6b586a7bb"
            ]
        ]
    },
    {
        "id": "c5d7b4c6b586a7bb",
        "type": "ui_gauge",
        "z": "3fc007a97f3fcca5",
        "g": "f73bca4c7b3fa24a",
        "name": "",
        "group": "0dd7e1bf0b208734",
        "order": 1,
        "width": 11,
        "height": 6,
        "gtype": "compass",
        "title": "Line pressure",
        "label": "%",
        "format": "{{value}}",
        "min": 0,
        "max": "100",
        "colors": [
            "#00b500",
            "#e6e600",
            "#ca3838"
        ],
        "seg1": "",
        "seg2": "",
        "diff": false,
        "className": "",
        "x": 3000,
        "y": 2060,
        "wires": []
    },
    {
        "id": "476c193aa2e5e17f",
        "type": "function",
        "z": "3fc007a97f3fcca5",
        "g": "f73bca4c7b3fa24a",
        "name": "GET.manipulated variable",
        "func": "var local_mv = flow.get(\"Ctrl.Loop3.mv\");\nmsg.payload = local_mv;\nmsg.topic = \"Manipulate variable\";\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2750,
        "y": 2220,
        "wires": [
            [
                "334e612c8ba020f5"
            ]
        ]
    },
    {
        "id": "334e612c8ba020f5",
        "type": "ui_chart",
        "z": "3fc007a97f3fcca5",
        "g": "f73bca4c7b3fa24a",
        "name": "",
        "group": "718989759ca7cebb",
        "order": 2,
        "width": 20,
        "height": 6,
        "label": "Manipulated variable",
        "chartType": "line",
        "legend": "true",
        "xformat": "auto",
        "interpolate": "linear",
        "nodata": "",
        "dot": false,
        "ymin": "-20",
        "ymax": "100",
        "removeOlder": "3",
        "removeOlderPoints": "",
        "removeOlderUnit": "60",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#fbff00",
            "#ff0000",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "className": "",
        "x": 3020,
        "y": 2220,
        "wires": [
            []
        ]
    },
    {
        "id": "df40d05c0b650acd",
        "type": "function",
        "z": "3fc007a97f3fcca5",
        "g": "f73bca4c7b3fa24a",
        "name": "GET.Set Point",
        "func": "var local_SetPoint = flow.get(\"setpoint3\");\nmsg.payload = local_SetPoint;\nmsg.topic = \"Set Point\";\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2720,
        "y": 2340,
        "wires": [
            [
                "42b8d27ec63bada8"
            ]
        ]
    },
    {
        "id": "d3f793525ba89886",
        "type": "function",
        "z": "3fc007a97f3fcca5",
        "g": "f73bca4c7b3fa24a",
        "name": "GET.Error",
        "func": "var local_mv = flow.get(\"Ctrl.Loop3.error\");\nmsg.payload = local_mv;\nmsg.topic = \"Error\";\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2700,
        "y": 2260,
        "wires": [
            [
                "334e612c8ba020f5"
            ]
        ]
    },
    {
        "id": "157fd467e3db1248",
        "type": "function",
        "z": "3fc007a97f3fcca5",
        "g": "f73bca4c7b3fa24a",
        "name": "pv",
        "func": "var local_pv = flow.get(\"Ctrl.Loop3.pv\");\nmsg.payload = local_pv;\nmsg.topic = \"Process variable\";\nreturn msg;\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2690,
        "y": 2300,
        "wires": [
            [
                "42b8d27ec63bada8"
            ]
        ]
    },
    {
        "id": "e62ca43880eabaa0",
        "type": "function",
        "z": "3fc007a97f3fcca5",
        "g": "42c4050def517ecb",
        "name": "Sinus wave - Generator",
        "func": "//Sine wave function calculation\nvar x = flow.get(\"My_arc001\") + ((Math.PI * 2)/300); // ===300 points (seconds) in the arc\nflow.set(\"My_arc001\", x)\nvar SinGen = Math.sin(x);  // === It varies from +1 to -1\nif (flow.get(\"My_arc001\") >= (Math.PI * 2)) { flow.set(\"My_arc001\", 0.0) };\n\n//Scaling [ Y-Y0 = m.(X-X0) ]\nvar VoutMax = 55;\nvar VoutMin = 15;\nvar AngCoef = 2 / (VoutMax - VoutMin);\nvar Vout = ((SinGen+1)/AngCoef) + VoutMin ;\n\n//var Vout = SinGen;\n\n//flow Var Level Setpoint definition\nflow.set(\"SinusSetpoint\", Vout);\nmsg.payload = Vout;\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "//O código adicionado aqui será executado uma vez\n// sempre que o nó for iniciado.\n\nflow.set(\"My_arc001\", 0.0); //Varies the number from 0 to Pi*2 (in rad mode)",
        "finalize": "",
        "libs": [],
        "x": 3550,
        "y": 1740,
        "wires": [
            [
                "b4529c39009f4eb5"
            ]
        ]
    },
    {
        "id": "b4529c39009f4eb5",
        "type": "function",
        "z": "3fc007a97f3fcca5",
        "g": "42c4050def517ecb",
        "name": "Ctrl.Loop3.setpoint",
        "func": "flow.set(\"Ctrl.Loop3.setpoint\", msg.payload);\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 3830,
        "y": 1780,
        "wires": [
            []
        ]
    },
    {
        "id": "526f554d6149b968",
        "type": "inject",
        "z": "3fc007a97f3fcca5",
        "g": "42c4050def517ecb",
        "name": "",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "0.25",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "select_setpoint_03",
        "payloadType": "flow",
        "x": 3110,
        "y": 1780,
        "wires": [
            [
                "c2a96bb464145167"
            ]
        ]
    },
    {
        "id": "e0d55baa09ca0693",
        "type": "function",
        "z": "3fc007a97f3fcca5",
        "g": "42c4050def517ecb",
        "name": "select_setpoint_Line_pressure",
        "func": "flow.set(\"select_setpoint_03\", msg.payload);\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 3330,
        "y": 1960,
        "wires": [
            []
        ]
    },
    {
        "id": "c2a96bb464145167",
        "type": "switch",
        "z": "3fc007a97f3fcca5",
        "g": "42c4050def517ecb",
        "name": "",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "1",
                "vt": "num"
            },
            {
                "t": "eq",
                "v": "3",
                "vt": "num"
            },
            {
                "t": "eq",
                "v": "4",
                "vt": "num"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 3,
        "x": 3330,
        "y": 1780,
        "wires": [
            [
                "e62ca43880eabaa0"
            ],
            [
                "6ccbd5672da27bd3"
            ],
            [
                "85ba078991fbf6f3"
            ]
        ]
    },
    {
        "id": "85ba078991fbf6f3",
        "type": "function",
        "z": "3fc007a97f3fcca5",
        "g": "42c4050def517ecb",
        "name": "Triangle wave - Generator   .",
        "func": "//Triangle wave function calculation\nvar VoutMin = 10;\nvar VoutMax = 55;\n// coef > 1, wave more steep\n// coef = 1, wave in 45 degrees\n// coef < 1, wave less steep\nvar coef = 0.20\nvar Vout = flow.get(\"tri\") + (flow.get(\"signal\")* coef);\nflow.set(\"tri\", Vout);\n\n//Definition if it count up or counts down\nif (Vout <= VoutMin) { flow.set(\"signal\", 1);}\n                else { ; }\nif (Vout >= VoutMax) { flow.set(\"signal\",-1);}\n                else { ; }              \n\nflow.set(\"TriangleSetpoint\", Vout);\nmsg.payload = Vout;\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "//O código adicionado aqui será executado uma vez\n// sempre que o nó for iniciado.\nvar VoutMin = 10;\nflow.set(\"tri\",VoutMin);\nflow.set(\"signal\", 1);",
        "finalize": "",
        "libs": [],
        "x": 3560,
        "y": 1840,
        "wires": [
            [
                "b4529c39009f4eb5"
            ]
        ]
    },
    {
        "id": "6ccbd5672da27bd3",
        "type": "function",
        "z": "3fc007a97f3fcca5",
        "g": "42c4050def517ecb",
        "name": "Cosinus wave - Generator",
        "func": "//Cosine wave function calculation\n//Sine wave function calculation\nvar x = flow.get(\"My_arc002\") + ((Math.PI *2)/300); //300 points in the arc\nflow.set(\"My_arc002\", x)\nif (flow.get(\"My_arc002\") >= (Math.PI *2)) { flow.set(\"My_arc002\", 0.0) };\nvar CosGen = Math.cos(x);\n\n//Scaling [ Y-Y0 = m.(X-X0) ]\nvar VoutMax = 55;\nvar VoutMin = 10;\nvar AngCoef = 2 / (VoutMax - VoutMin);\nvar Vout = ((CosGen+1)/AngCoef) + VoutMin ;\n\n//flow Var Level Setpoint definition\nflow.set(\"CosinusSetpoint\", Vout);\nmsg.payload = Vout;\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "//O código adicionado aqui será executado uma vez\n// sempre que o nó for iniciado.\n\nflow.set(\"My_arc002\", 0.0); //Varies the number from 0 to Pi/2 (in rad mode)",
        "finalize": "",
        "libs": [],
        "x": 3550,
        "y": 1800,
        "wires": [
            [
                "b4529c39009f4eb5"
            ]
        ]
    },
    {
        "id": "3faba50ff9e35a5c",
        "type": "ui_text",
        "z": "3fc007a97f3fcca5",
        "g": "42c4050def517ecb",
        "group": "0dd7e1bf0b208734",
        "order": 2,
        "width": 0,
        "height": 0,
        "name": "",
        "label": "Select setpoint",
        "format": "{{msg.payload}}",
        "layout": "col-center",
        "className": "",
        "style": false,
        "font": "",
        "fontSize": 16,
        "color": "#000000",
        "x": 3100,
        "y": 1920,
        "wires": []
    },
    {
        "id": "2bd03a3ff56b5fa9",
        "type": "ui_dropdown",
        "z": "3fc007a97f3fcca5",
        "g": "42c4050def517ecb",
        "name": "",
        "label": "",
        "tooltip": "",
        "place": "Select Setpoint",
        "group": "0dd7e1bf0b208734",
        "order": 3,
        "width": 0,
        "height": 0,
        "passthru": true,
        "multiple": false,
        "options": [
            {
                "label": "Sinus Setpoint",
                "value": 1,
                "type": "num"
            },
            {
                "label": "Cosinus Setpoint",
                "value": 3,
                "type": "num"
            },
            {
                "label": "Triangle Setpoint",
                "value": 4,
                "type": "num"
            }
        ],
        "payload": "",
        "topic": "topic",
        "topicType": "msg",
        "className": "",
        "x": 3080,
        "y": 1960,
        "wires": [
            [
                "e0d55baa09ca0693"
            ]
        ]
    },
    {
        "id": "39bb74f5a3aee95d",
        "type": "ui_numeric",
        "z": "3fc007a97f3fcca5",
        "g": "ded0df8381430a9c",
        "name": "",
        "label": "Kp",
        "tooltip": "",
        "group": "0dd7e1bf0b208734",
        "order": 6,
        "width": 4,
        "height": 1,
        "wrap": false,
        "passthru": true,
        "topic": "topic",
        "topicType": "msg",
        "format": "{{value}}",
        "min": 0,
        "max": "30",
        "step": "0.1",
        "className": "",
        "x": 3470,
        "y": 2200,
        "wires": [
            [
                "f6402395b4bac4ec"
            ]
        ]
    },
    {
        "id": "f6402395b4bac4ec",
        "type": "function",
        "z": "3fc007a97f3fcca5",
        "g": "ded0df8381430a9c",
        "name": "Kp",
        "func": "flow.set(\"Kp_3\", msg.payload);\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 3610,
        "y": 2200,
        "wires": [
            []
        ]
    },
    {
        "id": "dc302697ae327bef",
        "type": "ui_numeric",
        "z": "3fc007a97f3fcca5",
        "g": "ded0df8381430a9c",
        "name": "",
        "label": "Td",
        "tooltip": "",
        "group": "0dd7e1bf0b208734",
        "order": 9,
        "width": 4,
        "height": 1,
        "wrap": false,
        "passthru": true,
        "topic": "topic",
        "topicType": "msg",
        "format": "{{value}}",
        "min": 0,
        "max": "30",
        "step": "0.1",
        "className": "",
        "x": 3470,
        "y": 2260,
        "wires": [
            [
                "9732a4893a357d43"
            ]
        ]
    },
    {
        "id": "9732a4893a357d43",
        "type": "function",
        "z": "3fc007a97f3fcca5",
        "g": "ded0df8381430a9c",
        "name": "Td",
        "func": "flow.set(\"Td_3\", msg.payload);\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 3610,
        "y": 2260,
        "wires": [
            []
        ]
    },
    {
        "id": "68a76c40bff8c2a7",
        "type": "function",
        "z": "3fc007a97f3fcca5",
        "g": "ded0df8381430a9c",
        "name": "Ti",
        "func": "flow.set(\"Ti_3\", msg.payload);\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 3610,
        "y": 2320,
        "wires": [
            []
        ]
    },
    {
        "id": "ae6699b0a058bb3e",
        "type": "ui_numeric",
        "z": "3fc007a97f3fcca5",
        "g": "ded0df8381430a9c",
        "name": "",
        "label": "Ti",
        "tooltip": "",
        "group": "0dd7e1bf0b208734",
        "order": 12,
        "width": 4,
        "height": 1,
        "wrap": false,
        "passthru": true,
        "topic": "topic",
        "topicType": "msg",
        "format": "{{value}}",
        "min": 0,
        "max": 10,
        "step": "0.1",
        "className": "",
        "x": 3470,
        "y": 2320,
        "wires": [
            [
                "68a76c40bff8c2a7"
            ]
        ]
    },
    {
        "id": "42af03e22a571061",
        "type": "ui_text",
        "z": "3fc007a97f3fcca5",
        "g": "ded0df8381430a9c",
        "group": "0dd7e1bf0b208734",
        "order": 4,
        "width": 0,
        "height": 0,
        "name": "",
        "label": "Select Pid 4.0 Paramas",
        "format": "{{msg.payload}}",
        "layout": "col-center",
        "className": "",
        "style": false,
        "font": "",
        "fontSize": 16,
        "color": "#000000",
        "x": 3550,
        "y": 2160,
        "wires": []
    },
    {
        "id": "27de17b79b18d520",
        "type": "ui_button",
        "z": "3fc007a97f3fcca5",
        "g": "ded0df8381430a9c",
        "name": "",
        "group": "0dd7e1bf0b208734",
        "order": 5,
        "width": 2,
        "height": 1,
        "passthru": false,
        "label": "Kp Standart",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "className": "",
        "icon": "",
        "payload": "1.2",
        "payloadType": "num",
        "topic": "topic",
        "topicType": "msg",
        "x": 3290,
        "y": 2200,
        "wires": [
            [
                "39bb74f5a3aee95d"
            ]
        ]
    },
    {
        "id": "316fa82cfc1b3509",
        "type": "ui_button",
        "z": "3fc007a97f3fcca5",
        "g": "ded0df8381430a9c",
        "name": "",
        "group": "0dd7e1bf0b208734",
        "order": 8,
        "width": 2,
        "height": 1,
        "passthru": false,
        "label": "Td Standart",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "className": "",
        "icon": "",
        "payload": "0",
        "payloadType": "num",
        "topic": "topic",
        "topicType": "msg",
        "x": 3290,
        "y": 2260,
        "wires": [
            [
                "dc302697ae327bef"
            ]
        ]
    },
    {
        "id": "010b398f6eff0b4d",
        "type": "ui_button",
        "z": "3fc007a97f3fcca5",
        "g": "ded0df8381430a9c",
        "name": "",
        "group": "0dd7e1bf0b208734",
        "order": 11,
        "width": 2,
        "height": 1,
        "passthru": false,
        "label": "Ti Standart",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "className": "",
        "icon": "",
        "payload": "1.5",
        "payloadType": "num",
        "topic": "topic",
        "topicType": "msg",
        "x": 3290,
        "y": 2320,
        "wires": [
            [
                "ae6699b0a058bb3e"
            ]
        ]
    },
    {
        "id": "e7866a468bee9cd9",
        "type": "function",
        "z": "3fc007a97f3fcca5",
        "g": "641b999905bd3f11",
        "name": "Sinus wave - Generator",
        "func": "//Sine wave function calculation\nvar x = flow.get(\"My_arc001\") + ((Math.PI * 2)/300); // ===300 points (seconds) in the arc\nflow.set(\"My_arc001\", x)\nvar SinGen = Math.sin(x);  // === It varies from +1 to -1\nif (flow.get(\"My_arc001\") >= (Math.PI * 2)) { flow.set(\"My_arc001\", 0.0) };\n\n//Scaling [ Y-Y0 = m.(X-X0) ]\nvar VoutMax = 55;\nvar VoutMin = 15;\nvar AngCoef = 2 / (VoutMax - VoutMin);\nvar Vout = ((SinGen+1)/AngCoef) + VoutMin ;\n\n//var Vout = SinGen;\n\n//flow Var Level Setpoint definition\nflow.set(\"SinusSetpoint\", Vout);\nmsg.payload = Vout;\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "//O código adicionado aqui será executado uma vez\n// sempre que o nó for iniciado.\n\nflow.set(\"My_arc001\", 0.0); //Varies the number from 0 to Pi*2 (in rad mode)",
        "finalize": "",
        "libs": [],
        "x": 3870,
        "y": 140,
        "wires": [
            [
                "abac716e2eec0ea3"
            ]
        ]
    },
    {
        "id": "abac716e2eec0ea3",
        "type": "function",
        "z": "3fc007a97f3fcca5",
        "g": "641b999905bd3f11",
        "name": "setpoint",
        "func": "flow.set(\"setpoint\", msg.payload);\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 4180,
        "y": 180,
        "wires": [
            []
        ]
    },
    {
        "id": "888c0480901a108a",
        "type": "inject",
        "z": "3fc007a97f3fcca5",
        "g": "641b999905bd3f11",
        "name": "",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "0.25",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "select_setpoint",
        "payloadType": "flow",
        "x": 3420,
        "y": 180,
        "wires": [
            [
                "39c34e01d4b6b32e"
            ]
        ]
    },
    {
        "id": "03c89edb1248a1db",
        "type": "function",
        "z": "3fc007a97f3fcca5",
        "g": "641b999905bd3f11",
        "name": "select_setpoint",
        "func": "flow.set(\"select_setpoint\", msg.payload);\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 4160,
        "y": 300,
        "wires": [
            []
        ]
    },
    {
        "id": "39c34e01d4b6b32e",
        "type": "switch",
        "z": "3fc007a97f3fcca5",
        "g": "641b999905bd3f11",
        "name": "",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "1",
                "vt": "num"
            },
            {
                "t": "eq",
                "v": "2",
                "vt": "num"
            },
            {
                "t": "eq",
                "v": "3",
                "vt": "num"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 3,
        "x": 3650,
        "y": 180,
        "wires": [
            [
                "e7866a468bee9cd9"
            ],
            [
                "041d3a3623195d0a"
            ],
            [
                "9e190a4bd14a6f8c"
            ]
        ]
    },
    {
        "id": "9e190a4bd14a6f8c",
        "type": "function",
        "z": "3fc007a97f3fcca5",
        "g": "641b999905bd3f11",
        "name": "Triangle wave - Generator   .",
        "func": "//Triangle wave function calculation\nvar VoutMin = 10;\nvar VoutMax = 55;\n// coef > 1, wave more steep\n// coef = 1, wave in 45 degrees\n// coef < 1, wave less steep\nvar coef = 0.20\nvar Vout = flow.get(\"tri\") + (flow.get(\"signal\")* coef);\nflow.set(\"tri\", Vout);\n\n//Definition if it count up or counts down\nif (Vout <= VoutMin) { flow.set(\"signal\", 1);}\n                else { ; }\nif (Vout >= VoutMax) { flow.set(\"signal\",-1);}\n                else { ; }              \n\nflow.set(\"TriangleSetpoint\", Vout);\nmsg.payload = Vout;\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "//O código adicionado aqui será executado uma vez\n// sempre que o nó for iniciado.\nvar VoutMin = 10;\nflow.set(\"tri\",VoutMin);\nflow.set(\"signal\", 1);",
        "finalize": "",
        "libs": [],
        "x": 3880,
        "y": 220,
        "wires": [
            [
                "abac716e2eec0ea3"
            ]
        ]
    },
    {
        "id": "041d3a3623195d0a",
        "type": "function",
        "z": "3fc007a97f3fcca5",
        "g": "641b999905bd3f11",
        "name": "Fixed setpoint",
        "func": "var setpoint = 50;\nmsg.payload = setpoint;\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "//O código adicionado aqui será executado uma vez\n// sempre que o nó for iniciado.\nvar VoutMin = 10;\nflow.set(\"tri\",VoutMin);\nflow.set(\"signal\", 1);",
        "finalize": "",
        "libs": [],
        "x": 3840,
        "y": 180,
        "wires": [
            [
                "abac716e2eec0ea3"
            ]
        ]
    },
    {
        "id": "06ceee9237853c7e",
        "type": "function",
        "z": "3fc007a97f3fcca5",
        "g": "f7416b84df4d8841",
        "name": "kp",
        "func": "flow.set(\"kp\", msg.payload);\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 4190,
        "y": 460,
        "wires": [
            []
        ]
    },
    {
        "id": "3119413db649f296",
        "type": "function",
        "z": "3fc007a97f3fcca5",
        "g": "f7416b84df4d8841",
        "name": "td",
        "func": "flow.set(\"td\", msg.payload);\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 4190,
        "y": 540,
        "wires": [
            []
        ]
    },
    {
        "id": "5e7eee9c0a5f2ee2",
        "type": "function",
        "z": "3fc007a97f3fcca5",
        "g": "f7416b84df4d8841",
        "name": "ti",
        "func": "flow.set(\"ti\", msg.payload);\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 4190,
        "y": 620,
        "wires": [
            []
        ]
    },
    {
        "id": "cf96d08f43b562d8",
        "type": "function",
        "z": "3fc007a97f3fcca5",
        "name": "Gera Variáveis",
        "func": "// msg.payload = {\n//     valorCirculo: global.get(\"registry.sensor.aas.idShortAsset\"), // Pegando variável global\n//     valorQuadrado: global.get(\"registry.controller.aas.idShortAsset\"), // Pegando variável global\n//     valorTriangulo: global.get(\"registry.actuator.aas.idShortAsset\"), // Pegando variável global\n// };\n// return msg;\n\n\n\n// var registry = global.get(\"registry\") || {};\n// msg.payload = registry.sensor.aas.idShortAsset || \"Valor não encontrado\";\n// // msg.payload = registry;\n// return msg;\n\n\n\n// global.get(\"registry.sensor.aas.idShortAsset\")\n// global.get(\"registry.controller.aas.idShortAsset\")\n// global.get(\"registry.actuator.aas.idShortAsset\")\n\n\n\nmsg.payload = {\n    sensor: global.get(\"registry.sensor.aas.idShortAsset\"),\n    controller: global.get(\"registry.controller.aas.idShortAsset\"),\n    actuator: global.get(\"registry.actuator.aas.idShortAsset\")\n};\nreturn msg;\n\n\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 620,
        "y": 820,
        "wires": [
            []
        ]
    },
    {
        "id": "e00c62e9ce79c537",
        "type": "inject",
        "z": "3fc007a97f3fcca5",
        "name": "1s",
        "props": [],
        "repeat": "1",
        "crontab": "",
        "once": true,
        "onceDelay": "1",
        "topic": "",
        "x": 430,
        "y": 820,
        "wires": [
            [
                "cf96d08f43b562d8"
            ]
        ]
    },
    {
        "id": "1e9b3c0b14556396",
        "type": "inject",
        "z": "3fc007a97f3fcca5",
        "name": "1s",
        "props": [],
        "repeat": "1",
        "crontab": "",
        "once": true,
        "onceDelay": "1",
        "topic": "",
        "x": 430,
        "y": 860,
        "wires": [
            [
                "6bbbb05a000d854b"
            ]
        ]
    },
    {
        "id": "6bbbb05a000d854b",
        "type": "function",
        "z": "3fc007a97f3fcca5",
        "name": "Gera Variáveis",
        "func": "msg.payload = {\n    a000000001: global.get(\"registry.sensor.aas.idShortAsset\"),\n    a000000002: global.get(\"registry.controller.aas.idShortAsset\"),\n    a000000003: global.get(\"registry.actuator.aas.idShortAsset\")\n};\nreturn msg;\n\n\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 580,
        "y": 860,
        "wires": [
            []
        ]
    },
    {
        "id": "626480d8756b8b67",
        "type": "inject",
        "z": "3fc007a97f3fcca5",
        "name": "1s",
        "props": [],
        "repeat": "1",
        "crontab": "",
        "once": true,
        "onceDelay": "1",
        "topic": "",
        "x": 430,
        "y": 900,
        "wires": [
            [
                "7119acd076342bc7"
            ]
        ]
    },
    {
        "id": "7119acd076342bc7",
        "type": "function",
        "z": "3fc007a97f3fcca5",
        "name": "Gera Variáveis",
        "func": "msg.payload = {\n    a000000001: global.get(\"registry.sensor.aas.idShortAsset\"),\n    a000000002: global.get(\"registry.controller.aas.idShortAsset\"),\n    a000000003: global.get(\"registry.actuator.aas.idShortAsset\")\n};\nreturn msg;\n\n\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 580,
        "y": 900,
        "wires": [
            []
        ]
    },
    {
        "id": "inject1",
        "type": "inject",
        "z": "3fc007a97f3fcca5",
        "name": "1s",
        "props": [],
        "repeat": "1",
        "crontab": "",
        "once": true,
        "onceDelay": "1",
        "topic": "",
        "x": 330,
        "y": 960,
        "wires": [
            [
                "function1"
            ]
        ]
    },
    {
        "id": "function1",
        "type": "function",
        "z": "3fc007a97f3fcca5",
        "name": "Gera Variáveis",
        "func": "msg.payload = {\n    a000000001: global.get(\"registry.sensor.aas.idShortAsset\"),\n    a000000002: global.get(\"registry.controller.aas.idShortAsset\"),\n    a000000003: global.get(\"registry.actuator.aas.idShortAsset\")\n};\nreturn msg;\n\n\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 480,
        "y": 960,
        "wires": [
            [
                "template1"
            ]
        ]
    },
    {
        "id": "template1",
        "type": "ui_template",
        "z": "3fc007a97f3fcca5",
        "group": "",
        "name": "Applications",
        "order": 1,
        "width": 0,
        "height": 0,
        "format": "<div>\n  <p>Valor do payload: <b>{{msg.payload}}</b></p>\n</div>\n\n<div>\n  <label>\n    <input type=\"radio\" name=\"imageOption\" value=\"opt1\" onclick=\"displaySVG('1')\">\n    🔵 Option 1\n  </label><br>\n\n  <label>\n    <input type=\"radio\" name=\"imageOption\" value=\"opt2\" onclick=\"displaySVG('2')\">\n    🟢 Option 2\n  </label><br>\n\n  <label>\n    <input type=\"radio\" name=\"imageOption\" value=\"opt3\" onclick=\"displaySVG('3')\">\n    🟡 Option 3\n  </label><br>\n\n  <label>\n    <input type=\"radio\" name=\"imageOption\" value=\"opt4\" onclick=\"displaySVG('4')\">\n    🔴 Option 4\n  </label><br>\n</div>\n\n<div id=\"svgDisplay\"\n  style=\"width: 100%; height: 400px; border: 1px dashed #ccc; display: flex; align-items: center; justify-content: center;\">\n  <span style=\"color: #999;\">Image area placeholder</span>\n</div>\n\n<script>\n  function displaySVG(option) {\n    const svgDisplay = document.getElementById(\"svgDisplay\");\n    const randomNumber = Math.floor(Math.random() * 11); // Número aleatório entre 0 e 10\n    const currentPayload = 0;     // Variável global onde guardamos o payload recebido\n\n    const svgImages = {\n      // \"1\": `<svg width=\"480\" height=\"270\" viewBox=\"0 0 480 270\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" overflow=\"hidden\"><g><rect x=\"0\" y=\"0\" width=\"480\" height=\"270\" fill=\"#FFFFFF\"/><rect x=\"0\" y=\"0\" width=\"480\" height=\"270\" stroke=\"#000000\" stroke-width=\"2\" stroke-miterlimit=\"8\" fill=\"#FFFFFF\"/><path d=\"M0.0113616-0.999935 22.6818-0.742346 22.6591 1.25752-0.0113616 0.999935ZM21.3827-3.7573 29.3367 0.333333 21.2918 4.24218Z\" transform=\"matrix(1 0 0 -1 153 121.333)\"/><path d=\"M3.57869e-06-1 22.67-0.999919 22.67 1.00008-3.57869e-06 1ZM21.3367-3.99992 29.3367 0.000104987 21.3367 4.00008Z\" transform=\"matrix(1 0 0 -1 298 121)\"/><rect x=\"38\" y=\"107\" width=\"115\" height=\"28\" stroke=\"#000000\" stroke-width=\"2\" stroke-miterlimit=\"8\" fill=\"#FFFFFF\"/><text font-family=\"Arial,Arial_MSFontService,sans-serif\" font-weight=\"400\" font-size=\"16\" transform=\"translate(51.2966 128)\">0000000001</text><rect x=\"182\" y=\"107\" width=\"116\" height=\"28\" stroke=\"#000000\" stroke-width=\"2\" stroke-miterlimit=\"8\" fill=\"#FFFFFF\"/><text font-family=\"Arial,Arial_MSFontService,sans-serif\" font-weight=\"400\" font-size=\"16\" transform=\"translate(195.833 127)\">0000000002</text><rect x=\"327\" y=\"107\" width=\"115\" height=\"28\" stroke=\"#000000\" stroke-width=\"2\" stroke-miterlimit=\"8\" fill=\"#FFFFFF\"/><text font-family=\"Arial,Arial_MSFontService,sans-serif\" font-weight=\"400\" font-size=\"16\" transform=\"translate(340.37 127)\">0000000003</text><path d=\"M385.073 135 385.073 204.932 94 204.932 94 142 96 142 96 203.932 95 202.932 384.073 202.932 383.073 203.932 383.073 135ZM91 143.333 95 135.333 99 143.333Z\"/></g></svg>`,\n      \"1\": `<svg width=\"480\" height=\"270\" viewBox=\"0 0 480 270\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" overflow=\"hidden\">\n        <g>\n          <rect x=\"0\" y=\"0\" width=\"480\" height=\"270\" fill=\"#FFFFFF\"/>\n          <rect x=\"0\" y=\"0\" width=\"480\" height=\"270\" stroke=\"#000000\" stroke-width=\"2\" stroke-miterlimit=\"8\" fill=\"#FFFFFF\"/>\n          <path d=\"M0.0113616-0.999935 22.6818-0.742346 22.6591 1.25752-0.0113616 0.999935ZM21.3827-3.7573 29.3367 0.333333 21.2918 4.24218Z\" transform=\"matrix(1 0 0 -1 153 121.333)\"/>\n          <path d=\"M3.57869e-06-1 22.67-0.999919 22.67 1.00008-3.57869e-06 1ZM21.3367-3.99992 29.3367 0.000104987 21.3367 4.00008Z\" transform=\"matrix(1 0 0 -1 298 121)\"/>\n          <rect x=\"38\" y=\"107\" width=\"115\" height=\"28\" stroke=\"#000000\" stroke-width=\"2\" stroke-miterlimit=\"8\" fill=\"#FFFFFF\"/>\n          <text font-family=\"Arial,Arial_MSFontService,sans-serif\" font-weight=\"400\" font-size=\"16\" transform=\"translate(51.2966 128)\">${randomNumber}</text>\n          <rect x=\"182\" y=\"107\" width=\"116\" height=\"28\" stroke=\"#000000\" stroke-width=\"2\" stroke-miterlimit=\"8\" fill=\"#FFFFFF\"/>\n          <text font-family=\"Arial,Arial_MSFontService,sans-serif\" font-weight=\"400\" font-size=\"16\" transform=\"translate(195.833 127)\">0000000002</text>\n          <rect x=\"327\" y=\"107\" width=\"115\" height=\"28\" stroke=\"#000000\" stroke-width=\"2\" stroke-miterlimit=\"8\" fill=\"#FFFFFF\"/>\n          <text font-family=\"Arial,Arial_MSFontService,sans-serif\" font-weight=\"400\" font-size=\"16\" transform=\"translate(340.37 127)\">0000000003</text>\n          <path d=\"M385.073 135 385.073 204.932 94 204.932 94 142 96 142 96 203.932 95 202.932 384.073 202.932 383.073 203.932 383.073 135ZM91 143.333 95 135.333 99 143.333Z\"/>\n        </g>\n      </svg>\n      `,      \n      \"2\": `<svg width=\"100\" height=\"100\" xmlns=\"http://www.w3.org/2000/svg\">\n              <circle cx=\"50\" cy=\"50\" r=\"50\" fill=\"green\" />\n              <text x=\"50%\" y=\"55%\" dominant-baseline=\"middle\" text-anchor=\"middle\" font-size=\"20\" fill=\"white\">\n                ${randomNumber}\n              </text>\n            </svg>`,\n      \"3\": `<svg width=\"100\" height=\"100\">\n              <polygon points=\"50,0 0,100 100,100\" fill=\"orange\" />\n            </svg>`,\n      \"4\": `<svg width=\"480\" height=\"270\" viewBox=\"0 0 480 270\" xmlns=\"http://www.w3.org/2000/svg\">\n            <g><rect x=\"0\" y=\"0\" width=\"480\" height=\"270\" fill=\"#FFAAAA\"/>\n            <text font-family=\"Arial\" font-size=\"20\" x=\"40\" y=\"140\">Option 4: ${currentPayload}</text></g>\n            </svg>`\n    };\n\n    svgDisplay.innerHTML = svgImages[option] || '<span style=\"color: #999;\">Image area placeholder</span>';\n  }\n\n  // Observa quando um msg novo chega no nó\n  (function(scope) {\n    scope.$watch('msg', function(msg) {\n      if (msg && msg.payload !== undefined) {\n        currentPayload = msg.payload;  // Salva o valor para usar nas funções\n      }\n    });\n  })(scope);\n</script>",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": true,
        "templateScope": "local",
        "className": "",
        "x": 690,
        "y": 960,
        "wires": [
            []
        ]
    },
    {
        "id": "74576263a29c61e9",
        "type": "inject",
        "z": "3fc007a97f3fcca5",
        "name": "Trigger",
        "props": [],
        "repeat": "1",
        "crontab": "",
        "once": true,
        "onceDelay": "0.5",
        "topic": "",
        "x": 320,
        "y": 1000,
        "wires": [
            [
                "5401ba48c6f9da50"
            ]
        ]
    },
    {
        "id": "5401ba48c6f9da50",
        "type": "function",
        "z": "3fc007a97f3fcca5",
        "name": "Gera valores randômicos",
        "func": "msg.payload = {\n  op1: Math.floor(Math.random() * 100),\n  op2: 11 + Math.floor(Math.random() * 10),\n  op3: Math.floor(Math.random() * 50),\n  op4: Math.floor(Math.random() * 75),\n  op5: Math.floor(Math.random() * 30),\n  op6: Math.floor(Math.random() * 20),\n  op7: Math.floor(Math.random() * 99),\n  op8: Math.floor(Math.random() * 80),\n  op9: Math.floor(Math.random() * 60),\n  op10: Math.floor(Math.random() * 40),\n  sensor: global.get(\"registry.sensor.aas.idShortAsset\"),\n  controller: global.get(\"registry.controller.aas.idShortAsset\"),\n  actuator: global.get(\"registry.actuator.aas.idShortAsset\")\n};\n\n\nreturn msg;\n\n\n\n\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 540,
        "y": 1000,
        "wires": [
            []
        ]
    },
    {
        "id": "641bb0623f281ed0",
        "type": "function",
        "z": "3fc007a97f3fcca5",
        "name": "Read (registry)",
        "func": "// Obter o objeto registry do escopo global\nvar registry = global.get(\"registry\") || {};\n\nmsg.action = `${registry.sensor.service.name}.${registry.sensor.service.action}`\n\n// msg.payload = {\n//     idShortAsset: registry.sensor.aas.idShortAsset || '',\n//     idShortSubmodel: registry.sensor.aas.idShortSubmodel || '',\n//     idShortSubmodelElement: registry.sensor.aas.idShortSubmodelElement || '',\n//     format: registry.sensor.aas.format || ''\n// };\n\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 420,
        "y": 1160,
        "wires": [
            [
                "bd2a889ef6af5fef"
            ]
        ]
    },
    {
        "id": "bd2a889ef6af5fef",
        "type": "moleculer-call",
        "z": "3fc007a97f3fcca5",
        "broker": "15fdc347.1238cd",
        "name": "",
        "topic": "",
        "options": "{}",
        "x": 570,
        "y": 1160,
        "wires": [
            []
        ]
    },
    {
        "id": "ab2df149c5cf3e66",
        "type": "function",
        "z": "3fc007a97f3fcca5",
        "name": "Read (registry)",
        "func": "// Obter o objeto registry do escopo global\nvar registry = global.get(\"registry\") || {};\n\nmsg.action = `${registry.controller.service.name}.${registry.controller.service.action}`\n\n// msg.payload = {\n//     idShortAsset: registry.controller.aas.idShortAsset || '',\n//     idShortSubmodel: registry.controller.aas.idShortSubmodel || '',\n//     idShortSubmodelElement: registry.controller.aas.idShortSubmodelElement || '',\n//     format: registry.controller.aas.format || ''\n// };\n\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 420,
        "y": 1200,
        "wires": [
            [
                "f50ce91cc3e28873"
            ]
        ]
    },
    {
        "id": "f50ce91cc3e28873",
        "type": "moleculer-call",
        "z": "3fc007a97f3fcca5",
        "broker": "15fdc347.1238cd",
        "name": "",
        "topic": "",
        "options": "{}",
        "x": 570,
        "y": 1200,
        "wires": [
            []
        ]
    },
    {
        "id": "893f65a534b0a4ce",
        "type": "function",
        "z": "3fc007a97f3fcca5",
        "name": "Read (registry)",
        "func": "// Obter o objeto registry do escopo global\nvar registry = global.get(\"registry\") || {};\n\nmsg.action = `${registry.actuator.service.name}.${registry.actuator.service.action}`\n\n// msg.payload = {\n//     idShortAsset: registry.actuator.aas.idShortAsset || '',\n//     idShortSubmodel: registry.actuator.aas.idShortSubmodel || '',\n//     idShortSubmodelElement: registry.actuator.aas.idShortSubmodelElement || '',\n//     format: registry.actuator.aas.format || ''\n// };\n\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 420,
        "y": 1240,
        "wires": [
            [
                "50a62718df0f46b2"
            ]
        ]
    },
    {
        "id": "50a62718df0f46b2",
        "type": "moleculer-call",
        "z": "3fc007a97f3fcca5",
        "broker": "15fdc347.1238cd",
        "name": "",
        "topic": "",
        "options": "{}",
        "x": 570,
        "y": 1240,
        "wires": [
            []
        ]
    },
    {
        "id": "22a43b2920bd1767",
        "type": "inject",
        "z": "3fc007a97f3fcca5",
        "d": true,
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "20",
        "crontab": "",
        "once": true,
        "onceDelay": "5",
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 210,
        "y": 1200,
        "wires": [
            [
                "641bb0623f281ed0",
                "ab2df149c5cf3e66",
                "893f65a534b0a4ce"
            ]
        ]
    },
    {
        "id": "e3371b0db3e9d3b0",
        "type": "inject",
        "z": "3fc007a97f3fcca5",
        "name": "Iniciar",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 70,
        "y": 1560,
        "wires": [
            [
                "d6655b72b725ea26"
            ]
        ]
    },
    {
        "id": "d6655b72b725ea26",
        "type": "function",
        "z": "3fc007a97f3fcca5",
        "name": "Simula Moleculer Call",
        "func": "// Simula resposta com chance de repetição\nlet ult = flow.get(\"ultimaSimulada\") || \"respostaA\";\nlet probabilidadeRepetir = 0.7; // 70% de chance de repetir a anterior\n\nlet nova;\n\nif (Math.random() < probabilidadeRepetir) {\n    nova = ult;\n} else {\n    nova = ult === \"respostaA\" ? \"respostaB\" : \"respostaA\";\n}\n\nflow.set(\"ultimaSimulada\", nova);\nmsg.payload = nova;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 280,
        "y": 1560,
        "wires": [
            [
                "d28833bc73dd9fa0"
            ]
        ]
    },
    {
        "id": "d28833bc73dd9fa0",
        "type": "function",
        "z": "3fc007a97f3fcca5",
        "name": "Comparar com anterior",
        "func": "let ultimaResposta = flow.get(\"ultimaResposta\") || null;\nlet respostaAtual = msg.payload;\n\nmsg.igual = respostaAtual === ultimaResposta;\n\nif (!msg.igual) {\n    flow.set(\"ultimaResposta\", respostaAtual);\n    flow.set(\"tentativas\", 0); // reseta contador\n} else {\n    let tentativas = flow.get(\"tentativas\") || 0;\n    tentativas++;\n    flow.set(\"tentativas\", tentativas);\n    msg.tentativas = tentativas;\n    msg.parar = tentativas >= 5;\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 530,
        "y": 1560,
        "wires": [
            [
                "fe6b5ae819c490b2"
            ]
        ]
    },
    {
        "id": "fe6b5ae819c490b2",
        "type": "switch",
        "z": "3fc007a97f3fcca5",
        "name": "Resposta igual?",
        "property": "igual",
        "propertyType": "msg",
        "rules": [
            {
                "t": "false"
            },
            {
                "t": "true"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 740,
        "y": 1560,
        "wires": [
            [
                "0ca03d3f3b8acb9d"
            ],
            [
                "17c133c8b0c43e50"
            ]
        ]
    },
    {
        "id": "0ca03d3f3b8acb9d",
        "type": "debug",
        "z": "3fc007a97f3fcca5",
        "name": "Diferente: prossegue",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "x": 990,
        "y": 1540,
        "wires": []
    },
    {
        "id": "17c133c8b0c43e50",
        "type": "switch",
        "z": "3fc007a97f3fcca5",
        "name": "Parar por repetição?",
        "property": "parar",
        "propertyType": "msg",
        "rules": [
            {
                "t": "false"
            },
            {
                "t": "true"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 970,
        "y": 1660,
        "wires": [
            [
                "d6655b72b725ea26"
            ],
            [
                "98d1617188dbfaca"
            ]
        ]
    },
    {
        "id": "98d1617188dbfaca",
        "type": "debug",
        "z": "3fc007a97f3fcca5",
        "name": "Parou após 5 tentativas",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "x": 990,
        "y": 1840,
        "wires": []
    },
    {
        "id": "b4c8f79e9b3e4d08",
        "type": "inject",
        "z": "3fc007a97f3fcca5",
        "name": "Gerar Senoide",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payloadType": "date",
        "x": 320,
        "y": 1960,
        "wires": [
            [
                "70c3d647b6c0f5a3"
            ]
        ]
    },
    {
        "id": "70c3d647b6c0f5a3",
        "type": "function",
        "z": "3fc007a97f3fcca5",
        "name": "Gerar Dados Senoide",
        "func": "let data = [];\nlet step = Math.PI / 10;\nfor (let x = -2 * Math.PI; x <= 2 * Math.PI; x += step) {\n    data.push({ x: x.toFixed(2), y: Math.sin(x).toFixed(4) });\n}\n\nlet senoide = {\n    series: [\"Senoide\"],\n    data: [data],\n    labels: []\n};\n\nglobal.set(\"senoide\", senoide);\n\nmsg.payload = senoide;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 520,
        "y": 1960,
        "wires": [
            [
                "58a1f86b65784fbe",
                "df37d28243c56b17",
                "chart_node"
            ]
        ]
    },
    {
        "id": "58a1f86b65784fbe",
        "type": "debug",
        "z": "3fc007a97f3fcca5",
        "name": "Exibir JSON",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "x": 720,
        "y": 1920,
        "wires": []
    },
    {
        "id": "df37d28243c56b17",
        "type": "function",
        "z": "3fc007a97f3fcca5",
        "name": "Converter para TXT",
        "func": "let data = global.get(\"senoide\");\nif (!data) {\n    msg.payload = \"Erro: Nenhum dado encontrado\";\n    return msg;\n}\n\nlet txtData = data.data[0].map(point => `${point.x} ${point.y}`).join(\"\\n\");\n\nmsg.payload = txtData;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 520,
        "y": 2020,
        "wires": [
            [
                "b9c6f8e59e6c468d"
            ]
        ]
    },
    {
        "id": "b9c6f8e59e6c468d",
        "type": "file",
        "z": "3fc007a97f3fcca5",
        "name": "Salvar em dados.txt",
        "filename": "/home/pi/dados.txt",
        "appendNewline": false,
        "createDir": true,
        "overwriteFile": "true",
        "encoding": "utf8",
        "x": 750,
        "y": 2020,
        "wires": [
            []
        ]
    },
    {
        "id": "97e27a9144323e98",
        "type": "http in",
        "z": "3fc007a97f3fcca5",
        "name": "API Senoide",
        "url": "/senoide",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 320,
        "y": 2080,
        "wires": [
            [
                "529f34a3b6704939"
            ]
        ]
    },
    {
        "id": "529f34a3b6704939",
        "type": "function",
        "z": "3fc007a97f3fcca5",
        "name": "Buscar Global",
        "func": "let data = global.get(\"senoide\");\nif (!data) {\n    msg.payload = { error: \"Nenhum dado disponível\" };\n} else {\n    msg.payload = data;\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 520,
        "y": 2080,
        "wires": [
            [
                "e6cb3aee9b8e4a42"
            ]
        ]
    },
    {
        "id": "e6cb3aee9b8e4a42",
        "type": "http response",
        "z": "3fc007a97f3fcca5",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 720,
        "y": 2080,
        "wires": []
    },
    {
        "id": "chart_node",
        "type": "ui_chart",
        "z": "3fc007a97f3fcca5",
        "name": "Gráfico Senoide",
        "group": "",
        "order": 9,
        "width": 0,
        "height": 0,
        "label": "Senoide",
        "chartType": "line",
        "legend": "true",
        "xformat": "auto",
        "interpolate": "linear",
        "nodata": "Sem Dados",
        "dot": false,
        "ymin": "-1",
        "ymax": "1",
        "removeOlder": 0,
        "removeOlderPoints": "",
        "removeOlderUnit": "3600",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#ff0000",
            "#000000",
            "#000000",
            "#000000",
            "#000000",
            "#000000",
            "#000000",
            "#000000",
            "#000000"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "className": "",
        "x": 780,
        "y": 1960,
        "wires": [
            []
        ]
    },
    {
        "id": "8cbfc091d6a503ea",
        "type": "http in",
        "z": "3fc007a97f3fcca5",
        "name": "",
        "url": "/data",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 240,
        "y": 2460,
        "wires": [
            [
                "ca1a2ee85f86991b"
            ]
        ]
    },
    {
        "id": "19fc48a1c08453e5",
        "type": "http response",
        "z": "3fc007a97f3fcca5",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 710,
        "y": 2460,
        "wires": []
    },
    {
        "id": "ca1a2ee85f86991b",
        "type": "change",
        "z": "3fc007a97f3fcca5",
        "name": "Get the chart data from flow.chart-data",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "chart-data",
                "tot": "flow"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 480,
        "y": 2460,
        "wires": [
            [
                "19fc48a1c08453e5"
            ]
        ]
    },
    {
        "id": "28a4cf33fd1367b9",
        "type": "inject",
        "z": "3fc007a97f3fcca5",
        "name": "",
        "props": [],
        "repeat": "1",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 250,
        "y": 2220,
        "wires": [
            [
                "4e458dafb525d389"
            ]
        ]
    },
    {
        "id": "7e656409cae275aa",
        "type": "ui_chart",
        "z": "3fc007a97f3fcca5",
        "name": "",
        "group": "af1535b39b74f94a",
        "order": 1,
        "width": 0,
        "height": 0,
        "label": "chart",
        "chartType": "line",
        "legend": "false",
        "xformat": "HH:mm:ss",
        "interpolate": "linear",
        "nodata": "",
        "dot": false,
        "ymin": "",
        "ymax": "",
        "removeOlder": 1,
        "removeOlderPoints": "",
        "removeOlderUnit": "3600",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "className": "",
        "x": 570,
        "y": 2220,
        "wires": [
            [
                "cb430ff58d0e8f31",
                "219cfc11356a562a"
            ]
        ]
    },
    {
        "id": "cb430ff58d0e8f31",
        "type": "debug",
        "z": "3fc007a97f3fcca5",
        "name": "debug",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 750,
        "y": 2220,
        "wires": []
    },
    {
        "id": "219cfc11356a562a",
        "type": "change",
        "z": "3fc007a97f3fcca5",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "#:(persistent)::chart-data",
                "pt": "global",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 800,
        "y": 2260,
        "wires": [
            [
                "9246c6571b9f2da9"
            ]
        ]
    },
    {
        "id": "9246c6571b9f2da9",
        "type": "debug",
        "z": "3fc007a97f3fcca5",
        "name": "debug 56",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1000,
        "y": 2260,
        "wires": []
    },
    {
        "id": "e9747e1f43c58d0e",
        "type": "inject",
        "z": "3fc007a97f3fcca5",
        "name": "import data",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "x": 230,
        "y": 2380,
        "wires": [
            [
                "cfebebfe331f1ea4"
            ]
        ]
    },
    {
        "id": "cfebebfe331f1ea4",
        "type": "change",
        "z": "3fc007a97f3fcca5",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "#:(persistent)::chart-data",
                "tot": "global"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 400,
        "y": 2380,
        "wires": [
            [
                "7e656409cae275aa",
                "13e09fc66e90db83"
            ]
        ]
    },
    {
        "id": "13e09fc66e90db83",
        "type": "debug",
        "z": "3fc007a97f3fcca5",
        "name": "debug 57",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 560,
        "y": 2380,
        "wires": []
    },
    {
        "id": "4e458dafb525d389",
        "type": "random",
        "z": "3fc007a97f3fcca5",
        "name": "",
        "low": 1,
        "high": 10,
        "inte": "true",
        "property": "payload",
        "x": 400,
        "y": 2220,
        "wires": [
            [
                "7e656409cae275aa"
            ]
        ]
    },
    {
        "id": "ff1e53b220bfbbe1",
        "type": "ui_template",
        "z": "3fc007a97f3fcca5",
        "group": "",
        "name": "download data url",
        "order": 2,
        "width": 0,
        "height": 0,
        "format": "<div style='padding:10px; text-align:center'>\n    <button\n    class='btn'\n    style='background-color:#337ab7; color:white; padding:10px 20px; border-radius:5px; border:none; cursor:pointer;'\n    onclick='exportarDados()'>\n    📥 Exportar Dados\n  </button>\n</div>\n\n<script>\n    function exportarDados() {\n    window.open('/data', '_blank');\n}\n</script>",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": true,
        "templateScope": "local",
        "className": "",
        "x": 890,
        "y": 2460,
        "wires": [
            []
        ]
    },
    {
        "id": "470a8a27d123f092",
        "type": "inject",
        "z": "3fc007a97f3fcca5",
        "name": "1s",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "1",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 150,
        "y": 2600,
        "wires": [
            [
                "1dc014344280c58e"
            ]
        ]
    },
    {
        "id": "1dc014344280c58e",
        "type": "function",
        "z": "3fc007a97f3fcca5",
        "name": "Sensor",
        "func": "var registry = global.get(\"registry\") || {};\n\nmsg.action = `${registry.sensor.service.name}.${registry.sensor.service.action}`\n\nmsg.payload = {\n    \"idShortSubmodel\": registry.sensor.aas.idShortSubmodel,\n    \"idShortSubmodelElement\": registry.sensor.aas.idShortSubmodelElement,\n    \"format\": registry.sensor.aas.format\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 360,
        "y": 2660,
        "wires": [
            [
                "101eebb1433bced0"
            ]
        ]
    },
    {
        "id": "101eebb1433bced0",
        "type": "moleculer-call",
        "z": "3fc007a97f3fcca5",
        "broker": "15fdc347.1238cd",
        "name": "Chamada Moleculer",
        "topic": "",
        "options": "{}",
        "x": 580,
        "y": 2660,
        "wires": [
            [
                "1c366a41efa07e0a"
            ]
        ]
    },
    {
        "id": "1c366a41efa07e0a",
        "type": "function",
        "z": "3fc007a97f3fcca5",
        "name": "Comparar com anterior",
        "func": "let respostaAtual = msg.payload;\nlet ultimaResposta = flow.get(\"ultimaResposta\") || null;\n\nmsg.igual = respostaAtual === ultimaResposta;\n\nif (!msg.igual) {\n    flow.set(\"ultimaResposta\", respostaAtual);\n    flow.set(\"tentativas\", 0);\n} else {\n    let tentativas = flow.get(\"tentativas\") || 0;\n    tentativas++;\n    flow.set(\"tentativas\", tentativas);\n    msg.tentativas = tentativas;\n    msg.parar = tentativas >= 5;\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 830,
        "y": 2660,
        "wires": [
            [
                "372d774b9b319e87"
            ]
        ]
    },
    {
        "id": "372d774b9b319e87",
        "type": "switch",
        "z": "3fc007a97f3fcca5",
        "name": "Resposta igual?",
        "property": "igual",
        "propertyType": "msg",
        "rules": [
            {
                "t": "false"
            },
            {
                "t": "true"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 1060,
        "y": 2660,
        "wires": [
            [
                "585322d6b4b6b8ad"
            ],
            [
                "281f43bd9afde671"
            ]
        ]
    },
    {
        "id": "585322d6b4b6b8ad",
        "type": "debug",
        "z": "3fc007a97f3fcca5",
        "name": "Nova resposta (diferente)",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "x": 1330,
        "y": 2640,
        "wires": []
    },
    {
        "id": "281f43bd9afde671",
        "type": "switch",
        "z": "3fc007a97f3fcca5",
        "name": "Parar por repetição?",
        "property": "parar",
        "propertyType": "msg",
        "rules": [
            {
                "t": "false"
            },
            {
                "t": "true"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 1160,
        "y": 2840,
        "wires": [
            [
                "1dc014344280c58e"
            ],
            [
                "fab09571f69f3993"
            ]
        ]
    },
    {
        "id": "fab09571f69f3993",
        "type": "debug",
        "z": "3fc007a97f3fcca5",
        "name": "Parou após 5 iguais",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "x": 1420,
        "y": 2840,
        "wires": []
    },
    {
        "id": "0f71b559c4bbe167",
        "type": "comment",
        "z": "3fc007a97f3fcca5",
        "g": "03d487ff23807778",
        "name": "",
        "info": "Notebook dell precision 15 polegadas.\n1920*1080 pixels ferramenta sniping tools Printscreen tela toda zoom 100%?\nJogo no inkspace 16cm x 18cm maximo A4 fica bom, tem 604.724px por 680.315px\nvejo o tamanho fonte 10pt top com 100% bate certinho.\n\n\n30 quadrados de 20px na horizontal dão 16cm com zoom 100% na tela 15.6 polegadas proporção 16x9 full hd\n17 quadrados 9cm",
        "x": 760,
        "y": 3000,
        "wires": []
    },
    {
        "id": "02dc4e54f6993c76",
        "type": "comment",
        "z": "3fc007a97f3fcca5",
        "g": "03d487ff23807778",
        "name": "",
        "info": "Notebook dell precision 15 polegadas.\n1920*1080 pixels ferramenta sniping tools Printscreen tela toda zoom 100%?\nJogo no inkspace 16cm x 18cm maximo A4 fica bom, tem 604.724px por 680.315px\nvejo o tamanho fonte 10pt top com 100% bate certinho.\n\n\n30 quadrados de 20px na horizontal dão 16cm com zoom 100% na tela 15.6 polegadas proporção 16x9 full hd\n17 quadrados 9cm",
        "x": 1300,
        "y": 3300,
        "wires": []
    },
    {
        "id": "e87312a503fcdbb0",
        "type": "link in",
        "z": "3fc007a97f3fcca5",
        "g": "03d487ff23807778",
        "name": "link in 91",
        "links": [],
        "x": 725,
        "y": 3040,
        "wires": [
            [
                "79acf0b0975f5aa5"
            ]
        ]
    },
    {
        "id": "2329ea38719165a2",
        "type": "link out",
        "z": "3fc007a97f3fcca5",
        "g": "03d487ff23807778",
        "name": "link out 58",
        "mode": "link",
        "links": [],
        "x": 1345,
        "y": 3040,
        "wires": []
    },
    {
        "id": "79acf0b0975f5aa5",
        "type": "function",
        "z": "3fc007a97f3fcca5",
        "g": "03d487ff23807778",
        "name": "function 23",
        "func": "\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 840,
        "y": 3040,
        "wires": [
            [
                "96d767c0497113b3"
            ]
        ]
    },
    {
        "id": "96d767c0497113b3",
        "type": "function",
        "z": "3fc007a97f3fcca5",
        "g": "03d487ff23807778",
        "name": "function 24",
        "func": "\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1020,
        "y": 3040,
        "wires": [
            [
                "62d5a95316920c1c"
            ]
        ]
    },
    {
        "id": "62d5a95316920c1c",
        "type": "function",
        "z": "3fc007a97f3fcca5",
        "g": "03d487ff23807778",
        "name": "function 25",
        "func": "\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1210,
        "y": 3040,
        "wires": [
            [
                "2329ea38719165a2"
            ]
        ]
    },
    {
        "id": "8b1f5c01f463f42e",
        "type": "link in",
        "z": "3fc007a97f3fcca5",
        "g": "03d487ff23807778",
        "name": "link in 92",
        "links": [],
        "x": 725,
        "y": 3100,
        "wires": [
            [
                "bf0bd81e5e91d215"
            ]
        ]
    },
    {
        "id": "75a4444f45026543",
        "type": "link out",
        "z": "3fc007a97f3fcca5",
        "g": "03d487ff23807778",
        "name": "link out 59",
        "mode": "link",
        "links": [],
        "x": 1345,
        "y": 3100,
        "wires": []
    },
    {
        "id": "bf0bd81e5e91d215",
        "type": "function",
        "z": "3fc007a97f3fcca5",
        "g": "03d487ff23807778",
        "name": "function 26",
        "func": "\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 850,
        "y": 3100,
        "wires": [
            [
                "474ce7092e2a0dfa"
            ]
        ]
    },
    {
        "id": "474ce7092e2a0dfa",
        "type": "function",
        "z": "3fc007a97f3fcca5",
        "g": "03d487ff23807778",
        "name": "function 27",
        "func": "\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1030,
        "y": 3100,
        "wires": [
            [
                "54b25f0ba97eb452"
            ]
        ]
    },
    {
        "id": "54b25f0ba97eb452",
        "type": "function",
        "z": "3fc007a97f3fcca5",
        "g": "03d487ff23807778",
        "name": "function 28",
        "func": "\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1210,
        "y": 3100,
        "wires": [
            [
                "75a4444f45026543"
            ]
        ]
    },
    {
        "id": "6f7a414b750ee12d",
        "type": "comment",
        "z": "3fc007a97f3fcca5",
        "g": "59c3f6879f482090",
        "name": "",
        "info": "Notebook dell precision 15 polegadas.\n1920*1080 pixels ferramenta sniping tools Printscreen tela toda zoom 100%?\nJogo no inkspace 16cm x 18cm maximo A4 fica bom, tem 604.724px por 680.315px\nvejo o tamanho fonte 10pt top com 100% bate certinho.\n\n\n30 quadrados de 20px na horizontal dão 16cm com zoom 100% na tela 15.6 polegadas proporção 16x9 full hd\n17 quadrados 9cm",
        "x": 760,
        "y": 3420,
        "wires": []
    },
    {
        "id": "e868ced2c90d5fab",
        "type": "comment",
        "z": "3fc007a97f3fcca5",
        "g": "59c3f6879f482090",
        "name": "",
        "info": "Notebook dell precision 15 polegadas.\n1920*1080 pixels ferramenta sniping tools Printscreen tela toda zoom 100%?\nJogo no inkspace 16cm x 18cm maximo A4 fica bom, tem 604.724px por 680.315px\nvejo o tamanho fonte 10pt top com 100% bate certinho.\n\n\n30 quadrados de 20px na horizontal dão 16cm com zoom 100% na tela 15.6 polegadas proporção 16x9 full hd\n17 quadrados 9cm",
        "x": 1300,
        "y": 4240,
        "wires": []
    },
    {
        "id": "f10b3479d306fd44",
        "type": "link in",
        "z": "3fc007a97f3fcca5",
        "g": "59c3f6879f482090",
        "name": "link in 93",
        "links": [],
        "x": 715,
        "y": 3460,
        "wires": [
            [
                "79108cf15e156ff2"
            ]
        ]
    },
    {
        "id": "375d3070fdc2edd1",
        "type": "link out",
        "z": "3fc007a97f3fcca5",
        "g": "59c3f6879f482090",
        "name": "link out 60",
        "mode": "link",
        "links": [],
        "x": 1335,
        "y": 3460,
        "wires": []
    },
    {
        "id": "79108cf15e156ff2",
        "type": "function",
        "z": "3fc007a97f3fcca5",
        "g": "59c3f6879f482090",
        "name": "function 29",
        "func": "\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 830,
        "y": 3460,
        "wires": [
            [
                "682d1f5939b6860d"
            ]
        ]
    },
    {
        "id": "682d1f5939b6860d",
        "type": "function",
        "z": "3fc007a97f3fcca5",
        "g": "59c3f6879f482090",
        "name": "function 30",
        "func": "\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1030,
        "y": 3460,
        "wires": [
            [
                "575d81aa570bee6f"
            ]
        ]
    },
    {
        "id": "575d81aa570bee6f",
        "type": "function",
        "z": "3fc007a97f3fcca5",
        "g": "59c3f6879f482090",
        "name": "function 31",
        "func": "\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1230,
        "y": 3460,
        "wires": [
            [
                "375d3070fdc2edd1"
            ]
        ]
    },
    {
        "id": "f7f2cec6556e80bd",
        "type": "function",
        "z": "3fc007a97f3fcca5",
        "name": "Create registry",
        "func": "var registry = {\n  application: {\n    model: \"Tesla Model S\",\n    year: 2023,\n    version: 1,\n    configurations: {\n      color: \"Red\",\n    },\n  },\n  functionGenerator: {\n    wave: {\n      type: null,   // Wave type (e.g., sine, square, triangular, etc.)\n      crest: 0,   // Maximum wave value\n      trough: 0,  // Minimum wave value\n    },\n    constant: {\n      value: 0    // Constant value if the generator output is fixed\n    }\n  },\n  sensor: {\n    service: {\n      name: null, // This will be dynamically set below\n      action: \"aas\" // Moleculer call service.action > idShortAsset.aas Example: greeter.hello\n    },\n    aas: {\n      idShortAsset: null,\n      idShortSubmodel: null,\n      idShortSubmodelElement: null,\n      format: null,\n      value: null\n    },\n    state: {\n      speed: 0,\n      temperature: 25,\n      level: 100\n    },\n    metadata: {\n      units: {\n        speed: \"km/h\",\n        temperature: \"°C\",\n        level: \"%\"\n      },\n      minValues: {\n        speed: 0,\n        temperature: -40,\n        level: 0\n      },\n      maxValues: {\n        speed: 250,\n        temperature: 100,\n        level: 100\n      }\n    }\n  },\n  controller: {\n    service: {\n      name: null, // This will be dynamically set below\n      action: \"aas\" // Moleculer call service.action > idShortAsset.aas Example: greeter.hello\n    },\n    aas: {\n      idShortAsset: null,\n      idShortSubmodel: null,\n      idShortSubmodelElement: null,\n      format: null,\n      value: {\n        ti: 0,\n        td: 0,\n        kp: 0,\n        pv: 0,\n        setpoint: 0,\n        error: 0,\n        integrative: 0,\n        manipulatedVariable: 0,\n        time: 0\n      }\n    }\n  },\n  actuator: {\n    service: {\n      name: null, // This will be dynamically set below\n      action: \"aas\" // Moleculer call service.action > idShortAsset.aas Example: greeter.hello\n    },\n    aas: {\n      idShortAsset: null,\n      idShortSubmodel: null,\n      idShortSubmodelElement: null,\n      format: null,\n      value: null\n    },\n    state: {\n      headlights: \"off\",\n      airConditioning: \"off\",\n      doorLock: \"locked\"\n    }\n  },\n  operationalRequirements:{\n    manualValves: {\n      HV120: \"closed\",\n      HV123: \"open\",\n      HV124: \"closed\",\n      HV131: \"open\",\n      HV132: {\n        value: 50,\n        unit: \"%\",\n        mode: \"manual\"\n      }\n    },\n    proportionalValve: {\n      LV122: {\n        value: 20,    // apenas malha pressao linha 20% demais, deixar 100%.\n        unit: \"%\",\n        mode: \"automatic\"\n      }\n    },\n    panelButtons: {\n      generalKey: \"on\",\n      panel: \"on\",\n      enableOperation: \"on\",\n      pump1: \"on\",\n      pump2: \"on\",\n      emergency: \"off\"\n    }\n  },\n};\nglobal.set(\"registry\", registry);\nreturn { payload: \"registry initialized!\" };",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1100,
        "y": 4380,
        "wires": [
            [
                "81bca89288d433f2"
            ]
        ]
    },
    {
        "id": "5d9d0996c3bbd3ce",
        "type": "function",
        "z": "3fc007a97f3fcca5",
        "name": "Read registry object",
        "func": "var registry = global.get(\"registry\") || {};\nreturn { payload: registry };",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1080,
        "y": 4460,
        "wires": [
            [
                "81bca89288d433f2"
            ]
        ]
    },
    {
        "id": "1b0db871f696e292",
        "type": "function",
        "z": "3fc007a97f3fcca5",
        "name": "Read Specific Variable",
        "func": "var registry = global.get(\"registry\") || {};\nvar path = msg.topic.split(\".\");\nvar value = path.reduce((obj, key) => obj && obj[key], registry);\nreturn { payload: value !== undefined ? value : \"Variable not found\" };",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1080,
        "y": 4540,
        "wires": [
            [
                "81bca89288d433f2"
            ]
        ]
    },
    {
        "id": "caee383e0fb6d040",
        "type": "function",
        "z": "3fc007a97f3fcca5",
        "name": "Update Speed Sensor",
        "func": "var registry = global.get(\"registry\") || {};\nregistry.sensor.state.speed = msg.payload;\nglobal.set(\"registry\", registry);\nreturn { payload: \"Speed updated to \" + msg.payload + \" km/h\" };",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1080,
        "y": 4620,
        "wires": [
            [
                "81bca89288d433f2"
            ]
        ]
    },
    {
        "id": "80572c0410a68875",
        "type": "function",
        "z": "3fc007a97f3fcca5",
        "name": "Toggle Headlights",
        "func": "var registry = global.get(\"registry\") || {};\nregistry.actuator.state.headlights = registry.actuator.state.headlights === \"off\" ? \"on\" : \"off\";\nglobal.set(\"registry\", registry);\nreturn { payload: \"Headlights turned \" + registry.actuator.state.headlights };",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1090,
        "y": 4580,
        "wires": [
            [
                "81bca89288d433f2"
            ]
        ]
    },
    {
        "id": "13a5430f6b30162e",
        "type": "function",
        "z": "3fc007a97f3fcca5",
        "name": "Delete registry object",
        "func": "global.set(\"registry\", null);\nreturn { payload: \"registry deleted!\" };",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1080,
        "y": 4700,
        "wires": [
            [
                "81bca89288d433f2"
            ]
        ]
    },
    {
        "id": "9ac4fbc19b8c1294",
        "type": "inject",
        "z": "3fc007a97f3fcca5",
        "name": "Create registry",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": "",
        "topic": "",
        "x": 820,
        "y": 4380,
        "wires": [
            [
                "f7f2cec6556e80bd"
            ]
        ]
    },
    {
        "id": "f0eabc7de2cff007",
        "type": "inject",
        "z": "3fc007a97f3fcca5",
        "name": "Read registry",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": "",
        "topic": "",
        "x": 810,
        "y": 4460,
        "wires": [
            [
                "5d9d0996c3bbd3ce"
            ]
        ]
    },
    {
        "id": "26365ac2190d3109",
        "type": "inject",
        "z": "3fc007a97f3fcca5",
        "name": "Update Speed",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": "",
        "topic": "",
        "payload": "80",
        "payloadType": "num",
        "x": 810,
        "y": 4620,
        "wires": [
            [
                "caee383e0fb6d040"
            ]
        ]
    },
    {
        "id": "98796e83fd7274f5",
        "type": "inject",
        "z": "3fc007a97f3fcca5",
        "name": "Update Toggle",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": "",
        "topic": "",
        "x": 810,
        "y": 4580,
        "wires": [
            [
                "80572c0410a68875"
            ]
        ]
    },
    {
        "id": "2ee28ca62272e9d5",
        "type": "inject",
        "z": "3fc007a97f3fcca5",
        "name": "Delete registry",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": "",
        "topic": "",
        "x": 810,
        "y": 4700,
        "wires": [
            [
                "13a5430f6b30162e"
            ]
        ]
    },
    {
        "id": "b81a4b7c16dd21d7",
        "type": "inject",
        "z": "3fc007a97f3fcca5",
        "name": "Read Speed",
        "props": [
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": "",
        "topic": "sensor.state.speed",
        "x": 810,
        "y": 4540,
        "wires": [
            [
                "1b0db871f696e292"
            ]
        ]
    },
    {
        "id": "81bca89288d433f2",
        "type": "debug",
        "z": "3fc007a97f3fcca5",
        "name": "Out",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1310,
        "y": 4540,
        "wires": []
    },
    {
        "id": "9339a8ad6e6fe170",
        "type": "function",
        "z": "3fc007a97f3fcca5",
        "name": "Add generic asset",
        "func": "var registry = global.get(\"registry\") || {};\nif (!registry.asset) {\n    registry.asset = {};\n}\nregistry.asset = {\n    \"idShort\": \"genericAsset\",\n};\nglobal.set(\"registry\", registry);\nreturn { payload: \"asset added!\" };",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1090,
        "y": 4420,
        "wires": [
            [
                "81bca89288d433f2"
            ]
        ]
    },
    {
        "id": "befd847c19659dc5",
        "type": "inject",
        "z": "3fc007a97f3fcca5",
        "name": "Create asset",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": "",
        "topic": "",
        "x": 810,
        "y": 4420,
        "wires": [
            [
                "9339a8ad6e6fe170"
            ]
        ]
    },
    {
        "id": "2ac414408badbdf7",
        "type": "function",
        "z": "3fc007a97f3fcca5",
        "name": "Delete generic asset",
        "func": "var registry = global.get(\"registry\") || {};\nif (registry.asset) {\n    delete registry.asset;\n    global.set(\"registry\", registry);\n    return { payload: \"asset deleted!\" };\n} else {\n    return { payload: \"asset not found!\" };\n}",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1080,
        "y": 4660,
        "wires": [
            [
                "81bca89288d433f2"
            ]
        ]
    },
    {
        "id": "3b03f875763ca8cc",
        "type": "inject",
        "z": "3fc007a97f3fcca5",
        "name": "Delete asset",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": "",
        "topic": "",
        "x": 810,
        "y": 4660,
        "wires": [
            [
                "2ac414408badbdf7"
            ]
        ]
    },
    {
        "id": "3a040fbee0c860b8",
        "type": "comment",
        "z": "3fc007a97f3fcca5",
        "name": "CRUD Methods",
        "info": "CRUD Methods (Create, Read, Update and Delete)\n\n\nRegistry – A centralized storage object that holds dynamic variables, configurations, and other essential application data. \nIt serves as a single source of truth for managing runtime settings, environment parameters, and metadata, allowing seamless access and updates across different components of the application. \nThe Registry ensures consistency, flexibility, and maintainability by providing a structured way to store and retrieve critical information.",
        "x": 1300,
        "y": 4380,
        "wires": []
    },
    {
        "id": "e768268cf695f5a0",
        "type": "function",
        "z": "3fc007a97f3fcca5",
        "name": "Read part of object",
        "func": "var registry = global.get(\"registry\") || {};\nvar path = msg.topic.split(\".\");\nvar value = path.reduce((obj, key) => obj && obj[key], registry);\nreturn { payload: value !== undefined ? value : \"Variable not found\" };",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1090,
        "y": 4500,
        "wires": [
            [
                "81bca89288d433f2"
            ]
        ]
    },
    {
        "id": "b14a08e84e16ab97",
        "type": "inject",
        "z": "3fc007a97f3fcca5",
        "name": "Read controller aas",
        "props": [
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": "",
        "topic": "controller.aas",
        "x": 830,
        "y": 4500,
        "wires": [
            [
                "e768268cf695f5a0"
            ]
        ]
    },
    {
        "id": "d34df4d571807dec",
        "type": "http request",
        "z": "70dd01bf0abcf11f",
        "name": "",
        "method": "GET",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "http://192.168.1.201:3005/api/~node/services",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 450,
        "y": 220,
        "wires": [
            [
                "c81b80d212200f09"
            ]
        ]
    },
    {
        "id": "c81b80d212200f09",
        "type": "debug",
        "z": "70dd01bf0abcf11f",
        "name": "debug 59",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 680,
        "y": 220,
        "wires": []
    },
    {
        "id": "b3a9d3877187ecfb",
        "type": "inject",
        "z": "70dd01bf0abcf11f",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 220,
        "y": 220,
        "wires": [
            [
                "d34df4d571807dec"
            ]
        ]
    },
    {
        "id": "1c14a81cf3fafe69",
        "type": "http request",
        "z": "70dd01bf0abcf11f",
        "name": "",
        "method": "GET",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "http://192.168.1.201:3005/api/pit118_daq/aas?idShortSubmodel=OperationalData&idShortSubmodelElement=Percentage&format=value",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 450,
        "y": 280,
        "wires": [
            [
                "d7040e2cf31492bb"
            ]
        ]
    },
    {
        "id": "d7040e2cf31492bb",
        "type": "debug",
        "z": "70dd01bf0abcf11f",
        "name": "debug 60",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 680,
        "y": 280,
        "wires": []
    },
    {
        "id": "e2f8025d8a0182a5",
        "type": "inject",
        "z": "70dd01bf0abcf11f",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 220,
        "y": 280,
        "wires": [
            [
                "1c14a81cf3fafe69"
            ]
        ]
    },
    {
        "id": "558667caa1e54be9",
        "type": "inject",
        "z": "4a50bac9b08cc625",
        "name": "SE Parameters",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "1",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 140,
        "y": 180,
        "wires": [
            [
                "a0d63cdc6a1f5c13"
            ]
        ]
    },
    {
        "id": "a0d63cdc6a1f5c13",
        "type": "function",
        "z": "4a50bac9b08cc625",
        "name": "pid4 parameters",
        "func": "// Verifica se \"Eneable\" é igual a 1\n// if (flow.get(\"Eneable\") !== 1) {\n//     return null; // Não faz nada e interrompe a execução\n// }\n// Obtenção dos valores das variáveis de fluxo e conversão para números\nvar ti = parseFloat(flow.get(\"ti\"));\nvar td = parseFloat(flow.get(\"td\"));\nvar kp = parseFloat(flow.get(\"kp\"));\nvar pv = parseFloat(flow.get(\"pic129_daq\"));\nvar setpoint = parseFloat(flow.get(\"setpoint\"));\nvar error = parseFloat(flow.get(\"error\"));\nvar integrative = parseFloat(flow.get(\"integrative\"));\nvar manipulatedVariable = parseFloat(flow.get(\"manipulateVariable\"));\nvar time = parseFloat(flow.get(\"time\"));\n\nmsg.payload = {\n    \"idShortSubmodel\": \"OperationalData\",\n    \"idShortSubmodelElement\": \"Parameters\",\n    \"value\": {\n        \"ti\": ti,\n        \"td\": td,\n        \"kp\": kp,\n        \"pv\": pv,\n        \"setpoint\": setpoint,\n        \"error\": error,\n        \"integrative\": integrative,\n        \"manipulatedVariable\": manipulatedVariable,\n        \"time\": time\n    }\n};\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 340,
        "y": 180,
        "wires": [
            [
                "bc5b551de017e2d8"
            ]
        ]
    },
    {
        "id": "bc5b551de017e2d8",
        "type": "function",
        "z": "4a50bac9b08cc625",
        "name": "value",
        "func": "// Função para extração apenas do value\n// Obtemos o payload recebido na mensagem\nconst inputPayload = msg.payload;\n\n// Verificamos se o campo \"value\" existe no payload\nif (inputPayload && inputPayload.value) {\n    // Definimos o novo payload com o campo \"value\"\n    msg.payload = inputPayload.value;\n} else {\n    // Se \"value\" não existe, retornamos uma mensagem de erro no payload\n    msg.payload = { error: \"Campo 'value' não encontrado no payload.\" };\n}\n\n// Retornamos a mensagem modificada\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 490,
        "y": 180,
        "wires": [
            [
                "feb3c929c5a09456"
            ]
        ]
    },
    {
        "id": "feb3c929c5a09456",
        "type": "function",
        "z": "4a50bac9b08cc625",
        "name": "JSONTostring",
        "func": "let data = msg.payload; // Assuming msg.payload contains the JSON object\ntry {\n    msg.payload = JSON.stringify(data); // Convert the JSON object into a string\n} catch (e) {\n    node.error(\"Invalid JSON object: \" + e);\n}\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 640,
        "y": 180,
        "wires": [
            [
                "cc54944be7ade824"
            ]
        ]
    },
    {
        "id": "cc54944be7ade824",
        "type": "OpcUa-Item",
        "z": "4a50bac9b08cc625",
        "item": "ns=3;i=1477",
        "datatype": "String",
        "value": "",
        "name": "",
        "x": 840,
        "y": 180,
        "wires": [
            [
                "cd11c8a9bf0908e5"
            ]
        ]
    },
    {
        "id": "cd11c8a9bf0908e5",
        "type": "OpcUa-Client",
        "z": "4a50bac9b08cc625",
        "endpoint": "f23add3fd8d371dd",
        "action": "write",
        "deadbandtype": "a",
        "deadbandvalue": 1,
        "time": 10,
        "timeUnit": "s",
        "certificate": "n",
        "localfile": "",
        "localkeyfile": "",
        "securitymode": "None",
        "securitypolicy": "None",
        "useTransport": false,
        "maxChunkCount": 1,
        "maxMessageSize": 8192,
        "receiveBufferSize": 8192,
        "sendBufferSize": 8192,
        "name": "Write",
        "x": 1030,
        "y": 180,
        "wires": [
            [
                "545a0a914a1ab009"
            ],
            []
        ]
    },
    {
        "id": "545a0a914a1ab009",
        "type": "debug",
        "z": "4a50bac9b08cc625",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1230,
        "y": 180,
        "wires": []
    },
    {
        "id": "6511a3c48a68637a",
        "type": "OpcUa-Item",
        "z": "4a50bac9b08cc625",
        "item": "br=/Objects/AASROOT/pic118_pid4/OperationalData/Payload/Value",
        "datatype": "String",
        "value": "",
        "name": "",
        "x": 500,
        "y": 240,
        "wires": [
            [
                "7265268cd280afd9"
            ]
        ]
    },
    {
        "id": "7265268cd280afd9",
        "type": "OpcUa-Client",
        "z": "4a50bac9b08cc625",
        "endpoint": "f23add3fd8d371dd",
        "action": "read",
        "deadbandtype": "a",
        "deadbandvalue": 1,
        "time": 10,
        "timeUnit": "s",
        "certificate": "n",
        "localfile": "",
        "localkeyfile": "",
        "securitymode": "None",
        "securitypolicy": "None",
        "useTransport": false,
        "maxChunkCount": 1,
        "maxMessageSize": 8192,
        "receiveBufferSize": 8192,
        "sendBufferSize": 8192,
        "name": "Read",
        "x": 650,
        "y": 240,
        "wires": [
            [
                "8777bd9417cdb740"
            ],
            []
        ]
    },
    {
        "id": "8777bd9417cdb740",
        "type": "function",
        "z": "4a50bac9b08cc625",
        "name": "stringToJSON",
        "func": "\nlet data = msg.payload; // Assuming msg.payload contains the string \"{}\"\ntry {\n    msg.payload = JSON.parse(data); // Convert the string into a JSON object\n} catch (e) {\n    node.error(\"Invalid JSON format: \" + e);\n}\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 800,
        "y": 240,
        "wires": [
            [
                "197a9b0967925453"
            ]
        ]
    },
    {
        "id": "197a9b0967925453",
        "type": "debug",
        "z": "4a50bac9b08cc625",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1230,
        "y": 240,
        "wires": []
    },
    {
        "id": "7393a845c5530e07",
        "type": "inject",
        "z": "4a50bac9b08cc625",
        "name": "SE Payload",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "1",
        "crontab": "",
        "once": false,
        "onceDelay": "",
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 150,
        "y": 240,
        "wires": [
            [
                "6511a3c48a68637a"
            ]
        ]
    }
]